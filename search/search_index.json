{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Textual Timepiece","text":"<p>Welcome to the Textual Timepiece Documentation.</p> <p>Textual Timepiece is a collection of widgets related to time management and manipulation. It includes various time and date pickers, an activity heatmap for displaying yearly data and various tools for constructing timelines.</p>"},{"location":"#demo","title":"Demo","text":"UVPIPXPIP <p>Note</p> <p>Requires uv to be installed and configured.</p> <pre><code>uvx textual-timepiece\n</code></pre> <pre><code>pipx run textual-timepiece\n</code></pre> <pre><code>pip install textual-timepiece &amp;&amp; textual-timepiece\n</code></pre>"},{"location":"#included-widgets","title":"Included Widgets","text":"PickersActivity HeatmapTimelineSelectorInput Widget Description DatePicker A visual date picker with an input and overlay. DurationPicker Visual duration picker with duration up to 99 hours. TimePicker Visual time picker for setting a time in a 24 hour clock. DateTimePicker Datetime picker that combines a date and time. DateRangePicker Date range picker for picking an interval between two dates. DateTimeRangePicker Range picker for picking an interval between two times. DateTimeDurationPicker Pick an interval between two times, including a duration input. Widget Description ActivityHeatmap Activity Heatmap for displaying yearly activity similar to the GitHub contribution graph. HeatmapManager Widget for browsing the Activity Heatmap with yearly navigation builtin. Widget Description HorizontalEntry Horizontal entry for a horizontal timeline layout. HorizontalRuler Horizontal ruler for marking horizontal timelines. HorizontalTimeline Basic timeline widget that displays entries in a horizontal view. HorizontalTimelineNavigation Horizontal widget containing a horizontal timeline and header. RuledHorizontalTimeline Ruled horizontal timeline with markers. RuledVerticalTimeline Ruled vertical timeline with markers. VerticalEntry Vertical entry for a vertical timeline layout. VerticalRuler Vertical ruler for marking vertical timelines. VerticalTimeline Basic timeline widget that displays entries in a vertical view. VerticalTimelineNavigation Vertical widget containing a vertical timeline and header. Widget Description DateSelect Date selection widget with calendar panes. TimeSelect Time selection widget with various times in 30 minute intervals. DurationSelect Duration selection widget with modifiers for adjust time or duration. Widget Description DateInput Date input which takes in a iso-format date. TimeInput Time input that takes in 24 hour clocked in a HH:MM:SS format. DurationInput Duration input with a duration up to 99 hours. DateTimeInput An input with a combination of a date and time in iso-format."},{"location":"#installation","title":"Installation","text":"PIPUVPoetry <pre><code>pip install textual-timepiece\n</code></pre> <pre><code>uv add textual-timepiece\n</code></pre> <pre><code>poetry add textual-timepiece\n</code></pre> <p>Info</p> <p>Requires whenever as an additional dependency.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#datepicker","title":"DatePicker","text":"ResultSource <p> DatePickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a2025-06-07\u25ce\u25b2\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502 \u2502\u2190June\u00a02025\u25ce\u2192\u2502 \u2502\u2502 \u2502MonTueWedThuFriSatSun\u2502 \u2502\u2502 \u2502\u00a0\u00a01\u2502 \u2502\u2502 \u2502\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u2502 \u2502\u2502 \u2502\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u2502 \u2502\u2502 \u2502\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u2502 \u2502\u2502 \u2502\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029\u2502 \u2502\u2502 \u2502\u00a030\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual_timepiece.pickers import DatePicker\nfrom whenever import Date\n\nclass DatePickerApp(App[None]):\n    def compose(self) -&gt; ComposeResult:\n        yield DatePicker(Date.today_in_system_tz())\n\nif __name__ == \"__main__\":\n    DatePickerApp().run()\n</code></pre>"},{"location":"#datetimepicker","title":"DateTimePicker","text":"ResultSource <p> DateTimePickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u00a0\u00a0\u00a0-\u00a0\u00a0-\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0\u00a0:\u00a0\u00a0\u25ce\u25b2\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0\u2502 \u2502\u2190June\u00a02025\u25ce\u2192\u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u2502 \u2502\u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u2502 \u2502MonTueWedThuFriSatSun\u00a000:00\u00a0\u00a000:30\u00a0\u00a001:00\u00a0\u00a001:30\u00a0\u2502 \u2502\u00a002:00\u00a0\u00a002:30\u00a0\u00a003:00\u00a0\u00a003:30\u00a0\u2502 \u2502\u00a0\u00a01\u00a004:00\u00a0\u00a004:30\u00a0\u00a005:00\u00a0\u00a005:30\u00a0\u2502 \u2502\u00a006:00\u00a0\u00a006:30\u00a0\u00a007:00\u00a0\u00a007:30\u00a0\u2502 \u2502\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u00a008:00\u00a0\u00a008:30\u00a0\u00a009:00\u00a0\u00a009:30\u00a0\u2502 \u2502\u00a010:00\u00a0\u00a010:30\u00a0\u00a011:00\u00a0\u00a011:30\u00a0\u2502 \u2502\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u00a012:00\u00a0\u00a012:30\u00a0\u00a013:00\u00a0\u00a013:30\u00a0\u2502 \u2502\u00a014:00\u00a0\u00a014:30\u00a0\u00a015:00\u00a0\u00a015:30\u00a0\u2502 \u2502\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u00a016:00\u00a0\u00a016:30\u00a0\u00a017:00\u00a0\u00a017:30\u00a0\u2502 \u2502\u00a018:00\u00a0\u00a018:30\u00a0\u00a019:00\u00a0\u00a019:30\u00a0\u2502 \u2502\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029\u00a020:00\u00a0\u00a020:30\u00a0\u00a021:00\u00a0\u00a021:30\u00a0\u2502 \u2502\u00a022:00\u00a0\u00a022:30\u00a0\u00a023:00\u00a0\u00a023:30\u00a0\u2502 \u2502\u00a030\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual_timepiece.pickers import DateTimePicker\nfrom whenever import SystemDateTime\n\nclass DateTimePickerApp(App[None]):\n    def compose(self) -&gt; ComposeResult:\n        yield DateTimePicker()\n\nif __name__ == \"__main__\":\n    DateTimePickerApp().run()\n</code></pre>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#051-2025-06-07","title":"0.5.1 - 2025-06-07","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li><code>DEFAULT_CSS</code>: Escape initial newline by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#050-2025-06-06","title":"0.5.0 - 2025-06-06","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li><code>demo</code>: Add <code>Mount</code> event as argument by @ddkasa</li> <li><code>timeline</code>: Add subclassed messages to timelines by @ddkasa</li> <li><code>AbstractTimeline</code>: Add entry generic to messages by @ddkasa</li> <li><code>demo</code>: Add <code>Mount</code> event as argument by @ddkasa</li> <li>Add missing future annotations imports by @ddkasa</li> <li><code>timeline-layout</code>: Add explicit <code>strict</code> parameters to <code>zip</code> by @ddkasa</li> <li><code>AbstractTimeline</code>: Add <code>refresh_line</code> helper method by @ddkasa</li> <li><code>timeline</code>: Add timeline widgets to module by @ddkasa</li> <li><code>utility</code>: Add <code>breakdown_seconds</code> as a public helper function by @ddkasa</li> <li><code>demo</code>: Add timelines to demo app by @ddkasa</li> <li><code>utility</code>: Add <code>format_seconds</code> as a public helper function by @ddkasa</li> <li><code>message</code>: Add widget types to messages by @ddkasa</li> <li><code>DateTimeInput</code>: Add <code>value</code> alias to <code>DateTimeChanged</code> message by @ddkasa</li> <li>Add additional info to about module by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li><code>timeline</code>: Update generics for type hints by @ddkasa</li> <li><code>DateRangePicker</code>: Items get disabled on default target by @ddkasa</li> <li>Breaking <code>ActivityHeatmap</code>: Rename <code>DateSelected</code> to <code>DaySelected</code> by @ddkasa</li> <li><code>DateTimeInput</code>: Replace <code>PlainDateTime.strptime</code> with <code>parse_strptime</code> by @ddkasa</li> <li>Breaking <code>pickers</code>: Replace all <code>LocalDateTime</code> occurences with <code>PlainDateTime</code> by @ddkasa</li> <li><code>timeline</code>: Move <code>refresh_line</code> method to <code>VerticaTimeline</code> by @ddkasa</li> <li><code>AbstractRuledTimeline</code>: Make sure to <code>await</code> removals and mounts by @ddkasa</li> <li><code>AbstractTimeline</code>: Use local instance <code>Deleted</code> message by @ddkasa</li> <li><code>timelines</code>: Use different marker logic for horizontal and vertical timelines by @ddkasa</li> <li><code>timeline</code>: Use generic timeline type for messages by @ddkasa</li> <li><code>AbstractTimeline</code>: Simplify message names to single past-participle verbs by @ddkasa</li> <li><code>demo</code>: Combine <code>with</code> statements in <code>compose</code> method by @ddkasa</li> <li><code>ActivityHeatmap</code>: Combine <code>_date_lookup</code> if statement by @ddkasa</li> <li>Move types into <code>TYPE_CHECKING</code> by @ddkasa</li> <li><code>TimeSelect</code>: Replace <code>action_focus_neighbor</code> if blocks with ternary statements by @ddkasa</li> <li>Quote all <code>cast</code> types by @ddkasa</li> <li><code>pickers</code>: Rename <code>T</code> generic to <code>ValueType</code> by @ddkasa</li> <li><code>pickers</code>: Rename <code>TI</code> generic to <code>InputType</code> by @ddkasa</li> <li><code>demo</code>: Rename <code>__main__</code> to <code>_demo</code> by @ddkasa</li> <li><code>EndDateSelect</code>: Reword docstring summary to single line by @ddkasa</li> <li><code>timeline</code>: Use generics for all timelines by @ddkasa</li> <li><code>AbstractTimeline</code>: Rename messages and remove <code>dataclass</code> decorator by @ddkasa</li> <li><code>TimelineEntry</code>: Rename messages and remove <code>dataclass</code> decorator by @ddkasa</li> <li><code>VerticalTimeline</code>: Update <code>render_lines</code> to cache basic strip by @ddkasa</li> <li><code>AbstractRuler</code>: Prevent compute methods from firing on generated reactives by @ddkasa</li> <li><code>AbstractEntry</code>: Convert <code>clicked</code> to reactive by @ddkasa</li> <li><code>AbstractTimeline</code>: Make sure to update layout on <code>length</code> update by @ddkasa</li> <li><code>AbstractTimeline</code>: Update only marker lines that have changed by @ddkasa</li> <li><code>AbstractEntry</code>: Use keywords for mime creation by @ddkasa</li> <li><code>timeline</code>: Implement timeline manager classes by @ddkasa</li> <li><code>timeline</code>: Implement base timeline classes by @ddkasa</li> <li><code>timeline</code>: Implement timeline layouts by @ddkasa</li> <li><code>timeline</code>: Implement timeline entry classes by @ddkasa</li> <li><code>ActivityHeatmap</code>: Implement <code>Selected</code> base message by @ddkasa</li> <li><code>BaseMessage</code>: Implement generic type for node by @ddkasa</li> <li><code>DateTimeRangePicker</code>: Convert <code>Changed</code> to normal class by @ddkasa</li> <li>Breaking <code>DateTimeRangePicker</code>: Rename <code>DTRangeChanged</code> message to <code>Changed</code> by @ddkasa</li> <li><code>DateRangePicker</code>: Convert <code>Changed</code> to normal class by @ddkasa</li> <li>Breaking <code>DateRangePicker</code>: Rename <code>DateRangeChanged</code> message to <code>Changed</code> by @ddkasa</li> <li><code>TimePicker</code>: Implement <code>Changed.value</code> property by @ddkasa</li> <li><code>TimePicker</code>: Convert <code>Changed</code> to normal class by @ddkasa</li> <li>Breaking <code>TimePicker</code>: Rename <code>TimeChanged</code> message to <code>Changed</code> by @ddkasa</li> <li><code>TimeInput</code>: Implement <code>Updated.value</code> property by @ddkasa</li> <li><code>TimeInput</code>: Convert <code>Updated</code> to normal class by @ddkasa</li> <li>Breaking <code>TimeInput</code>: Rename <code>TimeChanged</code> message to <code>Updated</code> by @ddkasa</li> <li><code>DurationPicker</code>: Implement <code>Changed.value</code> property by @ddkasa</li> <li><code>DurationPicker</code>: Convert <code>Changed</code> to normal class by @ddkasa</li> <li>Breaking <code>DurationPicker</code>: Rename <code>DurationChanged</code> message to <code>Changed</code> by @ddkasa</li> <li><code>DurationInput</code>: Implement <code>Updated.value</code> property by @ddkasa</li> <li><code>DurationInput</code>: Convert <code>Updated</code> to normal class by @ddkasa</li> <li>Breaking <code>DurationInput</code>: Rename <code>DurationChanged</code> message to <code>Updated</code> by @ddkasa</li> <li><code>TimeSelect</code>: Implement <code>Selected.value</code> property by @ddkasa</li> <li>Breaking <code>TimeSelect</code>: Rename <code>TimeSelected</code> message to <code>Selected</code> by @ddkasa</li> <li><code>TimeSelect</code>: Convert <code>TimeSelected</code> to normal class by @ddkasa</li> <li>Breaking <code>DurationSelect</code>: Rename <code>DurationRounded</code> message to <code>Rounded</code> by @ddkasa</li> <li>Breaking <code>DurationSelect</code>: Rename <code>DurationAdjusted</code> message to <code>Adjusted</code> by @ddkasa</li> <li><code>DurationSelect</code>: Convert <code>DurationRounded</code> to normal class by @ddkasa</li> <li><code>DurationSelect</code>: Convert <code>DurationAdjusted</code> to normal class by @ddkasa</li> <li><code>DateSelect</code>: Implement <code>Changed.value</code> alias by @ddkasa</li> <li>Breaking <code>DateSelect</code>: Rename <code>EndDateChanged</code> to <code>EndChanged</code> by @ddkasa</li> <li>Breaking <code>DateSelect</code>: Rename <code>DateChanged</code> to <code>StartChanged</code> by @ddkasa</li> <li><code>DateSelect</code>: Implement <code>Changed</code> base message by @ddkasa</li> <li><code>DatePicker</code>: Implement <code>Changed.value</code> property by @ddkasa</li> <li><code>DatePicker</code>: Convert <code>Changed</code> to normal class by @ddkasa</li> <li>Breaking <code>DatePicker</code>: Rename <code>DateChanged</code> message to <code>Changed</code> by @ddkasa</li> <li><code>DateInput</code>: Implement <code>Updated.value</code> property by @ddkasa</li> <li><code>DateInput</code>: Convert <code>Updated</code> to normal class by @ddkasa</li> <li>Breaking <code>DateInput</code>: Rename <code>DateChanged</code> message to <code>Updated</code> by @ddkasa</li> <li><code>DateTimePicker</code>: Convert <code>Changed</code> to normal class by @ddkasa</li> <li>Breaking <code>DateTimePicker</code>: Rename <code>DateTimeChanged</code> message to <code>Changed</code> by @ddkasa</li> <li>Breaking <code>DateTimeInput</code>: Rename <code>DateTimeChanged</code> to <code>Updated</code> by @ddkasa</li> <li><code>DateTimeInput</code>: Convert <code>DateTimeChanged</code> message to standard class by @ddkasa</li> <li><code>HeatmapManager</code>: Convert <code>YearChanged</code> message to standard class by @ddkasa</li> <li><code>ActivityHeatmap</code>: Move <code>can_focus</code> into class arguments by @ddkasa</li> <li><code>ActivityHeatmap</code>: Convert messages to standard classes by @ddkasa</li> <li><code>base-widgets</code>: Move <code>can_focus</code> into class arguments by @ddkasa</li> <li><code>BaseMessage</code>: Convert <code>BaseMessage</code> to standard class by @ddkasa</li> <li><code>BaseOverlay</code>: Rename <code>Close</code> message to <code>Closed</code> by @ddkasa</li> <li>Breaking <code>demo</code>: Rename <code>demo</code> command to <code>textual-timepiece</code> by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li><code>range-picker</code>: Update snapshots by @ddkasa</li> <li><code>AbstractTimeline</code>: Make sure to clear <code>_start</code> value during cancellation by @ddkasa</li> <li><code>timeline</code>: Update all snapshots by @ddkasa</li> <li><code>snapshots</code>: Update all snapshots by @ddkasa</li> <li><code>nox</code>: Correctly test all python versions locally by @ddkasa</li> <li><code>typing</code>: Update typing to adhere to strict checks by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li><code>timeline</code>: Remove old todo notes by @ddkasa</li> <li><code>AbstractEntry</code>: Remove unnecessary <code>Offset</code> hint by @ddkasa</li> <li><code>HorizontalTimeline</code>: Remove <code>_cached_strip</code> initial value by @ddkasa</li> <li><code>time-picker</code>: Remove yoda expressions by @ddkasa</li> <li>Remove unnecessary elif statements after return by @ddkasa</li> <li><code>date-picker</code>: Remove unnecessary `TYPE_CHECKING by @ddkasa</li> <li><code>pickers</code>: Remove unnecessary spaces after docstring by @ddkasa</li> <li><code>AbstractTimeline</code>: Remove spaces after docstring by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#040-2025-03-10","title":"0.4.0 - 2025-03-10","text":""},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Breaking <code>heatmap</code>: Use values reactive as entry point by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li><code>heatmap-manager</code>: Remove border from navigation by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#031-2025-03-04","title":"0.3.1 - 2025-03-04","text":""},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li><code>bindings</code>: Reverse binding type override by @ddkasa</li> <li><code>heatmap</code>: Reduce loops in <code>_render_weeks</code> method by @ddkasa</li> <li><code>heatmap</code>: Reduce loop count in <code>_render_weekday</code> method by @ddkasa</li> <li><code>heatmap</code>: Use sum builtin for sum methods by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li><code>heatmap</code>: Incorrect offset set on tile by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#removed_2","title":"Removed","text":"<ul> <li><code>demo</code>: Remove documentation &amp; github buttons by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#030-2025-02-28","title":"0.3.0 - 2025-02-28","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li><code>pickers</code>: Add DateTimeInput to module by @ddkasa</li> <li><code>pickers</code>: Add DateInput to module by @ddkasa</li> <li><code>date-select</code>: Add default border &amp; background by @ddkasa</li> <li><code>demo</code>: Add visual select widgets to demo by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#changed_4","title":"Changed","text":"<ul> <li>Breaking <code>dur-picker</code>: Convert <code>on_mount</code> to private method by @ddkasa</li> <li><code>pickers</code>: Convert <code>watch_expanded</code> to private method by @ddkasa</li> <li>Breaking <code>date-picker</code>: Convert watch_date to private method by @ddkasa</li> <li>Breaking <code>time-input</code>: Convert watch_time to private method by @ddkasa</li> <li>Breaking <code>pickers</code>: Disable input blurred message by @ddkasa</li> <li><code>heatmap</code>: More accurate type for input by @ddkasa</li> <li>Breaking <code>heatmap</code>: Use <code>int</code> instead of <code>Date</code> for heatmap year by @ddkasa</li> <li><code>heatmap</code>: Use cached property for heatmap navigation by @ddkasa</li> <li>Breaking <code>dt-dur-range</code>: Convert on_mount to private method by @ddkasa</li> <li><code>constants</code>: Use constants for special unicode characters by @ddkasa</li> <li><code>date-picker</code>: Use new date add method by @ddkasa</li> <li>Breaking <code>date-picker</code>: Convert to private method by @ddkasa</li> <li><code>date-picker</code>: Improve render month method by @ddkasa</li> <li><code>date-picker</code>: Re-order methods by @ddkasa</li> <li><code>date-picker</code>: Improve render weekday by @ddkasa</li> <li><code>demo</code>: Move tcss to app by @ddkasa</li> <li><code>pickers</code>: Improve default tcss by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li><code>pickers</code>: Validate all mini picker variants by @ddkasa</li> <li><code>dt-picker</code>: Use LocalDateTime in input generic by @ddkasa</li> <li><code>pickers</code>: Update all snapshots by @ddkasa</li> <li><code>dt-picker</code>: Extra edge case tests by @ddkasa</li> <li><code>range-pickers</code>: Use correct widget identifier by @ddkasa</li> <li><code>activity-heatmap</code>: Override tooltip type by @ddkasa</li> <li><code>extra</code>: Include left border with get_line_offset by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#removed_3","title":"Removed","text":"<ul> <li>Breaking <code>heatmap</code>: Remove unnecessary parent parameters by @ddkasa</li> <li><code>heatmap</code>: Remove unnecessary tabs property by @ddkasa</li> <li>Breaking <code>widgets</code>: Remove imports from base module by @ddkasa</li> <li><code>time-picker</code>: Remove unnecessary focus bool by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#020-2025-02-13","title":"0.2.0 - 2025-02-13","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li><code>pickers</code>: Add default message argument by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#changed_5","title":"Changed","text":"<ul> <li><code>date-range-picker</code>: Allow picking the end date first by @ddkasa</li> <li>Breaking <code>pickers</code>: Rename dialogs to overlays by @ddkasa</li> <li>Breaking <code>pickers</code>: Switch all SystemDateTime to LocalDateTime by @ddkasa</li> <li><code>dt-picker</code>: Use a datetime format for parsing by @ddkasa</li> <li><code>dt-picker</code>: Verify edge cases by @ddkasa</li> <li><code>date-picker</code>: Verify edge cases by @ddkasa</li> <li>Move directions alias by @ddkasa</li> <li><code>date-picker</code>: Use add method for location reactive by @ddkasa</li> <li><code>range-pickers</code>: Update default &amp; clear action functionality by @ddkasa</li> <li><code>pickers</code>: Use a base method for expand button by @ddkasa</li> <li><code>pickers</code>: Update default &amp; clear action functionality by @ddkasa</li> <li>Make reactive typing more consistent by @ddkasa</li> <li>Use dedicated target button by @ddkasa</li> <li><code>date-picker</code>: Use first row for aligning only by @ddkasa</li> <li><code>pickers</code>: Simplify some typing by @ddkasa</li> <li><code>pickers</code>: Rename binding by @ddkasa</li> <li><code>date-select</code>: Use max unicode 1.1 icons by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li><code>heatmap</code>: Deal with year edge cases by @ddkasa</li> <li><code>range-pickers</code>: Lock button using click method by @ddkasa</li> <li><code>dt-picker</code>: Wrong reactive bound to overlay by @ddkasa</li> <li><code>pickers</code>: Update snapshots by @ddkasa</li> <li><code>heatmap</code>: Adjust keyboard month navigation by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#removed_4","title":"Removed","text":"<ul> <li><code>datetime-picker</code>: Remove unnecessary action by @ddkasa</li> <li><code>pickers</code>: Remove unused placeholder class by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#010-2025-02-09","title":"[0.1.0] - 2025-02-09","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li><code>pickers</code>: Add module init file by @ddkasa</li> <li>Add about module by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#changed_6","title":"Changed","text":"<ul> <li><code>heatmap</code>: Implement activity heatmap by @ddkasa</li> <li><code>utility</code>: Implement helper functionality by @ddkasa</li> <li><code>widgets</code>: Supplementary widgets by @ddkasa</li> <li><code>pickers</code>: Import pickers into base module by @ddkasa</li> <li><code>pickers</code>: Implement timerange picker classes by @ddkasa</li> <li><code>pickers</code>: Implement datetime picker classes by @ddkasa</li> <li><code>pickers</code>: Implement time &amp; duration picker classes by @ddkasa</li> <li><code>pickers</code>: Implement date picker classes by @ddkasa</li> <li><code>pickers</code>: Implement base picker classes by @ddkasa</li> <li><code>demo</code>: Implement demo app by @ddkasa</li> <li>Init commit by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li>Implement freeze_time fixture by @ddkasa</li> <li>Implement test app fixture by @ddkasa</li> </ul>"},{"location":"CHANGELOG/#new-contributors","title":"New Contributors","text":"<ul> <li>@ddkasa made their first contribution</li> </ul>"},{"location":"LICENSE/","title":"MIT License","text":"<p>Copyright (c) 2025, David Kasakaitis</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#date-picker","title":"Date Picker","text":"ResultSource <p> DatePickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u00a0\u00a0\u00a0-\u00a0\u00a0-\u00a0\u00a0\u25ce\u00a0\u25bc\u00a0\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual_timepiece.pickers import DatePicker\n\n\nclass DatePickerApp(App[None]):\n\n    def compose(self) -&gt; ComposeResult:\n        yield DatePicker()\n\n    def on_date_picker_date_changed(self, message: DatePicker.Changed) -&gt; None:\n        message.stop()\n        if message.date:\n            msg = f\"Date changed to {message.date.format_common_iso()}.\"\n        else:\n            msg = \"Date was removed.\"\n\n        self.notify(msg)\n\n\nif __name__ == \"__main__\":\n    DatePickerApp().run()\n</code></pre>"},{"location":"examples/#date-range","title":"Date Range","text":"ResultSource <p> DateRangeApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a2025-02-05\u25ce\ud83d\udd12\u00a0\u00a0\u00a0\u00a0-\u00a0\u00a0-\u00a0\u00a0\u25ce\u00a0\u25bc\u00a0\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual_timepiece.pickers import DateRangePicker\nfrom whenever import Date, weeks\n\n\nclass DateRangeApp(App[None]):\n\n    def compose(self) -&gt; ComposeResult:\n        yield DateRangePicker(Date(2025, 2, 5), date_range=weeks(1))\n\n\nif __name__ == \"__main__\":\n    DateRangeApp().run()\n</code></pre>"},{"location":"examples/#date-select","title":"Date Select","text":"ResultSource <p> DateSelectApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502 \u2502\u2190June\u00a02025\u25ce\u2192\u2502 \u2502\u2502 \u2502MonTueWedThuFriSatSun\u2502 \u2502\u2502 \u2502\u00a0\u00a01\u2502 \u2502\u2502 \u2502\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u2502 \u2502\u2502 \u2502\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u2502 \u2502\u2502 \u2502\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u2502 \u2502\u2502 \u2502\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029\u2502 \u2502\u2502 \u2502\u00a030\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual import on\nfrom textual.widgets import Label\nfrom textual_timepiece.pickers import DatePicker, DateSelect\nfrom whenever import Date, days\n\n\nclass DateSelectApp(App[None]):\n\n    def compose(self) -&gt; ComposeResult:\n        yield DateSelect(Date.today_in_system_tz(), date_range=days(3))\n        yield Label(variant=\"accent\")\n\n    @on(DateSelect.StartChanged)\n    @on(DateSelect.EndChanged)\n    def on_date_changed(self, message: DateSelect.StartChanged | DateSelect.EndChanged) -&gt; None:\n        new_content = f\"  {message.widget.date} - {message.widget.end_date}  \"\n        self.query_one(Label).update(new_content)\n\n\nif __name__ == \"__main__\":\n    DateSelectApp().run()\n</code></pre>"},{"location":"examples/#datetime-range-picker","title":"DateTime Range Picker","text":"ResultSource <p> DTPickerRangeApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a2025-06-0708:45:26\u25ce\ud83d\udd13\u00a0\u00a0\u00a0\u00a0-\u00a0\u00a0-\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0\u00a0:\u00a0\u00a0\u25ce\u00a0\u25bc\u00a0\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u258c \u258cStarted\u00a0timer! \u258c </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual_timepiece.pickers import DateTimeRangePicker\nfrom textual import on\nfrom whenever import Date, SystemDateTime\n\n\nclass DTPickerRangeApp(App[None]):\n\n    def on_mount(self) -&gt; None:\n        self.query_one(DateTimeRangePicker).disable_end()\n        self.set_timer(10, self.stop_timer)\n        self.notify(\"Started timer!\")\n\n    def compose(self) -&gt; ComposeResult:\n        yield DateTimeRangePicker(SystemDateTime.now().local())\n\n    def stop_timer(self) -&gt; None:\n        dt_range = self.query_one(DateTimeRangePicker).disable_end(disable=False)\n        dt_range.end_dt = SystemDateTime.now().local()\n\n\nif __name__ == \"__main__\":\n    DTPickerRangeApp().run()\n</code></pre>"},{"location":"examples/#activity-heatmap","title":"Activity Heatmap","text":"ResultSource <p> ActivityApp \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u00a0&lt;&lt;\u00a0\u00a0&lt;\u00a02025\u25ce\u00a0&gt;\u00a0\u00a0&gt;&gt;\u00a0\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 Mon\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Tue\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Wed\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Thu\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Fri\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Sat\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 Sun\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u00a01\u00a02\u00a03\u00a04\u00a05\u00a06\u00a07\u00a08\u00a0910111213141516171819202122232425 JanFebMarAprMayJun \u258d </p> <pre><code>import random\nfrom collections import defaultdict\n\nfrom textual.app import App, ComposeResult\nfrom textual_timepiece.activity_heatmap import ActivityHeatmap, HeatmapManager\n\n\nclass ActivityApp(App[None]):\n    def _on_heatmap_manager_year_changed(\n        self,\n        message: HeatmapManager.YearChanged,\n    ) -&gt; None:\n        message.stop()\n        self.set_heatmap_data(message.year)\n\n    def retrieve_data(self, year: int) -&gt; ActivityHeatmap.ActivityData:\n        \"\"\"Placeholder example on how the data could be generated.\"\"\"\n        random.seed(year)\n        template = ActivityHeatmap.generate_empty_activity(year)\n        return defaultdict(\n            lambda: 0,\n            {\n                day: random.randint(6000, 20000)\n                for week in template\n                for day in week\n                if day\n            },\n        )\n\n    def set_heatmap_data(self, year: int) -&gt; None:\n        \"\"\"Sets the data based on the current data.\"\"\"\n        self.query_one(ActivityHeatmap).values = self.retrieve_data(year)\n\n    def _on_mount(self) -&gt; None:\n        self.set_heatmap_data(2025)\n\n    def compose(self) -&gt; ComposeResult:\n        yield HeatmapManager(2025)\n\n\nif __name__ == \"__main__\":\n    ActivityApp().run()\n</code></pre>"},{"location":"examples/#single-line-picker","title":"Single Line Picker","text":"ResultSource <p> MiniPickerApp 2025-06-0708:45:26\u25ce00:00:00\ud83d\udd132025-06-0708:45:26\u25ce\u00a0\u25bc\u00a0 </p> <pre><code>from textual.app import App, ComposeResult\nfrom textual_timepiece.pickers import DateTimeDurationPicker\nfrom whenever import Date, SystemDateTime, weeks\n\n\nclass MiniPickerApp(App[None]):\n\n    def compose(self) -&gt; ComposeResult:\n        yield DateTimeDurationPicker(SystemDateTime.now().local(), classes=\"mini\")\n\n\nif __name__ == \"__main__\":\n    MiniPickerApp().run()\n</code></pre>"},{"location":"examples/#vertical-timeline","title":"Vertical Timeline","text":"ResultSource <p> TimelineApp \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e01:00\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e02:00\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e03:00\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e04:00\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e05:00\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a \u258e\u00a0\u2500\u2500\u2500\u2500\u00a0\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a\u258e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u258a </p> <pre><code>from __future__ import annotations\n\nfrom textual import on, work\nfrom textual.app import ComposeResult, App\nfrom textual.containers import Center, Middle\nfrom textual.screen import ModalScreen\nfrom textual.widgets import Input\n\nfrom textual_timepiece.timeline import RuledVerticalTimeline\nfrom textual_timepiece.timeline import VerticalTimeline\n\n\nclass NamingModal(ModalScreen[str]):\n    \"\"\"Modal screen for naming entries.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\\\n    NamingModal {\n        align: center middle;\n        Center{\n            border: tall $primary;\n            border-top: panel $primary;\n            border-title-align: center;\n            border-title-style: bold;\n            min-width: 34;\n            width: 50%;\n            min-height: 5;\n            height: 20%;\n        }\n        Input {\n            min-width: 30;\n        }\n    }\n    \"\"\"\n    BINDINGS = [(\"escape\", \"dismiss\")]\n\n    def compose(self) -&gt; ComposeResult:\n        with Center() as center, Middle():\n            center.border_title = \"What would you like to name the entry?\"\n            yield Input(\n                placeholder=\"Name\",\n                valid_empty=False,\n                validate_on=[\"submitted\"],\n            )\n\n    def on_input_submitted(self, message: Input.Submitted) -&gt; None:\n        message.stop()\n        if message.input.is_valid:\n            self.dismiss(message.value)\n\n\nclass TimelineApp(App[None]):\n    \"\"\"Example of how timelines could be implemented.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        yield RuledVerticalTimeline(3)\n\n    @work(name=\"naming-worker\")\n    async def on_vertical_timeline_created(\n        self,\n        message: VerticalTimeline.Created,\n    ) -&gt; None:\n        result = await self.push_screen_wait(NamingModal())\n        message.entry.remove_class(\"-mime\").update(result or \"To Be Named\")\n\n    def on_vertical_timeline_deleted(\n        self,\n        message: VerticalTimeline.Deleted,\n    ) -&gt; None:\n        self.notify(f\"Successfully deleted {message.entry.visual!s}!\")\n\n\nif __name__ == \"__main__\":\n    TimelineApp().run()\n</code></pre>"},{"location":"examples/#horizontal-timeline","title":"Horizontal Timeline","text":"ResultSource <p> TimelineApp \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u00a0-\u00a0\u258a2\u258e\u00a0+\u00a0 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u250201:00\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u250202:00\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u250203:00\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u250204:00\u2502\u2502\u2502\u2502\u2502 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 One\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 Two\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 \u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 Three\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502\u2502 \u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581 </p> <pre><code>from __future__ import annotations\n\nfrom textual.reactive import var\n\nfrom textual import on, work\nfrom textual.app import ComposeResult, App\nfrom textual.containers import Center, Horizontal, HorizontalGroup, Middle\nfrom textual.screen import ModalScreen\nfrom textual.validation import Integer\nfrom textual.widgets import Button, Input, Label, Static\n\nfrom textual_timepiece.timeline import RuledHorizontalTimeline\nfrom textual_timepiece.timeline import HorizontalTimeline\n\n\nNUMBERS: tuple[str, ...] = [\n    \"Zero\",\n    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n    \"Ten\",\n]\n\n\ndef header_factory(index: int) -&gt; Label:\n    return Label(\n        f\"{NUMBERS[index]}\",\n        variant=\"primary\" if index % 2 == 0 else \"secondary\",\n        classes=\"header\",\n    )\n\n\nclass TimelineApp(App[None]):\n    \"\"\"Example of how horizontal timelines could be implemented.\"\"\"\n\n    DEFAULT_CSS = \"\"\"\\\n    Screen {\n        Input {\n            width: 1fr;\n        }\n        HorizontalRuler {\n            padding-left: 11;  # Compensating for header size.\n        }\n        Label.header {\n            color: auto;\n            border: hkey $secondary;\n            min-width: 11;\n            max-width: 11;\n            height: 100%;\n            text-align: center;\n            content-align: center middle;\n            text-style: bold;\n            padding: 0 2 0 2;\n        }\n    }\n    \"\"\"\n\n    layers = var[int](2, init=False)\n    \"\"\"Total amount of timelines to display.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        with HorizontalGroup(id=\"layer-controls\"):\n            yield Button.warning(\"-\", id=\"subtract\")\n            yield Input(\n                \"2\",\n                \"Total Timelines\",\n                type=\"integer\",\n                valid_empty=False,\n                validate_on=[\"changed\"],\n                validators=Integer(1, 10),\n                tooltip=(\n                    \"Total Timelines Present\\n\"\n                    \"[b]Maximum[/]: 10\\n\"\n                    \"[b]Minimum[/]: 1\"\n                ),\n            )\n            yield Button.success(\"+\", id=\"add\")\n        yield (timeline := RuledHorizontalTimeline(\n            3,\n            header_factory=header_factory,\n        ).data_bind(total=TimelineApp.layers))\n        timeline.length = 392\n\n    def _on_input_changed(self, message: Input.Changed) -&gt; None:\n        if message.input.is_valid:\n            self.layers = int(message.value)\n\n    def _on_button_pressed(self, message: Button.Pressed) -&gt; None:\n        self.layers -= 1 if message.button.id == \"subtract\" else -1\n\n    def watch_layers(self, total: int) -&gt; None:\n        self.query_one(\"#subtract\").disabled = total == 1\n        self.query_one(\"#add\").disabled = total == 10\n        with (input_widget := self.query_one(Input)).prevent(Input.Changed):\n            input_widget.value = str(total)\n\n\nif __name__ == \"__main__\":\n    TimelineApp().run()\n</code></pre>"},{"location":"reference/activity_heatmap/","title":"Activity Heatmap","text":""},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap","title":"textual_timepiece.activity_heatmap","text":"<p>Activity Heatmap graph widgets for a yearly overview.</p> CLASS DESCRIPTION <code>ActivityHeatmap</code> <p>Base renderable widget for an activity heatmap.</p> <code>HeatmapManager</code> <p>Composite widget that manages navigating a heatmap.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap","title":"ActivityHeatmap","text":"<p>               Bases: <code>ScrollView</code>, <code>BaseWidget</code></p> <p>Base renderable widget for an activity heatmap.</p> PARAMETER DESCRIPTION <code>values</code> <p>A dictionary of values for each date.</p> <p> TYPE: <code>ActivityData | None</code> DEFAULT: <code>None</code> </p> <code>year</code> <p>Year for verifying dates.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>select_on_focus</code> <p>Whether to setup a keyboard cursor on focus.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def compose(self) -&gt; ComposeResult:\n&gt;&gt;&gt;     yield ActivityHeatmap(year=2025)\n</code></pre> <pre><code>&gt;&gt;&gt; def on_mount(self) -&gt; None:\n&gt;&gt;&gt;     activity = generate_activity()\n&gt;&gt;&gt;     self.query_one(ActivityHeatmap).values = activity\n</code></pre> CLASS DESCRIPTION <code>Selected</code> <p>Base message for when something gets selected within the widget.</p> <code>DaySelected</code> <p>Message sent when a day is selected.</p> <code>WeekSelected</code> <p>Message sent when a week number is selected.</p> <code>MonthSelected</code> <p>Message sent when a month label is selected.</p> METHOD DESCRIPTION <code>action_move_cursor</code> <p>Move the keyboard cursor.</p> <code>action_clear_cursor</code> <p>Clear the navigation cursor.</p> <code>sum_week</code> <p>Get the total for a week for any specified date.</p> <code>sum_month</code> <p>Get the total for a month for any specified date.</p> <code>generate_empty_activity</code> <p>Generates empty data for a specified year.</p> ATTRIBUTE DESCRIPTION <code>ActivityData</code> <p>Final data type that the heatmap uses.</p> <p> TYPE: <code>TypeAlias</code> </p> <code>BINDINGS</code> <p>All bindings for the <code>ActivityHeatmap</code>.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>DEFAULT_CSS</code> <p>Default CSS Styling for the <code>ActivityHeatmap</code></p> <p> TYPE: <code>str</code> </p> <code>COMPONENT_CLASSES</code> <p>All component classes that the <code>ActivityHeatmap</code> uses.</p> <p> TYPE: <code>set[str]</code> </p> <code>data</code> <p>Two dimensional data that should be normalized between 0 and 1.</p> <p> </p> <code>year</code> <p>Current year for calculating dates.</p> <p> </p> <code>values</code> <p>Original pre normalized values for tooltips.</p> <p> </p> <code>mouse_offset</code> <p>Current mouse offfset for tracking the cursor.</p> <p> </p> <code>cursor</code> <p>Current hovered day, week or month.</p> <p> </p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>class ActivityHeatmap(ScrollView, BaseWidget, can_focus=True):\n    \"\"\"Base renderable widget for an activity heatmap.\n\n    Params:\n        values: A dictionary of values for each date.\n        year: Year for verifying dates.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        select_on_focus: Whether to setup a keyboard cursor on focus.\n        disabled: Whether the widget is disabled or not.\n\n    Examples:\n        &gt;&gt;&gt; def compose(self) -&gt; ComposeResult:\n        &gt;&gt;&gt;     yield ActivityHeatmap(year=2025)\n\n        &gt;&gt;&gt; def on_mount(self) -&gt; None:\n        &gt;&gt;&gt;     activity = generate_activity()\n        &gt;&gt;&gt;     self.query_one(ActivityHeatmap).values = activity\n    \"\"\"\n\n    class Selected(BaseMessage[\"ActivityHeatmap\"]):\n        \"\"\"Base message for when something gets selected within the widget.\"\"\"\n\n        def __init__(self, widget: ActivityHeatmap, date: Date) -&gt; None:\n            super().__init__(widget)\n            self.date = date\n\n        @property\n        def value(self) -&gt; Date:\n            \"\"\"Alias for `date` attribute.\"\"\"\n            return self.date\n\n    class DaySelected(Selected):\n        \"\"\"Message sent when a day is selected.\"\"\"\n\n        @property\n        def day(self) -&gt; Date:\n            \"\"\"Alias for `date` attribute.\"\"\"\n            return self.date\n\n    class WeekSelected(Selected):\n        \"\"\"Message sent when a week number is selected.\"\"\"\n\n        @property\n        def week(self) -&gt; Date:\n            \"\"\"Alias for `date` attribute.\"\"\"\n            return self.date\n\n    class MonthSelected(Selected):\n        \"\"\"Message sent when a month label is selected.\"\"\"\n\n        @property\n        def month(self) -&gt; Date:\n            \"\"\"Alias for `date` attribute.\"\"\"\n            return self.date\n\n    ActivityData: TypeAlias = defaultdict[date, float]\n    \"\"\"Final data type that the heatmap uses.\"\"\"\n\n    BORDER_TITLE = \"Activity Heatmap\"\n    BINDING_GROUP_TITLE = \"Activity Heatmap\"\n\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\n            \"right\",\n            \"move_cursor('right')\",\n            \"Move Right\",\n            tooltip=\"Move the keyboard cursor right.\",\n            show=False,\n            priority=True,\n        ),\n        Binding(\n            \"down\",\n            \"move_cursor('down')\",\n            \"Move Down\",\n            tooltip=\"Move the keyboard cursor down.\",\n            show=False,\n            priority=True,\n        ),\n        Binding(\n            \"left\",\n            \"move_cursor('left')\",\n            tooltip=\"Move the keyboard cursor left.\",\n            show=False,\n            priority=True,\n        ),\n        Binding(\n            \"up\",\n            \"move_cursor('up')\",\n            \"Move Up\",\n            tooltip=\"Move the keyboard cursor up.\",\n            show=False,\n            priority=True,\n        ),\n        Binding(\n            \"enter\",\n            \"select_tile\",\n            \"Select\",\n            tooltip=\"Select the highlighted day.\",\n            show=False,\n        ),\n        Binding(\n            \"escape\",\n            \"clear_cursor\",\n            \"Clear Cursor\",\n            tooltip=\"Clear the cursor selection.\",\n            show=False,\n        ),\n    ]\n    \"\"\"All bindings for the `ActivityHeatmap`.\n\n    | Key(s) | Description |\n    | :- | :- |\n    | right | Move Cursor Right |\n    | down | Move Cursor Down |\n    | left | Move Cursor Left |\n    | up | Move Cursor Up |\n    | enter | Select Highlighted Day |\n    | escape | Clear Any Cursor Selection. |\n    \"\"\"\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    ActivityHeatmap {\n        background: transparent;\n        height: auto;\n        .activityheatmap--empty {\n            background: transparent;\n            color: $primary;\n            text-style: bold;\n        }\n        .activityheatmap--empty-alt {\n            background: transparent;\n            color: $secondary;\n            text-style: bold;\n        }\n        .activityheatmap--color {\n            background: $panel-darken-1;\n            color: $secondary;\n        }\n        .activityheatmap--hover {\n            background: $panel-darken-1;\n            color: $accent;\n            border-bottom: white;\n        }\n    }\n    Tooltip {\n        padding: 1;\n        text-align: center;\n    }\n    \"\"\"\n    \"\"\"Default CSS Styling for the `ActivityHeatmap`\"\"\"\n\n    COMPONENT_CLASSES: ClassVar[set[str]] = {\n        \"activityheatmap--color\",\n        \"activityheatmap--empty\",\n        \"activityheatmap--empty-alt\",\n        \"activityheatmap--hover\",\n    }\n    \"\"\"All component classes that the `ActivityHeatmap` uses.\n\n    | Class | Description |\n    | :- | :- |\n    | `activityheatmap--color` | Base color of the tiles |\n    | `activityheatmap--empty` | Empty tile color for navigation. |\n    | `activityheatmap--empty-alt` | Alternative empty tile color for navigation. |\n    | `activityheatmap--hover` | Color when something is hovered. |\n    \"\"\"  # noqa: E501\n    data = reactive[list[list[float]]](list, init=False, layout=True)\n    \"\"\"Two dimensional data that should be normalized between 0 and 1.\"\"\"\n\n    year = var[int](lambda: Date.today_in_system_tz().year, init=False)\n    \"\"\"Current year for calculating dates.\"\"\"\n\n    values = var[ActivityData](lambda: defaultdict(lambda: 0), init=False)\n    \"\"\"Original pre normalized values for tooltips.\n\n    Assign data to this reactive to update values.\n    \"\"\"\n\n    mouse_offset = var[Offset](Offset, init=False)\n    \"\"\"Current mouse offfset for tracking the cursor.\"\"\"\n\n    cursor = reactive[HeatmapCursor | None](None, init=False)\n    \"\"\"Current hovered day, week or month.\"\"\"\n\n    def __init__(\n        self,\n        values: ActivityData | None = None,\n        year: int | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        *,\n        select_on_focus: bool = True,\n        disabled: bool = False,\n    ) -&gt; None:\n        super().__init__(name=name, id=id, classes=classes, disabled=disabled)\n\n        self.select_on_focus = select_on_focus\n        self.virtual_size = Size(163, 18)\n        if values:\n            self.set_reactive(ActivityHeatmap.values, values)\n        if year:\n            self.set_reactive(ActivityHeatmap.year, year)\n\n    def _get_color_strength(\n        self,\n        value: float,\n        base: Color,\n        bg: Color,\n    ) -&gt; RColor:\n        return base.blend(bg, value).rich_color\n\n    def _get_day_style(\n        self,\n        day: int,\n        week: int,\n        value: float,\n        background: Color,\n        color: Color,\n        hover_color: RStyle,\n    ) -&gt; RStyle:\n        if self._is_tile_hovered(day=day, week=week):\n            return hover_color\n\n        return RStyle(color=self._get_color_strength(value, color, background))\n\n    def _get_segment(\n        self,\n        day: int,\n        week: int,\n        background: Color,\n        color: Color,\n        hover_color: RStyle,\n        empty: RStyle,\n    ) -&gt; Segment:\n        if (value := self.data[week][day]) is not None:\n            return Segment(\n                \"\u2588\u2588\",\n                style=self._get_day_style(\n                    day, week, value, background, color, hover_color\n                ),\n            )\n        if self._is_tile_hovered(day=day, week=week):\n            return Segment(\"\u2588\u2588\", hover_color)\n\n        return Segment(\"  \")\n\n    def _render_weekday(\n        self,\n        y: int,\n        empty_bg: RStyle,\n        empty_seg: Segment,\n    ) -&gt; Strip:\n        base_color = self.get_component_rich_style(\"activityheatmap--color\")\n        empty_alt = self.get_component_rich_style(\"activityheatmap--empty-alt\")\n        hover_color = self.get_component_rich_style(\"activityheatmap--hover\")\n        day = y // 2\n\n        color, background = (\n            Color.from_rich_color(base_color.color),\n            Color.from_rich_color(base_color.bgcolor),\n        )\n        segs = [\n            Segment(day_abbr[day], empty_bg if day % 2 == 0 else empty_alt),\n            empty_seg,\n        ]\n        empty_bg = empty_bg.background_style\n        for week in range(len(self.data)):\n            segs.append(empty_seg)\n            segs.append(\n                self._get_segment(\n                    day, week, background, color, hover_color, empty_bg\n                )\n            )\n\n        return Strip(segs)\n\n    def _render_weeks(\n        self,\n        empty_background: RStyle,\n        empty_seg: Segment,\n    ) -&gt; Strip:\n        empty_alt = self.get_component_rich_style(\"activityheatmap--empty-alt\")\n        hover_color = self.get_component_rich_style(\"activityheatmap--hover\")\n\n        segments = [Segment(\" \" * 4, style=empty_seg.style)]\n        for i in range(2, 108, 2):\n            segments.append(empty_seg)\n            style = (\n                hover_color\n                if self._is_tile_hovered(week=i // 2)\n                else empty_background\n                if i % 2 != 0\n                else empty_alt\n            )\n            segments.append(Segment(str(i // 2).rjust(2), style=style))\n\n        return Strip(segments)\n\n    def _render_months(\n        self,\n        empty_background: RStyle,\n        empty_seg: Segment,\n    ) -&gt; Strip:\n        empty_alt = self.get_component_rich_style(\"activityheatmap--empty-alt\")\n        hover_color = self.get_component_rich_style(\"activityheatmap--hover\")\n        segments = [empty_seg] * 3\n        for month in range(1, 13):\n            segments.append(\n                Segment(\n                    month_abbr[month],\n                    style=hover_color\n                    if self._is_tile_hovered(month=month)\n                    else empty_background\n                    if month % 2 != 0\n                    else empty_alt,\n                )\n            )\n            segments.append(Segment(\" \" * 10, style=empty_background))\n        return Strip(segments)\n\n    def render_line(self, y: int) -&gt; Strip:\n        empty_background = self.get_component_rich_style(\n            \"activityheatmap--empty\"\n        )\n        empty_seg = Segment(\" \", style=empty_background)\n\n        scroll_x, scroll_y = self.scroll_offset\n        y += scroll_y\n\n        if y == 15:\n            strip = self._render_weeks(empty_background, empty_seg)\n        elif y == 17:\n            strip = self._render_months(empty_background, empty_seg)\n        elif y % 2 == 0 or not self.data or (len(self.data[0]) * 2) &lt; y - 2:\n            strip = Strip.blank(self.size.width)\n        else:\n            strip = self._render_weekday(y, empty_background, empty_seg)\n\n        return strip.crop(scroll_x, scroll_x + self.size.width)\n\n    def _watch_values(self, new: ActivityData) -&gt; None:\n        self._process_data(new, self.year)\n\n    @work(name=\"heatmap\", thread=True, exclusive=True)\n    def _process_data(self, data: ActivityData, year: int) -&gt; None:\n        \"\"\"Entrypoint worker for the heatmap data.\n\n        Normalizes &amp; inverts the data into usable values.\n\n        Args:\n            data: Two dimensional data that is ready to be converted.\n            year: The year the provided data belongs to.\n        \"\"\"\n        template = ActivityHeatmap.generate_empty_activity(year)\n        values = [\n            [data[day] if day else None for day in week] for week in template\n        ]\n        flat: list[float | None] = list(chain.from_iterable(values))\n        normalized = [\n            1 - v if v is not None else None for v in normalize_values(flat)\n        ]\n        self.app.call_from_thread(\n            setattr, self, \"data\", flat_to_shape(normalized, values)\n        )\n\n    def _on_focus(self, event: Focus) -&gt; None:\n        self.action_move_cursor(\"right\")\n\n    def _on_leave(self, event: Leave) -&gt; None:\n        if not self.has_focus:\n            self.cursor = None\n\n    def _on_blur(self, event: Blur) -&gt; None:\n        self.cursor = None\n\n    def _on_mouse_move(self, event: MouseMove) -&gt; None:\n        self.mouse_offset = event.offset + self.scroll_offset\n\n    def _validate_date(self, day: Date) -&gt; Date:\n        return Date(day.year, 1, 1)\n\n    def _watch_time_range(self) -&gt; None:\n        self.virtual_size = Size(110, 18)\n\n    def _watch_cursor(self, cursor: HeatmapCursor | None) -&gt; None:\n        if cursor is None:\n            return\n\n        x = ((cursor.week - 1) * 3) + 4\n        if not (\n            self.scroll_offset.x &lt; x &lt; self.scroll_offset.x + self.size.width\n        ):\n            self.scroll_to(x=x)\n\n        y = ((cursor.day - 1) * 2) + 1\n        if not (\n            self.scroll_offset.y &lt; y &lt; self.scroll_offset.y + self.size.height\n        ):\n            self.scroll_to(y=y)\n\n    @on(Click)\n    def _action_select_tile(self) -&gt; None:\n        if (day := self._date_lookup()) is not None:\n            self.post_message(self.DaySelected(self, day))\n        elif (week := self._week_lookup()) is not None:\n            self.post_message(self.WeekSelected(self, week))\n        elif (month := self._month_lookup()) is not None:\n            self.post_message(self.MonthSelected(self, month))\n\n        self.cursor = None\n\n    def _watch_mouse_offset(self, new: Offset) -&gt; None:\n        self.cursor = (\n            self._get_cursor_tile(new)\n            or self._get_cursor_week(new)\n            or self._get_cursor_month(new)\n        )\n\n    def _is_tile_hovered(\n        self,\n        *,\n        day: int | None = None,\n        week: int | None = None,\n        month: int | None = None,\n    ) -&gt; bool:\n        if self.cursor is None:\n            return False\n\n        if week is not None and self.cursor.is_week:\n            if day is not None:\n                week += 1\n            return week == self.cursor.week\n\n        if self.cursor.is_month:\n            if month is not None:\n                return month == self.cursor.month\n            if day is not None and week is not None:\n                year = self.year\n                if week == 52:\n                    week = 0\n                    year += 1\n                try:\n                    cal = date.fromisocalendar(year, week + 1, day + 1)\n                except ValueError:\n                    return False\n                return cal.month == self.cursor.month and cal.year == self.year\n\n        if day is None or week is None:\n            return False\n\n        return day + 1 == self.cursor.day and week + 1 == self.cursor.week\n\n    def _is_offset_on_tile(self, offset: Offset) -&gt; bool:\n        return bool(\n            4 &lt;= offset.x &lt;= 165\n            and 1 &lt;= offset.y &lt;= 14\n            and ((offset.x - 4) % 3 != 0)\n            and offset.y % 2 != 0\n        )\n\n    def action_move_cursor(self, direction: Directions) -&gt; None:\n        \"\"\"Move the keyboard cursor.\"\"\"\n        if self.cursor is None:\n            self.cursor = HeatmapCursor(1, 1)\n\n        elif direction == \"right\":\n            self.cursor = self.cursor.move(self.year, week_delta=1)\n        elif direction == \"down\":\n            self.cursor = self.cursor.move(self.year, day_delta=1)\n        elif direction == \"left\":\n            self.cursor = self.cursor.move(self.year, week_delta=-1)\n        elif direction == \"up\":\n            self.cursor = self.cursor.move(self.year, day_delta=-1)\n\n    def action_clear_cursor(self) -&gt; None:\n        \"\"\"Clear the navigation cursor.\"\"\"\n        self.cursor = None\n\n    def check_action(\n        self,\n        action: str,\n        parameters: tuple[object, ...],\n    ) -&gt; bool | None:\n        if action == \"move_cursor\" and self.cursor:\n            if parameters[0] == \"right\":\n                return self.cursor.week &lt; 53\n            if parameters[0] == \"down\":\n                return self.cursor.day &lt; 9\n            if parameters[0] == \"left\":\n                return self.cursor.week &gt; 1\n            return self.cursor.day &gt; 1\n\n        if action == \"clear_cursor\":\n            return isinstance(self.cursor, HeatmapCursor)\n\n        return True\n\n    def get_content_width(self, container: Size, viewport: Size) -&gt; int:\n        return 163\n\n    def get_content_height(\n        self,\n        container: Size,\n        viewport: Size,\n        width: int,\n    ) -&gt; int:\n        return 18\n\n    def _get_cursor_tile(self, offset: Offset) -&gt; HeatmapCursor | None:\n        if self._is_offset_on_tile(offset):\n            return HeatmapCursor(\n                ((offset.x - 4) // 3) + 1,\n                ((offset.y - 1) // 2) + 1,\n            )\n\n        return None\n\n    def _get_cursor_week(self, offset: Offset) -&gt; HeatmapCursor | None:\n        if offset.y == 15 and 5 &lt;= offset.x &lt;= 165 and offset.x - 2 % 3 != 0:\n            return HeatmapCursor(((offset.x - 4) // 3) + 1, 8)\n\n        return None\n\n    def _get_cursor_month(self, offset: Offset) -&gt; HeatmapCursor | None:\n        if month := self._is_offset_on_month(offset):\n            return HeatmapCursor(((offset.x - 4) // 3) + 1, 9, month)\n\n        return None\n\n    def _is_offset_on_month(self, offset: Offset) -&gt; int:\n        if offset.y != 17 or not (3 &lt;= offset.x &lt;= 148):\n            return 0\n\n        month, rem = divmod(offset.x - 2, 13)\n\n        if rem not in {0, 1, 2}:\n            return 0\n\n        return month + 1\n\n    def _date_lookup(self) -&gt; Date | None:\n        if (\n            self.cursor is not None\n            and self.cursor.is_day\n            and (day := self.cursor.to_date(self.year)) is not None\n            and day.year == self.year\n        ):\n            return day\n\n        return None\n\n    def _week_lookup(self) -&gt; Date | None:\n        if self.cursor is not None and self.cursor.is_week:\n            return self.cursor.to_date(self.year)\n\n        return None\n\n    def _month_lookup(self) -&gt; Date | None:\n        if self.cursor is not None and self.cursor.is_month:\n            return self.cursor.to_date(self.year)\n\n        return None\n\n    def sum_week(self, week: Date) -&gt; float:\n        \"\"\"Get the total for a week for any specified date.\"\"\"\n        return sum(\n            self.values[day.py_date()]\n            for day in iterate_timespan(week, days(1), 7)\n        )\n\n    def sum_month(self, month: Date) -&gt; float:\n        \"\"\"Get the total for a month for any specified date.\"\"\"\n        return sum(\n            self.values[day.py_date()]\n            for day in iterate_timespan(\n                month,\n                days(1),\n                monthrange(month.year, month.month)[1],\n            )\n        )\n\n    @staticmethod\n    def generate_empty_activity(year: int) -&gt; list[list[date | None]]:\n        \"\"\"Generates empty data for a specified year.\n\n        Args:\n            year: Year to generate. Minimum year 1 to a maximum year 9998.\n\n        Returns:\n            A 2 dimensional array of dates or None if the day belongs to\n                another year.\n        \"\"\"\n        raw = list(\n            chain.from_iterable(Calendar().yeardatescalendar(year, 12)[0])\n        )\n        new_cal: list[list[date | None]] = []\n        for i, week in enumerate(raw):\n            if i and week[0] in new_cal[-1]:\n                continue\n\n            new_cal.append([])\n            for day in week:\n                if day.year != year:\n                    new_cal[-1].append(None)\n                else:\n                    new_cal[-1].append(day)\n\n        return new_cal\n\n    @property  # type: ignore[misc]  # NOTE: Tooltip is generated inside.\n    def tooltip(self) -&gt; str | None:  # type: ignore[override]\n        if (tip_date := self._date_lookup()) is not None:\n            total = int(self.values[tip_date.py_date()])\n            tooltip = f\"{tip_date.py_date():%-d %B}\\n\"\n            return tooltip + format_seconds(total, include_seconds=False)\n\n        if (tip_week := self._week_lookup()) is not None:\n            total = int(self.sum_week(tip_week))\n            tooltip = f\"{tip_week.py_date():%U week of %Y}\\n\"\n            return tooltip + format_seconds(total, include_seconds=False)\n\n        if (tip_month := self._month_lookup()) is not None:\n            total = int(self.sum_month(tip_month))\n            tooltip = f\"{tip_month.py_date():%B %Y}\\n\"\n            return tooltip + format_seconds(total, include_seconds=False)\n\n        return None\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.ActivityData","title":"ActivityData  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ActivityData: TypeAlias = defaultdict[date, float]\n</code></pre> <p>Final data type that the heatmap uses.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"right\",\n        \"move_cursor('right')\",\n        \"Move Right\",\n        tooltip=\"Move the keyboard cursor right.\",\n        show=False,\n        priority=True,\n    ),\n    Binding(\n        \"down\",\n        \"move_cursor('down')\",\n        \"Move Down\",\n        tooltip=\"Move the keyboard cursor down.\",\n        show=False,\n        priority=True,\n    ),\n    Binding(\n        \"left\",\n        \"move_cursor('left')\",\n        tooltip=\"Move the keyboard cursor left.\",\n        show=False,\n        priority=True,\n    ),\n    Binding(\n        \"up\",\n        \"move_cursor('up')\",\n        \"Move Up\",\n        tooltip=\"Move the keyboard cursor up.\",\n        show=False,\n        priority=True,\n    ),\n    Binding(\n        \"enter\",\n        \"select_tile\",\n        \"Select\",\n        tooltip=\"Select the highlighted day.\",\n        show=False,\n    ),\n    Binding(\n        \"escape\",\n        \"clear_cursor\",\n        \"Clear Cursor\",\n        tooltip=\"Clear the cursor selection.\",\n        show=False,\n    ),\n]\n</code></pre> <p>All bindings for the <code>ActivityHeatmap</code>.</p> Key(s) Description right Move Cursor Right down Move Cursor Down left Move Cursor Left up Move Cursor Up enter Select Highlighted Day escape Clear Any Cursor Selection."},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>ActivityHeatmap {\n    background: transparent;\n    height: auto;\n    .activityheatmap--empty {\n        background: transparent;\n        color: $primary;\n        text-style: bold;\n    }\n    .activityheatmap--empty-alt {\n        background: transparent;\n        color: $secondary;\n        text-style: bold;\n    }\n    .activityheatmap--color {\n        background: $panel-darken-1;\n        color: $secondary;\n    }\n    .activityheatmap--hover {\n        background: $panel-darken-1;\n        color: $accent;\n        border-bottom: white;\n    }\n}\nTooltip {\n    padding: 1;\n    text-align: center;\n}\n</code></pre> <p>Default CSS Styling for the <code>ActivityHeatmap</code></p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.COMPONENT_CLASSES","title":"COMPONENT_CLASSES  <code>class-attribute</code>","text":"<pre><code>COMPONENT_CLASSES: set[str] = {\n    \"activityheatmap--color\",\n    \"activityheatmap--empty\",\n    \"activityheatmap--empty-alt\",\n    \"activityheatmap--hover\",\n}\n</code></pre> <p>All component classes that the <code>ActivityHeatmap</code> uses.</p> Class Description <code>activityheatmap--color</code> Base color of the tiles <code>activityheatmap--empty</code> Empty tile color for navigation. <code>activityheatmap--empty-alt</code> Alternative empty tile color for navigation. <code>activityheatmap--hover</code> Color when something is hovered."},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.data","title":"data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>data = reactive[list[list[float]]](list, init=False, layout=True)\n</code></pre> <p>Two dimensional data that should be normalized between 0 and 1.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.year","title":"year  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>year = var[int](lambda: year, init=False)\n</code></pre> <p>Current year for calculating dates.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.values","title":"values  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>values = var[ActivityData](lambda: defaultdict(lambda: 0), init=False)\n</code></pre> <p>Original pre normalized values for tooltips.</p> <p>Assign data to this reactive to update values.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.mouse_offset","title":"mouse_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mouse_offset = var[Offset](Offset, init=False)\n</code></pre> <p>Current mouse offfset for tracking the cursor.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.cursor","title":"cursor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cursor = reactive[HeatmapCursor | None](None, init=False)\n</code></pre> <p>Current hovered day, week or month.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.Selected","title":"Selected","text":"<p>               Bases: <code>BaseMessage['ActivityHeatmap']</code></p> <p>Base message for when something gets selected within the widget.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Alias for <code>date</code> attribute.</p> <p> TYPE: <code>Date</code> </p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>class Selected(BaseMessage[\"ActivityHeatmap\"]):\n    \"\"\"Base message for when something gets selected within the widget.\"\"\"\n\n    def __init__(self, widget: ActivityHeatmap, date: Date) -&gt; None:\n        super().__init__(widget)\n        self.date = date\n\n    @property\n    def value(self) -&gt; Date:\n        \"\"\"Alias for `date` attribute.\"\"\"\n        return self.date\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.Selected.value","title":"value  <code>property</code>","text":"<pre><code>value: Date\n</code></pre> <p>Alias for <code>date</code> attribute.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.DaySelected","title":"DaySelected","text":"<p>               Bases: <code>Selected</code></p> <p>Message sent when a day is selected.</p> ATTRIBUTE DESCRIPTION <code>day</code> <p>Alias for <code>date</code> attribute.</p> <p> TYPE: <code>Date</code> </p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>class DaySelected(Selected):\n    \"\"\"Message sent when a day is selected.\"\"\"\n\n    @property\n    def day(self) -&gt; Date:\n        \"\"\"Alias for `date` attribute.\"\"\"\n        return self.date\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.DaySelected.day","title":"day  <code>property</code>","text":"<pre><code>day: Date\n</code></pre> <p>Alias for <code>date</code> attribute.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.WeekSelected","title":"WeekSelected","text":"<p>               Bases: <code>Selected</code></p> <p>Message sent when a week number is selected.</p> ATTRIBUTE DESCRIPTION <code>week</code> <p>Alias for <code>date</code> attribute.</p> <p> TYPE: <code>Date</code> </p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>class WeekSelected(Selected):\n    \"\"\"Message sent when a week number is selected.\"\"\"\n\n    @property\n    def week(self) -&gt; Date:\n        \"\"\"Alias for `date` attribute.\"\"\"\n        return self.date\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.WeekSelected.week","title":"week  <code>property</code>","text":"<pre><code>week: Date\n</code></pre> <p>Alias for <code>date</code> attribute.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.MonthSelected","title":"MonthSelected","text":"<p>               Bases: <code>Selected</code></p> <p>Message sent when a month label is selected.</p> ATTRIBUTE DESCRIPTION <code>month</code> <p>Alias for <code>date</code> attribute.</p> <p> TYPE: <code>Date</code> </p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>class MonthSelected(Selected):\n    \"\"\"Message sent when a month label is selected.\"\"\"\n\n    @property\n    def month(self) -&gt; Date:\n        \"\"\"Alias for `date` attribute.\"\"\"\n        return self.date\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.MonthSelected.month","title":"month  <code>property</code>","text":"<pre><code>month: Date\n</code></pre> <p>Alias for <code>date</code> attribute.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.action_move_cursor","title":"action_move_cursor","text":"<pre><code>action_move_cursor(direction: Directions) -&gt; None\n</code></pre> <p>Move the keyboard cursor.</p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>def action_move_cursor(self, direction: Directions) -&gt; None:\n    \"\"\"Move the keyboard cursor.\"\"\"\n    if self.cursor is None:\n        self.cursor = HeatmapCursor(1, 1)\n\n    elif direction == \"right\":\n        self.cursor = self.cursor.move(self.year, week_delta=1)\n    elif direction == \"down\":\n        self.cursor = self.cursor.move(self.year, day_delta=1)\n    elif direction == \"left\":\n        self.cursor = self.cursor.move(self.year, week_delta=-1)\n    elif direction == \"up\":\n        self.cursor = self.cursor.move(self.year, day_delta=-1)\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.action_clear_cursor","title":"action_clear_cursor","text":"<pre><code>action_clear_cursor() -&gt; None\n</code></pre> <p>Clear the navigation cursor.</p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>def action_clear_cursor(self) -&gt; None:\n    \"\"\"Clear the navigation cursor.\"\"\"\n    self.cursor = None\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.sum_week","title":"sum_week","text":"<pre><code>sum_week(week: Date) -&gt; float\n</code></pre> <p>Get the total for a week for any specified date.</p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>def sum_week(self, week: Date) -&gt; float:\n    \"\"\"Get the total for a week for any specified date.\"\"\"\n    return sum(\n        self.values[day.py_date()]\n        for day in iterate_timespan(week, days(1), 7)\n    )\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.sum_month","title":"sum_month","text":"<pre><code>sum_month(month: Date) -&gt; float\n</code></pre> <p>Get the total for a month for any specified date.</p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>def sum_month(self, month: Date) -&gt; float:\n    \"\"\"Get the total for a month for any specified date.\"\"\"\n    return sum(\n        self.values[day.py_date()]\n        for day in iterate_timespan(\n            month,\n            days(1),\n            monthrange(month.year, month.month)[1],\n        )\n    )\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.ActivityHeatmap.generate_empty_activity","title":"generate_empty_activity  <code>staticmethod</code>","text":"<pre><code>generate_empty_activity(year: int) -&gt; list[list[date | None]]\n</code></pre> <p>Generates empty data for a specified year.</p> PARAMETER DESCRIPTION <code>year</code> <p>Year to generate. Minimum year 1 to a maximum year 9998.</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>list[list[date | None]]</code> <p>A 2 dimensional array of dates or None if the day belongs to another year.</p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>@staticmethod\ndef generate_empty_activity(year: int) -&gt; list[list[date | None]]:\n    \"\"\"Generates empty data for a specified year.\n\n    Args:\n        year: Year to generate. Minimum year 1 to a maximum year 9998.\n\n    Returns:\n        A 2 dimensional array of dates or None if the day belongs to\n            another year.\n    \"\"\"\n    raw = list(\n        chain.from_iterable(Calendar().yeardatescalendar(year, 12)[0])\n    )\n    new_cal: list[list[date | None]] = []\n    for i, week in enumerate(raw):\n        if i and week[0] in new_cal[-1]:\n            continue\n\n        new_cal.append([])\n        for day in week:\n            if day.year != year:\n                new_cal[-1].append(None)\n            else:\n                new_cal[-1].append(day)\n\n    return new_cal\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.HeatmapManager","title":"HeatmapManager","text":"<p>               Bases: <code>BaseWidget</code></p> <p>Composite widget that manages navigating a heatmap.</p> PARAMETER DESCRIPTION <code>year</code> <p>Initial value for the year.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> CLASS DESCRIPTION <code>YearChanged</code> <p>Message sent when the year is updated.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p>Default CSS for the <code>HeatmapManager</code>.</p> <p> TYPE: <code>str</code> </p> <code>year</code> <p>Current year that the widget is set to. Max is 9999 and minimum 1</p> <p> </p> <code>navigation</code> <p><code>Horizonal</code> bar holding all navigation widgets.</p> <p> TYPE: <code>Horizontal</code> </p> <code>year_input</code> <p>Input widget showing the selected year.</p> <p> TYPE: <code>MaskedInput</code> </p> <code>heatmap</code> <p>Underlying <code>ActivityHeatmap</code> displaying data.</p> <p> TYPE: <code>ActivityHeatmap</code> </p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>class HeatmapManager(BaseWidget):\n    \"\"\"Composite widget that manages navigating a heatmap.\n\n    Params:\n        year: Initial value for the year.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n    \"\"\"\n\n    class YearChanged(BaseMessage[\"HeatmapManager\"]):\n        \"\"\"Message sent when the year is updated.\"\"\"\n\n        def __init__(self, widget: HeatmapManager, year: int) -&gt; None:\n            super().__init__(widget)\n            self.year = year\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    HeatmapManager {\n        layout: vertical;\n        align: center middle;\n        height: auto;\n        width: auto;\n\n        Horizontal#navigation {\n            align-horizontal: center;\n            max-height: 1;\n            hatch: vertical $secondary 10%;\n\n            &amp; &gt; #year-input {\n                align-horizontal: center;\n                width: auto;\n                min-width: 8;\n                height: 1;\n                border: none;\n            }\n\n            &amp; &gt; .nav {\n                border: none;\n                &amp;Button {\n                    max-width: 4;\n                    text-align: center;\n\n                    &amp;#today-button {\n                        width: auto;\n                    }\n                }\n            }\n        }\n\n        &amp;:focus-within {\n            Horizontal#navigation {\n                hatch: vertical $primary 30%;\n            }\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for the `HeatmapManager`.\"\"\"\n\n    year = var[int](\n        lambda: Date.today_in_system_tz().year, init=False, bindings=True\n    )\n    \"\"\"Current year that the widget is set to. Max is 9999 and minimum 1\"\"\"\n\n    def __init__(\n        self,\n        year: int | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        disabled: bool = False,\n    ) -&gt; None:\n        super().__init__(name=name, id=id, classes=classes, disabled=disabled)\n        if year:\n            self.set_reactive(HeatmapManager.year, year)\n\n    def _validate_year(self, year: int) -&gt; int:\n        return max(1, min(year, 9999))\n\n    def compose(self) -&gt; ComposeResult:\n        with Horizontal(id=\"navigation\"):\n            yield Button(\n                \"&lt;&lt;\",\n                id=\"prev-year-5\",\n                classes=\"nav\",\n                tooltip=\"Jump Back Five Years\",\n            )\n            yield Button(\n                \"&lt;\",\n                id=\"prev-year\",\n                classes=\"nav\",\n                tooltip=\"View Previous Year\",\n            )\n            yield MaskedInput(\n                \"9999\",\n                str(self.year),\n                classes=\"nav\",\n                valid_empty=False,\n                validators=[Integer(minimum=1, maximum=9998)],\n                validate_on=(\"blur\", \"submitted\"),\n                id=\"year-input\",\n            )\n            yield TargetButton(\n                id=\"today-button\",\n                classes=\"nav\",\n                tooltip=\"View Current Year\",\n                disabled=True,\n            )\n            yield Button(\n                \"&gt;\",\n                id=\"next-year\",\n                classes=\"nav\",\n                tooltip=\"View Next Year\",\n            )\n            yield Button(\n                \"&gt;&gt;\",\n                id=\"next-year-5\",\n                classes=\"nav\",\n                tooltip=\"Jump Forward Five Years\",\n            )\n\n        with Horizontal():\n            yield Center(ActivityHeatmap().data_bind(HeatmapManager.year))\n\n    def _watch_year(self, year: int) -&gt; None:\n        for button in self.navigation.query(Button):\n            if button.id in {\"prev-year-5\", \"prev-year\"}:\n                button.disabled = year &lt;= 1\n            elif button.id in {\"next-year\", \"next-year-5\"}:\n                button.disabled = year &gt;= 9998\n            elif button.id == \"today-button\":\n                button.disabled = year == Date.today_in_system_tz().year\n        self.post_message(self.YearChanged(self, year))\n\n    def _on_descendant_focus(self) -&gt; None:\n        self.navigation.refresh()\n\n    def _on_descendant_blur(self) -&gt; None:\n        self.navigation.refresh()\n\n    @on(Input.Submitted)\n    @on(DescendantBlur)\n    def _verify_year(self, message: Input.Submitted | DescendantBlur) -&gt; None:\n        message.stop()\n        if not isinstance(message.control, Input):\n            return\n\n        if message.control.is_valid:\n            try:\n                self.year = int(message.control.value)\n            except ValueError:\n                return\n\n    def _on_button_pressed(self, message: Button.Pressed) -&gt; None:\n        message.stop()\n        if message.button.id == \"prev-year-5\":\n            self.year -= 5\n        elif message.button.id == \"prev-year\":\n            self.year -= 1\n        elif message.button.id == \"next-year\":\n            self.year += 1\n        elif message.button.id == \"next-year-5\":\n            self.year += 5\n        elif message.button.id == \"today-button\":\n            self.year = Date.today_in_system_tz().year\n\n        with self.year_input.prevent(Input.Changed):\n            self.year_input.value = str(self.year)\n\n    @cached_property\n    def navigation(self) -&gt; Horizontal:\n        \"\"\"`Horizonal` bar holding all navigation widgets.\"\"\"\n        return self.query_one(\"#navigation\", Horizontal)\n\n    @cached_property\n    def year_input(self) -&gt; MaskedInput:\n        \"\"\"Input widget showing the selected year.\"\"\"\n        return self.query_exactly_one(MaskedInput)\n\n    @cached_property\n    def heatmap(self) -&gt; ActivityHeatmap:\n        \"\"\"Underlying `ActivityHeatmap` displaying data.\"\"\"\n        return self.query_exactly_one(ActivityHeatmap)\n</code></pre>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.HeatmapManager.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>HeatmapManager {\n    layout: vertical;\n    align: center middle;\n    height: auto;\n    width: auto;\n\n    Horizontal#navigation {\n        align-horizontal: center;\n        max-height: 1;\n        hatch: vertical $secondary 10%;\n\n        &amp; &gt; #year-input {\n            align-horizontal: center;\n            width: auto;\n            min-width: 8;\n            height: 1;\n            border: none;\n        }\n\n        &amp; &gt; .nav {\n            border: none;\n            &amp;Button {\n                max-width: 4;\n                text-align: center;\n\n                &amp;#today-button {\n                    width: auto;\n                }\n            }\n        }\n    }\n\n    &amp;:focus-within {\n        Horizontal#navigation {\n            hatch: vertical $primary 30%;\n        }\n    }\n}\n</code></pre> <p>Default CSS for the <code>HeatmapManager</code>.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.HeatmapManager.year","title":"year  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>year = var[int](lambda: year, init=False, bindings=True)\n</code></pre> <p>Current year that the widget is set to. Max is 9999 and minimum 1</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.HeatmapManager.navigation","title":"navigation  <code>cached</code> <code>property</code>","text":"<pre><code>navigation: Horizontal\n</code></pre> <p><code>Horizonal</code> bar holding all navigation widgets.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.HeatmapManager.year_input","title":"year_input  <code>cached</code> <code>property</code>","text":"<pre><code>year_input: MaskedInput\n</code></pre> <p>Input widget showing the selected year.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.HeatmapManager.heatmap","title":"heatmap  <code>cached</code> <code>property</code>","text":"<pre><code>heatmap: ActivityHeatmap\n</code></pre> <p>Underlying <code>ActivityHeatmap</code> displaying data.</p>"},{"location":"reference/activity_heatmap/#textual_timepiece.activity_heatmap.HeatmapManager.YearChanged","title":"YearChanged","text":"<p>               Bases: <code>BaseMessage['HeatmapManager']</code></p> <p>Message sent when the year is updated.</p> Source code in <code>src/textual_timepiece/_activity_heatmap.py</code> <pre><code>class YearChanged(BaseMessage[\"HeatmapManager\"]):\n    \"\"\"Message sent when the year is updated.\"\"\"\n\n    def __init__(self, widget: HeatmapManager, year: int) -&gt; None:\n        super().__init__(widget)\n        self.year = year\n</code></pre>"},{"location":"reference/constants/","title":"Constants","text":""},{"location":"reference/constants/#textual_timepiece.constants","title":"textual_timepiece.constants","text":"<p>Constants that the widgets use. Mostly different unicode symbols.</p> <p>Exposed as a public module in order to allow the user patch before importing one of the widgets or setting them through environment variables.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import textual_timepiece.constants\n&gt;&gt;&gt; textual_timepiece.constants.LEFT_ARROW = \"L\"\n&gt;&gt;&gt; textual_timepiece.constants.RIGHT_ARROW = \"R\"\n&gt;&gt;&gt; from textual_timepiece.pickers import DatePicker\n</code></pre> ATTRIBUTE DESCRIPTION <code>LEFT_ARROW</code> <p>Left pointing symbol for navigational purposes. Mostly going back in time.</p> <p> TYPE: <code>str</code> </p> <code>RIGHT_ARROW</code> <p>Right pointing symbol for navigational purposes. Mostly going forward in</p> <p> TYPE: <code>str</code> </p> <code>TARGET_ICON</code> <p>Used as the default target icon. Mostly when going to the current</p> <p> TYPE: <code>str</code> </p> <code>LOCKED_ICON</code> <p>Icon that is rendered when a widget is locked.</p> <p> TYPE: <code>str</code> </p> <code>UNLOCKED_ICON</code> <p>Icon that is rendered when a widget is unlocked.</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/constants/#textual_timepiece.constants.LEFT_ARROW","title":"LEFT_ARROW  <code>module-attribute</code>","text":"<pre><code>LEFT_ARROW: str = get('TTIME_ICON_LEFT_ARROW', '\u2190')\n</code></pre> <p>Left pointing symbol for navigational purposes. Mostly going back in time.</p>"},{"location":"reference/constants/#textual_timepiece.constants.RIGHT_ARROW","title":"RIGHT_ARROW  <code>module-attribute</code>","text":"<pre><code>RIGHT_ARROW: str = get('TTIME_ICON_RIGHT_ARROW', '\u2192')\n</code></pre> <p>Right pointing symbol for navigational purposes. Mostly going forward in time.</p>"},{"location":"reference/constants/#textual_timepiece.constants.TARGET_ICON","title":"TARGET_ICON  <code>module-attribute</code>","text":"<pre><code>TARGET_ICON: str = get('TTIME_ICON_TARGET', '\u25ce')\n</code></pre> <p>Used as the default target icon. Mostly when going to the current date and/or time.</p>"},{"location":"reference/constants/#textual_timepiece.constants.LOCKED_ICON","title":"LOCKED_ICON  <code>module-attribute</code>","text":"<pre><code>LOCKED_ICON: str = get('TTIME_ICON_LOCKED', '\ud83d\udd12')\n</code></pre> <p>Icon that is rendered when a widget is locked.</p>"},{"location":"reference/constants/#textual_timepiece.constants.UNLOCKED_ICON","title":"UNLOCKED_ICON  <code>module-attribute</code>","text":"<pre><code>UNLOCKED_ICON: str = get('TTIME_ICON_UNLOCKED', '\ud83d\udd13')\n</code></pre> <p>Icon that is rendered when a widget is unlocked.</p>"},{"location":"reference/input/","title":"Input","text":"<p>Note</p> <p>All of the custom Input widgets have their Changed, Submitted and Blurred messages disabled by default.</p> <p>Info</p> <p>All inputs have an <code>AbstractInput.action_adjust_time</code> action which allows the user to adjust the value depending on the keyboard cursor location. This spinbox functionality can be accessed through clicking then dragging up/down, mouse wheel usage and up/down arrows. </p>"},{"location":"reference/input/#textual_timepiece.pickers.DateInput","title":"textual_timepiece.pickers.DateInput","text":"<p>               Bases: <code>AbstractInput[Date]</code></p> <p>Date picker for full dates.</p> PARAMETER DESCRIPTION <code>day</code> <p>Initial value to set.</p> <p> TYPE: <code>Date | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>Unique dom identifier value.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>Any dom classes to add.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>tooltip</code> <p>Tooltip to show when hovering the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>'YYYY-MM-DD Format.'</code> </p> <code>disabled</code> <p>Whether to disable the widget.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>select_on_focus</code> <p>Whether to place the cursor on focus.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>spinbox_sensitivity</code> <p>Sensitivity setting for spinbox functionality.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> CLASS DESCRIPTION <code>Updated</code> <p>Message sent when the date is updated.</p> METHOD DESCRIPTION <code>action_adjust_time</code> <p>Adjust date with an offset depending on the text cursor position.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for an <code>AbstractInput</code>.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>date</code> <p>Date that is set. Bound if using within a picker.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>class DateInput(AbstractInput[Date]):\n    \"\"\"Date picker for full dates.\n\n    Params:\n        day: Initial value to set.\n        name: Name of the widget.\n        id: Unique dom identifier value.\n        classes: Any dom classes to add.\n        tooltip: Tooltip to show when hovering the widget.\n        disabled: Whether to disable the widget.\n        select_on_focus: Whether to place the cursor on focus.\n        spinbox_sensitivity: Sensitivity setting for spinbox functionality.\n    \"\"\"\n\n    class Updated(BaseMessage[\"DateInput\"]):\n        \"\"\"Message sent when the date is updated.\"\"\"\n\n        def __init__(self, widget: DateInput, date: Date | None) -&gt; None:\n            super().__init__(widget)\n            self.date = date\n\n        @property\n        def value(self) -&gt; Date | None:\n            \"\"\"Alias for `date`.\"\"\"\n            return self.date\n\n    PATTERN: ClassVar[str] = \"0009-B9-99\"\n    DATE_FORMAT: ClassVar[str] = \"%Y-%m-%d\"\n    ALIAS = \"date\"\n    date = var[Date | None](None, init=False)\n    \"\"\"Date that is set. Bound if using within a picker.\"\"\"\n\n    def __init__(\n        self,\n        day: Date | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        tooltip: str | None = \"YYYY-MM-DD Format.\",\n        *,\n        disabled: bool = False,\n        select_on_focus: bool = True,\n        spinbox_sensitivity: int = 1,\n    ) -&gt; None:\n        super().__init__(\n            value=day,\n            name=name,\n            id=id,\n            classes=classes,\n            disabled=disabled,\n            tooltip=tooltip,\n            select_on_focus=select_on_focus,\n            spinbox_sensitivity=spinbox_sensitivity,\n        )\n\n    def watch_date(self, new: Date | None) -&gt; None:\n        # FIX: probably should prevent date changes\n        with self.prevent(Input.Changed):\n            self.value = (\n                new.py_date().strftime(self.DATE_FORMAT) if new else \"\"\n            )\n        self.post_message(self.Updated(self, new))\n\n    def _watch_value(self, value: str) -&gt; None:\n        if date := self.convert():\n            self.date = date\n\n    def action_adjust_time(self, offset: int) -&gt; None:\n        \"\"\"Adjust date with an offset depending on the text cursor position.\"\"\"\n        try:\n            if self.date is None:\n                self.date = Date.today_in_system_tz()\n            elif self._is_year_pos():\n                self.date = self.date.add(years=offset)\n            elif self._is_month_pos():\n                self.date = self.date.add(months=offset)\n            else:\n                self.date = self.date.add(days=offset)\n        except ValueError as err:\n            self.log.debug(err)\n            if not str(err).endswith(\"out of range\"):\n                raise\n\n    def _is_year_pos(self) -&gt; bool:\n        return self.cursor_position &lt; 4\n\n    def _is_month_pos(self) -&gt; bool:\n        return 5 &lt;= self.cursor_position &lt; 7\n\n    def _is_day_pos(self) -&gt; bool:\n        return self.cursor_position &gt;= 8\n\n    def convert(self) -&gt; Date | None:\n        # NOTE: Pydate instead as I want to keep it open to standard formats.\n        try:\n            return Date.from_py_date(\n                datetime.strptime(self.value, self.DATE_FORMAT).date()\n            )\n        except ValueError:\n            return None\n\n    def insert_text_at_cursor(self, text: str) -&gt; None:\n        if not text.isdigit():\n            return\n\n        # Extra Date Filtering\n        if self.cursor_position == 6 and text not in \"012\":\n            return\n\n        if self.cursor_position == 5 and text not in \"0123\":\n            return\n\n        if (\n            self.cursor_position == 6\n            and self.value[5] == \"3\"\n            and text not in \"01\"\n        ):\n            return\n\n        super().insert_text_at_cursor(text)\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DateInput.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>AbstractInput {\n       background: transparent;\n       width: auto;\n       border: none;\n   }\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DateInput.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\"escape\", \"leave\", \"Defocus\", tooltip=\"Defocus the input.\"),\n    Binding(\n        \"up\",\n        \"adjust_time(1)\",\n        \"Increment\",\n        tooltip=\"Increment value depending on keyboard cursor location.\",\n        priority=True,\n    ),\n    Binding(\n        \"down\",\n        \"adjust_time(-1)\",\n        \"Decrement\",\n        tooltip=\"Decrement value depending on keyboard cursor location.\",\n        priority=True,\n    ),\n]\n</code></pre> <p>All bindings for an <code>AbstractInput</code>.</p> Key(s) Description escape Defocus the input. up Increment value depending on keyboard cursor location. down Decrement value depending on keyboard cursor location."},{"location":"reference/input/#textual_timepiece.pickers.DateInput.date","title":"date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>date = var[Date | None](None, init=False)\n</code></pre> <p>Date that is set. Bound if using within a picker.</p>"},{"location":"reference/input/#textual_timepiece.pickers.DateInput.Updated","title":"Updated","text":"<p>               Bases: <code>BaseMessage['DateInput']</code></p> <p>Message sent when the date is updated.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Alias for <code>date</code>.</p> <p> TYPE: <code>Date | None</code> </p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>class Updated(BaseMessage[\"DateInput\"]):\n    \"\"\"Message sent when the date is updated.\"\"\"\n\n    def __init__(self, widget: DateInput, date: Date | None) -&gt; None:\n        super().__init__(widget)\n        self.date = date\n\n    @property\n    def value(self) -&gt; Date | None:\n        \"\"\"Alias for `date`.\"\"\"\n        return self.date\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DateInput.Updated.value","title":"value  <code>property</code>","text":"<pre><code>value: Date | None\n</code></pre> <p>Alias for <code>date</code>.</p>"},{"location":"reference/input/#textual_timepiece.pickers.DateInput.action_adjust_time","title":"action_adjust_time","text":"<pre><code>action_adjust_time(offset: int) -&gt; None\n</code></pre> <p>Adjust date with an offset depending on the text cursor position.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>def action_adjust_time(self, offset: int) -&gt; None:\n    \"\"\"Adjust date with an offset depending on the text cursor position.\"\"\"\n    try:\n        if self.date is None:\n            self.date = Date.today_in_system_tz()\n        elif self._is_year_pos():\n            self.date = self.date.add(years=offset)\n        elif self._is_month_pos():\n            self.date = self.date.add(months=offset)\n        else:\n            self.date = self.date.add(days=offset)\n    except ValueError as err:\n        self.log.debug(err)\n        if not str(err).endswith(\"out of range\"):\n            raise\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.TimeInput","title":"textual_timepiece.pickers.TimeInput","text":"<p>               Bases: <code>AbstractInput[Time]</code></p> <p>Time input for a HH:MM:SS format.</p> CLASS DESCRIPTION <code>Updated</code> <p>Message sent when the time is updated.</p> METHOD DESCRIPTION <code>action_adjust_time</code> <p>Adjust time with an offset depending on the text cursor position.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for an <code>AbstractInput</code>.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>time</code> <p>Currently set time or none if its empty.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class TimeInput(AbstractInput[Time]):\n    \"\"\"Time input for a HH:MM:SS format.\"\"\"\n\n    class Updated(BaseMessage[\"TimeInput\"]):\n        \"\"\"Message sent when the time is updated.\"\"\"\n\n        def __init__(\n            self,\n            widget: TimeInput,\n            target: Time | None,\n        ) -&gt; None:\n            super().__init__(widget)\n            self.target = target\n\n        @property\n        def value(self) -&gt; Time | None:\n            \"\"\"Alias for `target` attribute.\"\"\"\n            return self.target\n\n    PATTERN = \"00:00:00\"\n    ALIAS = \"time\"\n\n    time = var[Time | None](None, init=False)\n    \"\"\"Currently set time or none if its empty.\"\"\"\n\n    def _watch_time(self, time: Time | None) -&gt; None:\n        with self.prevent(Input.Changed), suppress(ValueError):\n            if time:\n                self.value = time.format_common_iso()\n            else:\n                self.value = \"\"\n\n        self.post_message(self.Updated(self, self.time))\n\n    def _watch_value(self, value: str) -&gt; None:\n        if (ts := self.convert()) is not None and ts != self.time:\n            self.time = ts\n        super()._watch_value(value)\n\n    def convert(self) -&gt; Time | None:\n        try:\n            return Time.parse_common_iso(self.value)\n        except ValueError:\n            return None\n\n    def insert_text_at_cursor(self, text: str) -&gt; None:\n        if self.cursor_position &gt; 7:\n            return\n\n        if text not in digits:\n            self.cursor_position += 1\n            return\n\n        if self.cursor_position == 0:\n            self.value = text + self.value[1:]\n        elif self.cursor_position == 7:\n            self.value = self.value[:-1] + text\n            return\n        elif self.cursor_position in {4, 1} or (\n            self.value[self.cursor_position] != \":\" and text in \"543210\"\n        ):\n            self.value = (\n                self.value[: self.cursor_position]\n                + text\n                + self.value[self.cursor_position + 1 :]\n            )\n\n        self.cursor_position += 1\n\n    def action_delete_right(self) -&gt; None:\n        return\n\n    def action_delete_left(self) -&gt; None:\n        if self.cursor_position &lt; 0:\n            return\n\n        if self.cursor_position == 8:\n            self.value = self.value[:-1] + \"0\"\n\n        elif self.cursor_position not in {2, 5}:\n            self.value = (\n                self.value[: self.cursor_position]\n                + \"0\"\n                + self.value[self.cursor_position + 1 :]\n            )\n\n        if self.cursor_position &gt; 0:\n            self.cursor_position -= 1\n\n    def action_adjust_time(self, offset: int) -&gt; None:\n        \"\"\"Adjust time with an offset depending on the text cursor position.\"\"\"\n        if 0 &lt;= self.cursor_position &lt; 2:\n            self.time = add_time(self.time or Time(), hours(offset))\n        elif 3 &lt;= self.cursor_position &lt; 5:\n            self.time = add_time(self.time or Time(), minutes(offset))\n        elif self.cursor_position &gt;= 6:\n            self.time = add_time(self.time or Time(), seconds(offset))\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.TimeInput.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>AbstractInput {\n       background: transparent;\n       width: auto;\n       border: none;\n   }\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.TimeInput.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\"escape\", \"leave\", \"Defocus\", tooltip=\"Defocus the input.\"),\n    Binding(\n        \"up\",\n        \"adjust_time(1)\",\n        \"Increment\",\n        tooltip=\"Increment value depending on keyboard cursor location.\",\n        priority=True,\n    ),\n    Binding(\n        \"down\",\n        \"adjust_time(-1)\",\n        \"Decrement\",\n        tooltip=\"Decrement value depending on keyboard cursor location.\",\n        priority=True,\n    ),\n]\n</code></pre> <p>All bindings for an <code>AbstractInput</code>.</p> Key(s) Description escape Defocus the input. up Increment value depending on keyboard cursor location. down Decrement value depending on keyboard cursor location."},{"location":"reference/input/#textual_timepiece.pickers.TimeInput.time","title":"time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>time = var[Time | None](None, init=False)\n</code></pre> <p>Currently set time or none if its empty.</p>"},{"location":"reference/input/#textual_timepiece.pickers.TimeInput.Updated","title":"Updated","text":"<p>               Bases: <code>BaseMessage['TimeInput']</code></p> <p>Message sent when the time is updated.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Alias for <code>target</code> attribute.</p> <p> TYPE: <code>Time | None</code> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class Updated(BaseMessage[\"TimeInput\"]):\n    \"\"\"Message sent when the time is updated.\"\"\"\n\n    def __init__(\n        self,\n        widget: TimeInput,\n        target: Time | None,\n    ) -&gt; None:\n        super().__init__(widget)\n        self.target = target\n\n    @property\n    def value(self) -&gt; Time | None:\n        \"\"\"Alias for `target` attribute.\"\"\"\n        return self.target\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.TimeInput.Updated.value","title":"value  <code>property</code>","text":"<pre><code>value: Time | None\n</code></pre> <p>Alias for <code>target</code> attribute.</p>"},{"location":"reference/input/#textual_timepiece.pickers.TimeInput.action_adjust_time","title":"action_adjust_time","text":"<pre><code>action_adjust_time(offset: int) -&gt; None\n</code></pre> <p>Adjust time with an offset depending on the text cursor position.</p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>def action_adjust_time(self, offset: int) -&gt; None:\n    \"\"\"Adjust time with an offset depending on the text cursor position.\"\"\"\n    if 0 &lt;= self.cursor_position &lt; 2:\n        self.time = add_time(self.time or Time(), hours(offset))\n    elif 3 &lt;= self.cursor_position &lt; 5:\n        self.time = add_time(self.time or Time(), minutes(offset))\n    elif self.cursor_position &gt;= 6:\n        self.time = add_time(self.time or Time(), seconds(offset))\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DurationInput","title":"textual_timepiece.pickers.DurationInput","text":"<p>               Bases: <code>AbstractInput[TimeDelta]</code></p> <p>Duration input for time deltas.</p> CLASS DESCRIPTION <code>Updated</code> <p>Message sent when the duration changes through input or spinbox.</p> METHOD DESCRIPTION <code>action_adjust_time</code> <p>Adjust time with an offset depending on the text cursor position.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for an <code>AbstractInput</code>.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>duration</code> <p>Current duration in a <code>TimeDelta</code> or None if empty.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class DurationInput(AbstractInput[TimeDelta]):\n    \"\"\"Duration input for time deltas.\"\"\"\n\n    class Updated(BaseMessage[\"DurationInput\"]):\n        \"\"\"Message sent when the duration changes through input or spinbox.\"\"\"\n\n        def __init__(\n            self,\n            widget: DurationInput,\n            duration: TimeDelta | None,\n        ) -&gt; None:\n            super().__init__(widget)\n            self.duration = duration\n\n        @property\n        def value(self) -&gt; TimeDelta | None:\n            \"\"\"Alias for `duration` attribute.\"\"\"\n            return self.duration\n\n    ALIAS = \"duration\"\n    MIN: Final[TimeDelta] = TimeDelta()\n    MAX: Final[TimeDelta] = TimeDelta(hours=99, minutes=59, seconds=59)\n\n    PATTERN = \"99:99:99\"\n\n    duration = var[TimeDelta | None](None, init=False)\n    \"\"\"Current duration in a `TimeDelta` or None if empty.\n\n    This value is capped at 99 hours, 59 minutes and 59 seconds.\n    \"\"\"\n\n    def _validate_duration(\n        self,\n        duration: TimeDelta | None,\n    ) -&gt; TimeDelta | None:\n        if duration is None:\n            return None\n\n        return max(self.MIN, min(self.MAX, duration))\n\n    def _watch_duration(self, duration: TimeDelta | None) -&gt; None:\n        with self.prevent(Input.Changed), suppress(ValueError):\n            if isinstance(duration, TimeDelta):\n                self.value = format_seconds(int(duration.in_seconds()))\n            else:\n                self.value = \"\"\n\n        self.post_message(self.Updated(self, self.duration))\n\n    def _watch_value(self, value: str) -&gt; None:\n        if dur := self.convert():\n            self.duration = dur\n        super()._watch_value(value)\n\n    def convert(self) -&gt; TimeDelta | None:\n        try:\n            hours, minutes, seconds = tuple(map(int, self.value.split(\":\")))\n        except ValueError:\n            return None\n        if hours + minutes + seconds == 0:\n            return TimeDelta()\n        return TimeDelta(seconds=seconds, minutes=minutes, hours=hours)\n\n    def action_adjust_time(self, offset: int) -&gt; None:\n        \"\"\"Adjust time with an offset depending on the text cursor position.\"\"\"\n        if self.duration is None:\n            self.duration = TimeDelta()\n        elif 0 &lt;= self.cursor_position &lt; 2:\n            self.duration += hours(offset)\n        elif 3 &lt;= self.cursor_position &lt; 5:\n            self.duration += minutes(offset)\n        elif self.cursor_position &gt;= 6:\n            self.duration += seconds(offset)\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DurationInput.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>AbstractInput {\n       background: transparent;\n       width: auto;\n       border: none;\n   }\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DurationInput.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\"escape\", \"leave\", \"Defocus\", tooltip=\"Defocus the input.\"),\n    Binding(\n        \"up\",\n        \"adjust_time(1)\",\n        \"Increment\",\n        tooltip=\"Increment value depending on keyboard cursor location.\",\n        priority=True,\n    ),\n    Binding(\n        \"down\",\n        \"adjust_time(-1)\",\n        \"Decrement\",\n        tooltip=\"Decrement value depending on keyboard cursor location.\",\n        priority=True,\n    ),\n]\n</code></pre> <p>All bindings for an <code>AbstractInput</code>.</p> Key(s) Description escape Defocus the input. up Increment value depending on keyboard cursor location. down Decrement value depending on keyboard cursor location."},{"location":"reference/input/#textual_timepiece.pickers.DurationInput.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration = var[TimeDelta | None](None, init=False)\n</code></pre> <p>Current duration in a <code>TimeDelta</code> or None if empty.</p> <p>This value is capped at 99 hours, 59 minutes and 59 seconds.</p>"},{"location":"reference/input/#textual_timepiece.pickers.DurationInput.Updated","title":"Updated","text":"<p>               Bases: <code>BaseMessage['DurationInput']</code></p> <p>Message sent when the duration changes through input or spinbox.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Alias for <code>duration</code> attribute.</p> <p> TYPE: <code>TimeDelta | None</code> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class Updated(BaseMessage[\"DurationInput\"]):\n    \"\"\"Message sent when the duration changes through input or spinbox.\"\"\"\n\n    def __init__(\n        self,\n        widget: DurationInput,\n        duration: TimeDelta | None,\n    ) -&gt; None:\n        super().__init__(widget)\n        self.duration = duration\n\n    @property\n    def value(self) -&gt; TimeDelta | None:\n        \"\"\"Alias for `duration` attribute.\"\"\"\n        return self.duration\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DurationInput.Updated.value","title":"value  <code>property</code>","text":"<pre><code>value: TimeDelta | None\n</code></pre> <p>Alias for <code>duration</code> attribute.</p>"},{"location":"reference/input/#textual_timepiece.pickers.DurationInput.action_adjust_time","title":"action_adjust_time","text":"<pre><code>action_adjust_time(offset: int) -&gt; None\n</code></pre> <p>Adjust time with an offset depending on the text cursor position.</p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>def action_adjust_time(self, offset: int) -&gt; None:\n    \"\"\"Adjust time with an offset depending on the text cursor position.\"\"\"\n    if self.duration is None:\n        self.duration = TimeDelta()\n    elif 0 &lt;= self.cursor_position &lt; 2:\n        self.duration += hours(offset)\n    elif 3 &lt;= self.cursor_position &lt; 5:\n        self.duration += minutes(offset)\n    elif self.cursor_position &gt;= 6:\n        self.duration += seconds(offset)\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DateTimeInput","title":"textual_timepiece.pickers.DateTimeInput","text":"<p>               Bases: <code>AbstractInput[PlainDateTime]</code></p> <p>Input that combines both date and time into one.</p> CLASS DESCRIPTION <code>Updated</code> <p>Sent when the datetime is changed.</p> METHOD DESCRIPTION <code>action_adjust_time</code> <p>Adjust date with an offset depending on the text cursor position.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for an <code>AbstractInput</code>.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>datetime</code> <p>Current datetime or none if nothing is set.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_datetime_picker.py</code> <pre><code>class DateTimeInput(AbstractInput[PlainDateTime]):\n    \"\"\"Input that combines both date and time into one.\"\"\"\n\n    class Updated(BaseMessage[\"DateTimeInput\"]):\n        \"\"\"Sent when the datetime is changed.\"\"\"\n\n        def __init__(\n            self,\n            widget: DateTimeInput,\n            datetime: PlainDateTime | None,\n        ) -&gt; None:\n            super().__init__(widget)\n            self.datetime = datetime\n\n        @property\n        def value(self) -&gt; PlainDateTime | None:\n            \"\"\"Alias for `datetime` property.\"\"\"\n            return self.datetime\n\n    PATTERN: ClassVar[str] = r\"0009-B9-99 99:99:99\"\n    FORMAT: ClassVar[str] = r\"%Y-%m-%d %H:%M:%S\"\n    ALIAS = \"datetime\"\n\n    datetime = var[PlainDateTime | None](None, init=False)\n    \"\"\"Current datetime or none if nothing is set.\"\"\"\n\n    def __init__(\n        self,\n        value: PlainDateTime | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        tooltip: str | None = None,\n        *,\n        disabled: bool = False,\n        select_on_focus: bool = True,\n        spinbox_sensitivity: int = 1,\n    ) -&gt; None:\n        super().__init__(\n            value=value,\n            name=name,\n            id=id,\n            classes=classes,\n            tooltip=tooltip,\n            disabled=disabled,\n            select_on_focus=select_on_focus,\n            spinbox_sensitivity=spinbox_sensitivity,\n        )\n\n    def watch_datetime(self, value: PlainDateTime | None) -&gt; None:\n        with self.prevent(Input.Changed):\n            if value:\n                self.value = value.py_datetime().strftime(self.FORMAT)\n            else:\n                self.value = \"\"\n\n        self.post_message(self.Updated(self, self.datetime))\n\n    def _watch_value(self, value: str) -&gt; None:\n        if (dt := self.convert()) is not None:\n            self.datetime = dt\n\n    def convert(self) -&gt; PlainDateTime | None:\n        try:\n            return PlainDateTime.parse_strptime(self.value, format=self.FORMAT)\n        except ValueError:\n            return None\n\n    def action_adjust_time(self, offset: int) -&gt; None:\n        \"\"\"Adjust date with an offset depending on the text cursor position.\"\"\"\n        try:\n            if self.datetime is None:\n                self.datetime = SystemDateTime.now().to_plain()\n            elif self.cursor_position &lt; 4:\n                self.datetime = self.datetime.add(\n                    years=offset,\n                    ignore_dst=True,\n                )\n            elif 5 &lt;= self.cursor_position &lt; 7:\n                self.datetime = self.datetime.add(\n                    months=offset,\n                    ignore_dst=True,\n                )\n            elif 8 &lt;= self.cursor_position &lt; 10:\n                self.datetime = self.datetime.add(\n                    days=offset,\n                    ignore_dst=True,\n                )\n            elif 11 &lt;= self.cursor_position &lt; 13:\n                self.datetime = self.datetime.add(\n                    hours=offset,\n                    ignore_dst=True,\n                )\n            elif 14 &lt;= self.cursor_position &lt; 16:\n                self.datetime = self.datetime.add(\n                    minutes=offset,\n                    ignore_dst=True,\n                )\n            else:\n                self.datetime = self.datetime.add(\n                    seconds=offset,\n                    ignore_dst=True,\n                )\n        except ValueError as err:\n            self.log.debug(err)\n            if not str(err).endswith(\"out of range\"):\n                raise\n\n    def insert_text_at_cursor(self, text: str) -&gt; None:\n        if not text.isdigit():\n            return\n\n        # Extra Date Filtering\n        if self.cursor_position == 6 and text not in \"012\":\n            return\n\n        if self.cursor_position == 5 and text not in \"0123\":\n            return\n\n        if (\n            self.cursor_position == 6\n            and self.value[5] == \"3\"\n            and text not in \"01\"\n        ):\n            return\n\n        # Extra Time Filtering\n        if self.cursor_position == 11:\n            if (\n                text == \"2\"\n                and len(self.value) &gt;= 12\n                and self.value[12] not in \"0123\"\n            ):\n                self.value = self.value[:12] + \"3\" + self.value[13:]\n            elif text not in \"012\":\n                return\n\n        if (\n            self.cursor_position == 12\n            and self.value[11] == \"2\"\n            and text not in \"0123\"\n        ):\n            return\n\n        if self.cursor_position in {14, 17} and text not in \"012345\":\n            return\n\n        super().insert_text_at_cursor(text)\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DateTimeInput.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>AbstractInput {\n       background: transparent;\n       width: auto;\n       border: none;\n   }\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DateTimeInput.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\"escape\", \"leave\", \"Defocus\", tooltip=\"Defocus the input.\"),\n    Binding(\n        \"up\",\n        \"adjust_time(1)\",\n        \"Increment\",\n        tooltip=\"Increment value depending on keyboard cursor location.\",\n        priority=True,\n    ),\n    Binding(\n        \"down\",\n        \"adjust_time(-1)\",\n        \"Decrement\",\n        tooltip=\"Decrement value depending on keyboard cursor location.\",\n        priority=True,\n    ),\n]\n</code></pre> <p>All bindings for an <code>AbstractInput</code>.</p> Key(s) Description escape Defocus the input. up Increment value depending on keyboard cursor location. down Decrement value depending on keyboard cursor location."},{"location":"reference/input/#textual_timepiece.pickers.DateTimeInput.datetime","title":"datetime  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>datetime = var[PlainDateTime | None](None, init=False)\n</code></pre> <p>Current datetime or none if nothing is set.</p>"},{"location":"reference/input/#textual_timepiece.pickers.DateTimeInput.Updated","title":"Updated","text":"<p>               Bases: <code>BaseMessage['DateTimeInput']</code></p> <p>Sent when the datetime is changed.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Alias for <code>datetime</code> property.</p> <p> TYPE: <code>PlainDateTime | None</code> </p> Source code in <code>src/textual_timepiece/pickers/_datetime_picker.py</code> <pre><code>class Updated(BaseMessage[\"DateTimeInput\"]):\n    \"\"\"Sent when the datetime is changed.\"\"\"\n\n    def __init__(\n        self,\n        widget: DateTimeInput,\n        datetime: PlainDateTime | None,\n    ) -&gt; None:\n        super().__init__(widget)\n        self.datetime = datetime\n\n    @property\n    def value(self) -&gt; PlainDateTime | None:\n        \"\"\"Alias for `datetime` property.\"\"\"\n        return self.datetime\n</code></pre>"},{"location":"reference/input/#textual_timepiece.pickers.DateTimeInput.Updated.value","title":"value  <code>property</code>","text":"<pre><code>value: PlainDateTime | None\n</code></pre> <p>Alias for <code>datetime</code> property.</p>"},{"location":"reference/input/#textual_timepiece.pickers.DateTimeInput.action_adjust_time","title":"action_adjust_time","text":"<pre><code>action_adjust_time(offset: int) -&gt; None\n</code></pre> <p>Adjust date with an offset depending on the text cursor position.</p> Source code in <code>src/textual_timepiece/pickers/_datetime_picker.py</code> <pre><code>def action_adjust_time(self, offset: int) -&gt; None:\n    \"\"\"Adjust date with an offset depending on the text cursor position.\"\"\"\n    try:\n        if self.datetime is None:\n            self.datetime = SystemDateTime.now().to_plain()\n        elif self.cursor_position &lt; 4:\n            self.datetime = self.datetime.add(\n                years=offset,\n                ignore_dst=True,\n            )\n        elif 5 &lt;= self.cursor_position &lt; 7:\n            self.datetime = self.datetime.add(\n                months=offset,\n                ignore_dst=True,\n            )\n        elif 8 &lt;= self.cursor_position &lt; 10:\n            self.datetime = self.datetime.add(\n                days=offset,\n                ignore_dst=True,\n            )\n        elif 11 &lt;= self.cursor_position &lt; 13:\n            self.datetime = self.datetime.add(\n                hours=offset,\n                ignore_dst=True,\n            )\n        elif 14 &lt;= self.cursor_position &lt; 16:\n            self.datetime = self.datetime.add(\n                minutes=offset,\n                ignore_dst=True,\n            )\n        else:\n            self.datetime = self.datetime.add(\n                seconds=offset,\n                ignore_dst=True,\n            )\n    except ValueError as err:\n        self.log.debug(err)\n        if not str(err).endswith(\"out of range\"):\n            raise\n</code></pre>"},{"location":"reference/pickers/","title":"Pickers","text":"<p>Note</p> <p>These widgets are composed through a combination of selector and input widgets. To fully understand the picker functionality, it is recommended to read the aforementioned pages.</p> <p>Info</p> <p>All widgets have a <code>.mini</code> CSS class which you can assign to these widgets, to convert them to a single line.</p>"},{"location":"reference/pickers/#datepicker","title":"DatePicker","text":"<p> DatePickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a2025-06-07\u25ce\u25b2\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502 \u2502\u2190June\u00a02025\u25ce\u2192\u2502 \u2502\u2502 \u2502MonTueWedThuFriSatSun\u2502 \u2502\u2502 \u2502\u00a0\u00a01\u2502 \u2502\u2502 \u2502\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u2502 \u2502\u2502 \u2502\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u2502 \u2502\u2502 \u2502\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u2502 \u2502\u2502 \u2502\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029\u2502 \u2502\u2502 \u2502\u00a030\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DatePicker","title":"textual_timepiece.pickers.DatePicker","text":"<p>               Bases: <code>BasePicker[DateInput, Date, DateOverlay]</code></p> <p>Single date picker with an input and overlay.</p> PARAMETER DESCRIPTION <code>date</code> <p>Initial date for the picker.</p> <p> TYPE: <code>Date | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>DOM identifier for widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>Classes to add the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>date_range</code> <p>Date range to lock the widget to.</p> <p> TYPE: <code>DateDelta | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Disable the widget.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>validator</code> <p>A callable that will validate and adjust the date if needed.</p> <p> TYPE: <code>DateValidator | None</code> DEFAULT: <code>None</code> </p> <code>tooltip</code> <p>A tooltip to show when hovering the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; def limit_dates(date: Date | None) -&gt; Date | None:\n&gt;&gt;&gt;     if date is None:\n&gt;&gt;&gt;         return None\n&gt;&gt;&gt;     return min(Date(2025, 2, 20), max(Date(2025, 2, 6), date))\n&gt;&gt;&gt; yield DatePicker(validator=limit_dates)\n</code></pre> <pre><code>&gt;&gt;&gt; yield DatePicker(\n&gt;&gt;&gt;     Date.today_in_system_tz(),\n&gt;&gt;&gt;     date_range=DateDelta(days=5),\n&gt;&gt;&gt; )\n</code></pre> CLASS DESCRIPTION <code>Changed</code> <p>Message sent when the date changed.</p> METHOD DESCRIPTION <code>action_clear</code> <p>Clear the date.</p> <code>to_default</code> <p>Reset the date to today.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for <code>BasePicker</code> classes.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>DateValidator</code> <p>Callable type for validating date types.</p> <p> TYPE: <code>TypeAlias</code> </p> <code>date</code> <p>Current date for the picker. This is bound to every other subwidget.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>class DatePicker(BasePicker[DateInput, Date, DateOverlay]):\n    \"\"\"Single date picker with an input and overlay.\n\n    Params:\n        date: Initial date for the picker.\n        name: Name for the widget.\n        id: DOM identifier for widget.\n        classes: Classes to add the widget.\n        date_range: Date range to lock the widget to.\n        disabled: Disable the widget.\n        validator: A callable that will validate and adjust the date if needed.\n        tooltip: A tooltip to show when hovering the widget.\n\n    Examples:\n        &gt;&gt;&gt; def limit_dates(date: Date | None) -&gt; Date | None:\n        &gt;&gt;&gt;     if date is None:\n        &gt;&gt;&gt;         return None\n        &gt;&gt;&gt;     return min(Date(2025, 2, 20), max(Date(2025, 2, 6), date))\n        &gt;&gt;&gt; yield DatePicker(validator=limit_dates)\n\n        &gt;&gt;&gt; yield DatePicker(\n        &gt;&gt;&gt;     Date.today_in_system_tz(),\n        &gt;&gt;&gt;     date_range=DateDelta(days=5),\n        &gt;&gt;&gt; )\n    \"\"\"\n\n    class Changed(BaseMessage[\"DatePicker\"]):\n        \"\"\"Message sent when the date changed.\"\"\"\n\n        def __init__(self, widget: DatePicker, date: Date | None) -&gt; None:\n            super().__init__(widget)\n            self.date = date\n\n        @property\n        def value(self) -&gt; Date | None:\n            return self.date\n\n    BINDING_GROUP_TITLE = \"Date Picker\"\n    ALIAS = \"date\"\n\n    DateValidator: TypeAlias = Callable[[Date | None], Date | None]\n    \"\"\"Callable type for validating date types.\"\"\"\n\n    date = var[Date | None](None, init=False)\n    \"\"\"Current date for the picker. This is bound to every other subwidget.\"\"\"\n\n    def __init__(\n        self,\n        date: Date | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        *,\n        date_range: DateDelta | None = None,\n        disabled: bool = False,\n        validator: DateValidator | None = None,\n        tooltip: str | None = None,\n    ) -&gt; None:\n        super().__init__(\n            value=date,\n            name=name,\n            id=id,\n            classes=classes,\n            disabled=disabled,\n            tooltip=tooltip,\n        )\n        self._date_range = date_range\n        self.validator = validator\n\n    def _validate_date(self, date: Date | None) -&gt; Date | None:\n        if self.validator is None:\n            return date\n\n        return self.validator(date)\n\n    def check_action(\n        self, action: str, parameters: tuple[object, ...]\n    ) -&gt; bool | None:\n        if action == \"target_today\":\n            return self.date != Date.today_in_system_tz()\n        return True\n\n    def compose(self) -&gt; ComposeResult:\n        with Horizontal(id=\"input-control\"):\n            yield DateInput(id=\"date-input\").data_bind(date=DatePicker.date)\n\n            yield TargetButton(\n                id=\"target-default\",\n                disabled=self.date == Date.today_in_system_tz(),\n                tooltip=\"Set the date to today.\",\n            )\n            yield self._compose_expand_button()\n\n        yield (\n            DateOverlay(date_range=self._date_range).data_bind(\n                date=DatePicker.date, show=DatePicker.expanded\n            )\n        )\n\n    def _on_date_select_start_changed(\n        self,\n        message: DateSelect.StartChanged,\n    ) -&gt; None:\n        message.stop()\n        self.date = message.date\n\n    def _watch_date(self, new: Date) -&gt; None:\n        self.query_exactly_one(\"#target-default\", Button).disabled = (\n            new == Date.today_in_system_tz()\n        )\n        self.post_message(self.Changed(self, new))\n\n    @on(DateInput.Updated)\n    def _input_updated(self, message: DateInput.Updated) -&gt; None:\n        message.stop()\n        with message.widget.prevent(DateInput.Updated):\n            self.date = message.date\n\n    def action_clear(self) -&gt; None:\n        \"\"\"Clear the date.\"\"\"\n        self.date = None\n\n    def to_default(self) -&gt; None:\n        \"\"\"Reset the date to today.\"\"\"\n        self.overlay.date_select.scope = DateScope.MONTH\n        self.date = Date.today_in_system_tz()\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DatePicker.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>bstractPicker {\n        layers: base dialog;\n        layout: vertical;\n        height: 3;\n        width: auto;\n\n        &amp;.mini {\n            max-height: 1;\n            &amp; &gt; #input-control {\n                border: none;\n                height: 1;\n                padding: 0;\n\n                &amp;:blur {\n                    padding: 0;\n                }\n                &amp;:focus-within {\n                    padding: 0;\n                    border: none;\n                }\n                Button, AbstractInput {\n                    border: none;\n                    padding: 0;\n                    height: 1;\n\n                    &amp;:focus {\n                        color: $accent;\n                        text-style: none;\n                    }\n                    &amp;:disabled {\n                        opacity: 50%;\n                        text-style: italic;\n                    }\n                }\n            }\n        }\n\n        &amp; &gt; #input-control {\n            background: $surface;\n            width: auto;\n\n            &amp;:blur {\n                padding: 1;\n            }\n            &amp;:focus-within {\n                border: tall $primary;\n                padding: 0;\n            }\n\n            Button, AbstractInput {\n                border: none;\n                padding: 0;\n                height: 1;\n\n                &amp;:focus {\n                    color: $accent;\n                    text-style: none;\n                }\n            }\n            &amp; &gt; TargetButton {\n                min-width: 1;\n                max-width: 3;\n            }\n\n            &amp; &gt; AbstractInput {\n                padding: 0 2;\n                &amp;.-invalid {\n                    color: $error;\n                    text-style: italic;\n                }\n                &amp;:focus {\n                    tint: $primary 2%;\n                }\n            }\n        }\n        &amp; &gt; BaseOverlay {\n            border: round $secondary;\n            overlay: screen !important;\n            constrain: inside;\n            position: absolute;\n            height: auto;\n            width: auto;\n            background: $surface;\n            box-sizing: content-box;\n            opacity: 0;\n\n            &amp;:focus,\n            &amp;:focus-within {\n                border: round $primary;\n            }\n\n            &amp; &gt; BaseOverlayWidget {\n                width: 40;\n                height: auto;\n            }\n        }\n    }\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DatePicker.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+shift+d\",\n        \"clear\",\n        \"Clear Value\",\n        tooltip=\"Clear the current value.\",\n    ),\n    Binding(\n        \"ctrl+t\",\n        \"target_default\",\n        \"To Default Value\",\n        tooltip=\"Reset to the default value.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>BasePicker</code> classes.</p> Key(s) Description ctrl+shift+d Clear the current value. ctrl+t Reset to the default value."},{"location":"reference/pickers/#textual_timepiece.pickers.DatePicker.DateValidator","title":"DateValidator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DateValidator: TypeAlias = Callable[[Date | None], Date | None]\n</code></pre> <p>Callable type for validating date types.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DatePicker.date","title":"date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>date = var[Date | None](None, init=False)\n</code></pre> <p>Current date for the picker. This is bound to every other subwidget.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DatePicker.Changed","title":"Changed","text":"<p>               Bases: <code>BaseMessage['DatePicker']</code></p> <p>Message sent when the date changed.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>class Changed(BaseMessage[\"DatePicker\"]):\n    \"\"\"Message sent when the date changed.\"\"\"\n\n    def __init__(self, widget: DatePicker, date: Date | None) -&gt; None:\n        super().__init__(widget)\n        self.date = date\n\n    @property\n    def value(self) -&gt; Date | None:\n        return self.date\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DatePicker.action_clear","title":"action_clear","text":"<pre><code>action_clear() -&gt; None\n</code></pre> <p>Clear the date.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>def action_clear(self) -&gt; None:\n    \"\"\"Clear the date.\"\"\"\n    self.date = None\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DatePicker.to_default","title":"to_default","text":"<pre><code>to_default() -&gt; None\n</code></pre> <p>Reset the date to today.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>def to_default(self) -&gt; None:\n    \"\"\"Reset the date to today.\"\"\"\n    self.overlay.date_select.scope = DateScope.MONTH\n    self.date = Date.today_in_system_tz()\n</code></pre>"},{"location":"reference/pickers/#durationpicker","title":"DurationPicker","text":"<p> DurationPickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a00:00:00\u25ce\u25b2\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0\u2502 \u2502\u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u2502 \u2502\u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DurationPicker","title":"textual_timepiece.pickers.DurationPicker","text":"<p>               Bases: <code>BasePicker[DurationInput, TimeDelta, DurationOverlay]</code></p> <p>Picker widget for picking durations.</p> <p>Duration is limited 99 hours, 59 minutes and 59 seconds.</p> PARAMETER DESCRIPTION <code>value</code> <p>Initial duration value for the widget.</p> <p> TYPE: <code>ValueType | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>DOM identifier for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>CSS classes for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether to disable the widget.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tooltip</code> <p>Tooltip to show on hover.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> CLASS DESCRIPTION <code>Changed</code> <p>Message sent when the duration changes.</p> METHOD DESCRIPTION <code>to_default</code> <p>Reset the duration to 00:00:00.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for <code>BasePicker</code> classes.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>duration</code> <p>Current duration. Bound to all the child widgets.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class DurationPicker(BasePicker[DurationInput, TimeDelta, DurationOverlay]):\n    \"\"\"Picker widget for picking durations.\n\n    Duration is limited 99 hours, 59 minutes and 59 seconds.\n\n    Params:\n        value: Initial duration value for the widget.\n        name: Name for the widget.\n        id: DOM identifier for the widget.\n        classes: CSS classes for the widget\n        disabled: Whether to disable the widget.\n        tooltip: Tooltip to show on hover.\n    \"\"\"\n\n    class Changed(BaseMessage[\"DurationPicker\"]):\n        \"\"\"Message sent when the duration changes.\"\"\"\n\n        def __init__(\n            self,\n            widget: DurationPicker,\n            duration: TimeDelta | None,\n        ) -&gt; None:\n            super().__init__(widget)\n            self.duration = duration\n\n        @property\n        def value(self) -&gt; TimeDelta | None:\n            \"\"\"Alias for `duration` attribute.\"\"\"\n            return self.duration\n\n    INPUT = DurationInput\n    ALIAS = \"duration\"\n\n    duration = var[TimeDelta | None](None, init=False)\n    \"\"\"Current duration. Bound to all the child widgets.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        with Horizontal(id=\"input-control\"):\n            yield (\n                DurationInput(id=\"data-input\").data_bind(\n                    duration=DurationPicker.duration\n                )\n            )\n            yield TargetButton(\n                id=\"target-default\",\n                tooltip=\"Set the duration to zero.\",\n            )\n            yield self._compose_expand_button()\n\n        yield DurationOverlay().data_bind(show=DurationPicker.expanded)\n\n    def _on_mount(self, event: Mount) -&gt; None:\n        self.query_exactly_one(\"#target-default\", Button).disabled = (\n            self.duration is None or self.duration.in_seconds() == 0\n        )\n\n    def _watch_duration(self, delta: TimeDelta) -&gt; None:\n        self.query_exactly_one(\"#target-default\", Button).disabled = (\n            delta is None or delta.in_seconds() == 0\n        )\n        self.post_message(self.Changed(self, delta))\n\n    @on(DurationSelect.Rounded)\n    def _round_duration(self, message: DurationSelect.Rounded) -&gt; None:\n        message.stop()\n        if self.duration is None:\n            return\n        seconds = (\n            round(self.duration.in_seconds() / message.value) * message.value\n        )\n        self.duration = TimeDelta(seconds=seconds)\n\n    @on(DurationSelect.Adjusted)\n    def _adjust_duration(\n        self,\n        message: DurationSelect.Adjusted,\n    ) -&gt; None:\n        message.stop()\n        if message.delta is None:\n            self.duration = None\n        elif self.duration is None:\n            self.duration = message.delta\n        else:\n            self.duration += message.delta\n\n    @on(DurationInput.Updated)\n    def _set_duration(self, message: DurationInput.Updated) -&gt; None:\n        message.stop()\n        with message.control.prevent(DurationInput.Updated):\n            self.duration = message.duration\n\n    def to_default(self) -&gt; None:\n        \"\"\"Reset the duration to 00:00:00.\"\"\"\n        self.duration = TimeDelta()\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DurationPicker.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>bstractPicker {\n        layers: base dialog;\n        layout: vertical;\n        height: 3;\n        width: auto;\n\n        &amp;.mini {\n            max-height: 1;\n            &amp; &gt; #input-control {\n                border: none;\n                height: 1;\n                padding: 0;\n\n                &amp;:blur {\n                    padding: 0;\n                }\n                &amp;:focus-within {\n                    padding: 0;\n                    border: none;\n                }\n                Button, AbstractInput {\n                    border: none;\n                    padding: 0;\n                    height: 1;\n\n                    &amp;:focus {\n                        color: $accent;\n                        text-style: none;\n                    }\n                    &amp;:disabled {\n                        opacity: 50%;\n                        text-style: italic;\n                    }\n                }\n            }\n        }\n\n        &amp; &gt; #input-control {\n            background: $surface;\n            width: auto;\n\n            &amp;:blur {\n                padding: 1;\n            }\n            &amp;:focus-within {\n                border: tall $primary;\n                padding: 0;\n            }\n\n            Button, AbstractInput {\n                border: none;\n                padding: 0;\n                height: 1;\n\n                &amp;:focus {\n                    color: $accent;\n                    text-style: none;\n                }\n            }\n            &amp; &gt; TargetButton {\n                min-width: 1;\n                max-width: 3;\n            }\n\n            &amp; &gt; AbstractInput {\n                padding: 0 2;\n                &amp;.-invalid {\n                    color: $error;\n                    text-style: italic;\n                }\n                &amp;:focus {\n                    tint: $primary 2%;\n                }\n            }\n        }\n        &amp; &gt; BaseOverlay {\n            border: round $secondary;\n            overlay: screen !important;\n            constrain: inside;\n            position: absolute;\n            height: auto;\n            width: auto;\n            background: $surface;\n            box-sizing: content-box;\n            opacity: 0;\n\n            &amp;:focus,\n            &amp;:focus-within {\n                border: round $primary;\n            }\n\n            &amp; &gt; BaseOverlayWidget {\n                width: 40;\n                height: auto;\n            }\n        }\n    }\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DurationPicker.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+shift+d\",\n        \"clear\",\n        \"Clear Value\",\n        tooltip=\"Clear the current value.\",\n    ),\n    Binding(\n        \"ctrl+t\",\n        \"target_default\",\n        \"To Default Value\",\n        tooltip=\"Reset to the default value.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>BasePicker</code> classes.</p> Key(s) Description ctrl+shift+d Clear the current value. ctrl+t Reset to the default value."},{"location":"reference/pickers/#textual_timepiece.pickers.DurationPicker.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration = var[TimeDelta | None](None, init=False)\n</code></pre> <p>Current duration. Bound to all the child widgets.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DurationPicker.Changed","title":"Changed","text":"<p>               Bases: <code>BaseMessage['DurationPicker']</code></p> <p>Message sent when the duration changes.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Alias for <code>duration</code> attribute.</p> <p> TYPE: <code>TimeDelta | None</code> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class Changed(BaseMessage[\"DurationPicker\"]):\n    \"\"\"Message sent when the duration changes.\"\"\"\n\n    def __init__(\n        self,\n        widget: DurationPicker,\n        duration: TimeDelta | None,\n    ) -&gt; None:\n        super().__init__(widget)\n        self.duration = duration\n\n    @property\n    def value(self) -&gt; TimeDelta | None:\n        \"\"\"Alias for `duration` attribute.\"\"\"\n        return self.duration\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DurationPicker.Changed.value","title":"value  <code>property</code>","text":"<pre><code>value: TimeDelta | None\n</code></pre> <p>Alias for <code>duration</code> attribute.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DurationPicker.to_default","title":"to_default","text":"<pre><code>to_default() -&gt; None\n</code></pre> <p>Reset the duration to 00:00:00.</p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>def to_default(self) -&gt; None:\n    \"\"\"Reset the duration to 00:00:00.\"\"\"\n    self.duration = TimeDelta()\n</code></pre>"},{"location":"reference/pickers/#timepicker","title":"TimePicker","text":"<p> TimePickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a12:00:00\u25ce\u25b2\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0\u2502 \u2502\u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u2502 \u2502\u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u2502 \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502 \u2502\u00a000:00\u00a0\u00a000:30\u00a0\u00a001:00\u00a0\u00a001:30\u00a0\u2502 \u2502\u00a002:00\u00a0\u00a002:30\u00a0\u00a003:00\u00a0\u00a003:30\u00a0\u2502 \u2502\u00a004:00\u00a0\u00a004:30\u00a0\u00a005:00\u00a0\u00a005:30\u00a0\u2502 \u2502\u00a006:00\u00a0\u00a006:30\u00a0\u00a007:00\u00a0\u00a007:30\u00a0\u2502 \u2502\u00a008:00\u00a0\u00a008:30\u00a0\u00a009:00\u00a0\u00a009:30\u00a0\u2502 \u2502\u00a010:00\u00a0\u00a010:30\u00a0\u00a011:00\u00a0\u00a011:30\u00a0\u2502 \u2502\u00a012:00\u00a0\u00a012:30\u00a0\u00a013:00\u00a0\u00a013:30\u00a0\u2502 \u2502\u00a014:00\u00a0\u00a014:30\u00a0\u00a015:00\u00a0\u00a015:30\u00a0\u2502 \u2502\u00a016:00\u00a0\u00a016:30\u00a0\u00a017:00\u00a0\u00a017:30\u00a0\u2502 \u2502\u00a018:00\u00a0\u00a018:30\u00a0\u00a019:00\u00a0\u00a019:30\u00a0\u2502 \u2502\u00a020:00\u00a0\u00a020:30\u00a0\u00a021:00\u00a0\u00a021:30\u00a0\u2502 \u2502\u00a022:00\u00a0\u00a022:30\u00a0\u00a023:00\u00a0\u00a023:30\u00a0\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"reference/pickers/#textual_timepiece.pickers.TimePicker","title":"textual_timepiece.pickers.TimePicker","text":"<p>               Bases: <code>BasePicker[TimeInput, Time, TimeOverlay]</code></p> <p>Time picker for a 24 hour clock.</p> PARAMETER DESCRIPTION <code>value</code> <p>Initial time for the widget.</p> <p> TYPE: <code>ValueType | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>DOM identifier for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>CSS classes for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether to disable the widget.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tooltip</code> <p>Tooltip to show on hover.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> CLASS DESCRIPTION <code>Changed</code> <p>Sent when the time is changed with the overlay or other means.</p> METHOD DESCRIPTION <code>to_default</code> <p>Reset time to the local current time.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for <code>BasePicker</code> classes.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>time</code> <p>Currently set time that is bound to the subwidgets. None if empty.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class TimePicker(BasePicker[TimeInput, Time, TimeOverlay]):\n    \"\"\"Time picker for a 24 hour clock.\n\n    Params:\n        value: Initial time for the widget.\n        name: Name for the widget.\n        id: DOM identifier for the widget.\n        classes: CSS classes for the widget\n        disabled: Whether to disable the widget.\n        tooltip: Tooltip to show on hover.\n    \"\"\"\n\n    class Changed(BaseMessage[\"TimePicker\"]):\n        \"\"\"Sent when the time is changed with the overlay or other means.\"\"\"\n\n        def __init__(\n            self,\n            widget: TimePicker,\n            target: Time | None,\n        ) -&gt; None:\n            super().__init__(widget)\n            self.target = target\n\n        @property\n        def new_time(self) -&gt; Time | None:\n            \"\"\"Alias for `target` attribute.\"\"\"\n            return self.target\n\n        @property\n        def value(self) -&gt; Time | None:\n            \"\"\"Alias for `target` attribute.\"\"\"\n            return self.target\n\n    INPUT = TimeInput\n    ALIAS = \"time\"\n\n    time = var[Time | None](None, init=False)\n    \"\"\"Currently set time that is bound to the subwidgets. None if empty.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        with Horizontal(id=\"input-control\"):\n            yield TimeInput(id=\"data-input\").data_bind(time=TimePicker.time)\n            yield TargetButton(id=\"target-default\", tooltip=\"Set time to now.\")\n            yield self._compose_expand_button()\n\n        yield TimeOverlay().data_bind(show=TimePicker.expanded)\n\n    @on(DurationSelect.Rounded)\n    def _round_duration(self, message: DurationSelect.Rounded) -&gt; None:\n        message.stop()\n        if self.time is None:\n            return\n        self.time = round_time(self.time, message.value)\n\n    @on(DurationSelect.Adjusted)\n    def _adjust_duration(self, message: DurationSelect.Adjusted) -&gt; None:\n        message.stop()\n        self.time = add_time(self.time or Time(), message.delta)\n\n    @on(TimeSelect.Selected)\n    def _select_time(self, message: TimeSelect.Selected) -&gt; None:\n        message.stop()\n        self.time = message.target\n\n    @on(TimeInput.Updated)\n    def _change_time(self, message: TimeInput.Updated) -&gt; None:\n        message.stop()\n        with message.control.prevent(TimeInput.Updated):\n            self.time = message.target\n\n    def to_default(self) -&gt; None:\n        \"\"\"Reset time to the local current time.\"\"\"\n        self.time = SystemDateTime.now().time()\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.TimePicker.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>bstractPicker {\n        layers: base dialog;\n        layout: vertical;\n        height: 3;\n        width: auto;\n\n        &amp;.mini {\n            max-height: 1;\n            &amp; &gt; #input-control {\n                border: none;\n                height: 1;\n                padding: 0;\n\n                &amp;:blur {\n                    padding: 0;\n                }\n                &amp;:focus-within {\n                    padding: 0;\n                    border: none;\n                }\n                Button, AbstractInput {\n                    border: none;\n                    padding: 0;\n                    height: 1;\n\n                    &amp;:focus {\n                        color: $accent;\n                        text-style: none;\n                    }\n                    &amp;:disabled {\n                        opacity: 50%;\n                        text-style: italic;\n                    }\n                }\n            }\n        }\n\n        &amp; &gt; #input-control {\n            background: $surface;\n            width: auto;\n\n            &amp;:blur {\n                padding: 1;\n            }\n            &amp;:focus-within {\n                border: tall $primary;\n                padding: 0;\n            }\n\n            Button, AbstractInput {\n                border: none;\n                padding: 0;\n                height: 1;\n\n                &amp;:focus {\n                    color: $accent;\n                    text-style: none;\n                }\n            }\n            &amp; &gt; TargetButton {\n                min-width: 1;\n                max-width: 3;\n            }\n\n            &amp; &gt; AbstractInput {\n                padding: 0 2;\n                &amp;.-invalid {\n                    color: $error;\n                    text-style: italic;\n                }\n                &amp;:focus {\n                    tint: $primary 2%;\n                }\n            }\n        }\n        &amp; &gt; BaseOverlay {\n            border: round $secondary;\n            overlay: screen !important;\n            constrain: inside;\n            position: absolute;\n            height: auto;\n            width: auto;\n            background: $surface;\n            box-sizing: content-box;\n            opacity: 0;\n\n            &amp;:focus,\n            &amp;:focus-within {\n                border: round $primary;\n            }\n\n            &amp; &gt; BaseOverlayWidget {\n                width: 40;\n                height: auto;\n            }\n        }\n    }\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.TimePicker.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+shift+d\",\n        \"clear\",\n        \"Clear Value\",\n        tooltip=\"Clear the current value.\",\n    ),\n    Binding(\n        \"ctrl+t\",\n        \"target_default\",\n        \"To Default Value\",\n        tooltip=\"Reset to the default value.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>BasePicker</code> classes.</p> Key(s) Description ctrl+shift+d Clear the current value. ctrl+t Reset to the default value."},{"location":"reference/pickers/#textual_timepiece.pickers.TimePicker.time","title":"time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>time = var[Time | None](None, init=False)\n</code></pre> <p>Currently set time that is bound to the subwidgets. None if empty.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.TimePicker.Changed","title":"Changed","text":"<p>               Bases: <code>BaseMessage['TimePicker']</code></p> <p>Sent when the time is changed with the overlay or other means.</p> ATTRIBUTE DESCRIPTION <code>new_time</code> <p>Alias for <code>target</code> attribute.</p> <p> TYPE: <code>Time | None</code> </p> <code>value</code> <p>Alias for <code>target</code> attribute.</p> <p> TYPE: <code>Time | None</code> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class Changed(BaseMessage[\"TimePicker\"]):\n    \"\"\"Sent when the time is changed with the overlay or other means.\"\"\"\n\n    def __init__(\n        self,\n        widget: TimePicker,\n        target: Time | None,\n    ) -&gt; None:\n        super().__init__(widget)\n        self.target = target\n\n    @property\n    def new_time(self) -&gt; Time | None:\n        \"\"\"Alias for `target` attribute.\"\"\"\n        return self.target\n\n    @property\n    def value(self) -&gt; Time | None:\n        \"\"\"Alias for `target` attribute.\"\"\"\n        return self.target\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.TimePicker.Changed.new_time","title":"new_time  <code>property</code>","text":"<pre><code>new_time: Time | None\n</code></pre> <p>Alias for <code>target</code> attribute.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.TimePicker.Changed.value","title":"value  <code>property</code>","text":"<pre><code>value: Time | None\n</code></pre> <p>Alias for <code>target</code> attribute.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.TimePicker.to_default","title":"to_default","text":"<pre><code>to_default() -&gt; None\n</code></pre> <p>Reset time to the local current time.</p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>def to_default(self) -&gt; None:\n    \"\"\"Reset time to the local current time.\"\"\"\n    self.time = SystemDateTime.now().time()\n</code></pre>"},{"location":"reference/pickers/#datetimepicker","title":"DateTimePicker","text":"<p> DateTimePickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a\u00a0\u00a0\u00a0-\u00a0\u00a0-\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0\u00a0:\u00a0\u00a0\u25ce\u25b2\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0\u2502 \u2502\u2190June\u00a02025\u25ce\u2192\u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u2502 \u2502\u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u2502 \u2502MonTueWedThuFriSatSun\u00a000:00\u00a0\u00a000:30\u00a0\u00a001:00\u00a0\u00a001:30\u00a0\u2502 \u2502\u00a002:00\u00a0\u00a002:30\u00a0\u00a003:00\u00a0\u00a003:30\u00a0\u2502 \u2502\u00a0\u00a01\u00a004:00\u00a0\u00a004:30\u00a0\u00a005:00\u00a0\u00a005:30\u00a0\u2502 \u2502\u00a006:00\u00a0\u00a006:30\u00a0\u00a007:00\u00a0\u00a007:30\u00a0\u2502 \u2502\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u00a008:00\u00a0\u00a008:30\u00a0\u00a009:00\u00a0\u00a009:30\u00a0\u2502 \u2502\u00a010:00\u00a0\u00a010:30\u00a0\u00a011:00\u00a0\u00a011:30\u00a0\u2502 \u2502\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u00a012:00\u00a0\u00a012:30\u00a0\u00a013:00\u00a0\u00a013:30\u00a0\u2502 \u2502\u00a014:00\u00a0\u00a014:30\u00a0\u00a015:00\u00a0\u00a015:30\u00a0\u2502 \u2502\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u00a016:00\u00a0\u00a016:30\u00a0\u00a017:00\u00a0\u00a017:30\u00a0\u2502 \u2502\u00a018:00\u00a0\u00a018:30\u00a0\u00a019:00\u00a0\u00a019:30\u00a0\u2502 \u2502\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029\u00a020:00\u00a0\u00a020:30\u00a0\u00a021:00\u00a0\u00a021:30\u00a0\u2502 \u2502\u00a022:00\u00a0\u00a022:30\u00a0\u00a023:00\u00a0\u00a023:30\u00a0\u2502 \u2502\u00a030\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimePicker","title":"textual_timepiece.pickers.DateTimePicker","text":"<p>               Bases: <code>BasePicker[DateTimeInput, PlainDateTime, DateTimeOverlay]</code></p> <p>Datetime picker with a date and time in one input.</p> PARAMETER DESCRIPTION <code>value</code> <p>Initial datetime value for the widget.</p> <p> TYPE: <code>ValueType | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>DOM identifier for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>CSS classes for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether to disable the widget.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tooltip</code> <p>Tooltip to show on hover.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> CLASS DESCRIPTION <code>Changed</code> <p>Message sent when the datetime is updated.</p> METHOD DESCRIPTION <code>to_default</code> <p>Reset the picker datetime to the current time.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for <code>BasePicker</code> classes.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>datetime</code> <p>The current set datetime. Bound of to all subwidgets.</p> <p> </p> <code>date</code> <p>Computed date based on the datetime for the overlay.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_datetime_picker.py</code> <pre><code>class DateTimePicker(\n    BasePicker[DateTimeInput, PlainDateTime, DateTimeOverlay]\n):\n    \"\"\"Datetime picker with a date and time in one input.\n\n    Params:\n        value: Initial datetime value for the widget.\n        name: Name for the widget.\n        id: DOM identifier for the widget.\n        classes: CSS classes for the widget\n        disabled: Whether to disable the widget.\n        tooltip: Tooltip to show on hover.\n    \"\"\"\n\n    class Changed(BaseMessage[\"DateTimePicker\"]):\n        \"\"\"Message sent when the datetime is updated.\"\"\"\n\n        def __init__(\n            self,\n            widget: DateTimePicker,\n            datetime: PlainDateTime | None,\n        ) -&gt; None:\n            super().__init__(widget)\n            self.datetime = datetime\n\n        @property\n        def value(self) -&gt; PlainDateTime | None:\n            return self.datetime\n\n    INPUT = DateTimeInput\n    ALIAS = \"datetime\"\n\n    datetime = var[PlainDateTime | None](None, init=False)\n    \"\"\"The current set datetime. Bound of to all subwidgets.\"\"\"\n    date = var[Date | None](None, init=False)\n    \"\"\"Computed date based on the datetime for the overlay.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        with Horizontal(id=\"input-control\"):\n            yield DateTimeInput().data_bind(DateTimePicker.datetime)\n            yield TargetButton(\n                id=\"target-default\",\n                tooltip=\"Set the datetime to now.\",\n            )\n            yield self._compose_expand_button()\n\n        yield (\n            DateTimeOverlay().data_bind(\n                date=DateTimePicker.date,\n                show=DateTimePicker.expanded,\n            )\n        )\n\n    def _compute_date(self) -&gt; Date | None:\n        if self.datetime:\n            return self.datetime.date()\n        return None\n\n    def _watch_datetime(self, datetime: PlainDateTime | None) -&gt; None:\n        self.post_message(self.Changed(self, datetime))\n\n    def _on_date_select_start_changed(\n        self,\n        message: DateSelect.StartChanged,\n    ) -&gt; None:\n        message.stop()\n        if not message.date:\n            return\n        if self.datetime:\n            self.datetime = self.datetime.time().on(message.date)\n        else:\n            self.datetime = message.date.at(Time())\n\n    @on(DurationSelect.Rounded)\n    def _round_time(self, message: DurationSelect.Rounded) -&gt; None:\n        message.stop()\n        if self.datetime is None:\n            return\n\n        time = round_time(self.datetime.time(), message.value)\n        self.datetime = self.datetime.replace_time(time)\n\n    @on(DurationSelect.Adjusted)\n    def _adjust_time(self, message: DurationSelect.Adjusted) -&gt; None:\n        message.stop()\n        if self.datetime:\n            self.datetime = self.datetime.add(message.delta, ignore_dst=True)\n        else:\n            self.datetime = SystemDateTime.now().to_plain()\n\n    @on(TimeSelect.Selected)\n    def _set_time(self, message: TimeSelect.Selected) -&gt; None:\n        message.stop()\n        if self.datetime is None:\n            self.datetime = (\n                SystemDateTime.now().to_plain().replace_time(message.target)\n            )\n        else:\n            self.datetime = self.datetime.replace_time(message.target)\n\n    @on(DateTimeInput.Updated)\n    def _dt_input_changed(self, message: DateTimeInput.Updated) -&gt; None:\n        message.stop()\n        with self.input_widget.prevent(DateTimeInput.Updated):\n            self.datetime = message.datetime\n\n    def to_default(self) -&gt; None:\n        \"\"\"Reset the picker datetime to the current time.\"\"\"\n        self.datetime = SystemDateTime.now().to_plain()\n        self.overlay.date_select.scope = DateScope.MONTH\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimePicker.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>bstractPicker {\n        layers: base dialog;\n        layout: vertical;\n        height: 3;\n        width: auto;\n\n        &amp;.mini {\n            max-height: 1;\n            &amp; &gt; #input-control {\n                border: none;\n                height: 1;\n                padding: 0;\n\n                &amp;:blur {\n                    padding: 0;\n                }\n                &amp;:focus-within {\n                    padding: 0;\n                    border: none;\n                }\n                Button, AbstractInput {\n                    border: none;\n                    padding: 0;\n                    height: 1;\n\n                    &amp;:focus {\n                        color: $accent;\n                        text-style: none;\n                    }\n                    &amp;:disabled {\n                        opacity: 50%;\n                        text-style: italic;\n                    }\n                }\n            }\n        }\n\n        &amp; &gt; #input-control {\n            background: $surface;\n            width: auto;\n\n            &amp;:blur {\n                padding: 1;\n            }\n            &amp;:focus-within {\n                border: tall $primary;\n                padding: 0;\n            }\n\n            Button, AbstractInput {\n                border: none;\n                padding: 0;\n                height: 1;\n\n                &amp;:focus {\n                    color: $accent;\n                    text-style: none;\n                }\n            }\n            &amp; &gt; TargetButton {\n                min-width: 1;\n                max-width: 3;\n            }\n\n            &amp; &gt; AbstractInput {\n                padding: 0 2;\n                &amp;.-invalid {\n                    color: $error;\n                    text-style: italic;\n                }\n                &amp;:focus {\n                    tint: $primary 2%;\n                }\n            }\n        }\n        &amp; &gt; BaseOverlay {\n            border: round $secondary;\n            overlay: screen !important;\n            constrain: inside;\n            position: absolute;\n            height: auto;\n            width: auto;\n            background: $surface;\n            box-sizing: content-box;\n            opacity: 0;\n\n            &amp;:focus,\n            &amp;:focus-within {\n                border: round $primary;\n            }\n\n            &amp; &gt; BaseOverlayWidget {\n                width: 40;\n                height: auto;\n            }\n        }\n    }\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimePicker.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+shift+d\",\n        \"clear\",\n        \"Clear Value\",\n        tooltip=\"Clear the current value.\",\n    ),\n    Binding(\n        \"ctrl+t\",\n        \"target_default\",\n        \"To Default Value\",\n        tooltip=\"Reset to the default value.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>BasePicker</code> classes.</p> Key(s) Description ctrl+shift+d Clear the current value. ctrl+t Reset to the default value."},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimePicker.datetime","title":"datetime  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>datetime = var[PlainDateTime | None](None, init=False)\n</code></pre> <p>The current set datetime. Bound of to all subwidgets.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimePicker.date","title":"date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>date = var[Date | None](None, init=False)\n</code></pre> <p>Computed date based on the datetime for the overlay.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimePicker.Changed","title":"Changed","text":"<p>               Bases: <code>BaseMessage['DateTimePicker']</code></p> <p>Message sent when the datetime is updated.</p> Source code in <code>src/textual_timepiece/pickers/_datetime_picker.py</code> <pre><code>class Changed(BaseMessage[\"DateTimePicker\"]):\n    \"\"\"Message sent when the datetime is updated.\"\"\"\n\n    def __init__(\n        self,\n        widget: DateTimePicker,\n        datetime: PlainDateTime | None,\n    ) -&gt; None:\n        super().__init__(widget)\n        self.datetime = datetime\n\n    @property\n    def value(self) -&gt; PlainDateTime | None:\n        return self.datetime\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimePicker.to_default","title":"to_default","text":"<pre><code>to_default() -&gt; None\n</code></pre> <p>Reset the picker datetime to the current time.</p> Source code in <code>src/textual_timepiece/pickers/_datetime_picker.py</code> <pre><code>def to_default(self) -&gt; None:\n    \"\"\"Reset the picker datetime to the current time.\"\"\"\n    self.datetime = SystemDateTime.now().to_plain()\n    self.overlay.date_select.scope = DateScope.MONTH\n</code></pre>"},{"location":"reference/pickers/#daterangepicker","title":"DateRangePicker","text":"<p> DateRangePickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a2025-06-07\u25ce\ud83d\udd13\u00a0\u00a0\u00a0\u00a0-\u00a0\u00a0-\u00a0\u00a0\u25ce\u25b2\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502&gt; \u2502\u2190June\u00a02025\u25ce\u2192&gt;\u2190June\u00a02025\u25ce\u2192 \u2502&gt; \u2502MonTueWedThuFriSatSun&gt;MonTueWedThuFriSatSun \u2502&gt; \u2502\u00a0\u00a01&gt;\u00a0\u00a01 \u2502&gt; \u2502\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08&gt;\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08 \u2502&gt; \u2502\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015&gt;\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015 \u2502&gt; \u2502\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022&gt;\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022 \u2502&gt; \u2502\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029&gt;\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029 \u2502&gt; \u2502\u00a030&gt;\u00a030 \u2502&gt; \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 </p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker","title":"textual_timepiece.pickers.DateRangePicker","text":"<p>               Bases: <code>AbstractPicker[DateRangeOverlay]</code></p> <p>Date range picker for picking inclusive date ranges.</p> PARAMETER DESCRIPTION <code>start</code> <p>Initial start date for the picker.</p> <p> TYPE: <code>Date | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>Initial end date for the picker.</p> <p> TYPE: <code>Date | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>DOM identifier for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>CSS classes for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>date_range</code> <p>Date range to restrict the date to. If provided the picker lock will be permanently on for the widgets lifetime or when re-enabled programmatically.</p> <p> TYPE: <code>DateDelta | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether to disable the widget</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tooltip</code> <p>Tooltip to show on hover.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <p>Examples:</p> <pre><code>    def compose(self) -&gt; ComposeResult:\n        yield DateRangePicker(Date(2025, 2, 1), Date(2025, 3, 1))\n</code></pre> <pre><code>    def compose(self) -&gt; ComposeResult:\n        yield DateRangePicker(Date.today_in_system_tz()).disable_end()\n\n    def action_stop(self) -&gt; None:\n        pick = self.query_one(DateRangePicker)\n        pick.disable_end(disable=False)\n        pick.end_date = Date.today_in_system_tz()\n</code></pre> CLASS DESCRIPTION <code>Changed</code> <p>Message sent when the date range has changed.</p> METHOD DESCRIPTION <code>action_clear</code> <p>Clear the start and end dates.</p> <code>disable_start</code> <p>Utility method to disable start input widgets.</p> <code>disable_end</code> <p>Utility method to disable end input widgets.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for <code>DateTimeRangePicker</code>.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>start_date</code> <p>Picker start date. Bound to sub widgets.</p> <p> </p> <code>end_date</code> <p>Picker end date. Bound to sub widgets.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>class DateRangePicker(AbstractPicker[DateRangeOverlay]):\n    \"\"\"Date range picker for picking inclusive date ranges.\n\n    Params:\n        start: Initial start date for the picker.\n        end: Initial end date for the picker.\n        name: Name for the widget.\n        id: DOM identifier for the widget.\n        classes: CSS classes for the widget\n        date_range: Date range to restrict the date to. If provided the picker\n            lock will be permanently on for the widgets lifetime or when\n            re-enabled programmatically.\n        disabled: Whether to disable the widget\n        tooltip: Tooltip to show on hover.\n\n    Examples:\n        ```python\n            def compose(self) -&gt; ComposeResult:\n                yield DateRangePicker(Date(2025, 2, 1), Date(2025, 3, 1))\n        ```\n\n        ```python\n            def compose(self) -&gt; ComposeResult:\n                yield DateRangePicker(Date.today_in_system_tz()).disable_end()\n\n            def action_stop(self) -&gt; None:\n                pick = self.query_one(DateRangePicker)\n                pick.disable_end(disable=False)\n                pick.end_date = Date.today_in_system_tz()\n        ```\n    \"\"\"\n\n    class Changed(BaseMessage[\"DateRangePicker\"]):\n        \"\"\"Message sent when the date range has changed.\"\"\"\n\n        def __init__(\n            self,\n            widget: DateRangePicker,\n            start: Date | None,\n            end: Date | None,\n        ) -&gt; None:\n            super().__init__(widget)\n            self.start = start\n            self.end = end\n\n    BINDING_GROUP_TITLE = \"Date Range Picker\"\n\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\n            \"ctrl+shift+d\",\n            \"clear\",\n            \"Clear Dates\",\n            tooltip=\"Clear both the start and end date.\",\n        ),\n        Binding(\n            \"ctrl+t\",\n            \"target_default_start\",\n            \"Start To Today\",\n            tooltip=\"Set the start date to todays date.\",\n        ),\n        Binding(\n            \"alt+ctrl+t\",\n            \"target_default_end\",\n            \"End To Today\",\n            tooltip=\"Set the end date to today or the start date.\",\n        ),\n    ]\n    \"\"\"All bindings for `DateTimeRangePicker`.\n\n    | Key(s) | Description |\n    | :- | :- |\n    | ctrl+shift+d | Clear end and start datetime. |\n    | ctrl+t | Set the start date to todays date. |\n    | alt+ctrl+t | Set the end date to today or the start date. |\n    \"\"\"\n\n    start_date = var[Date | None](None, init=False)\n    \"\"\"Picker start date. Bound to sub widgets.\"\"\"\n    end_date = var[Date | None](None, init=False)\n    \"\"\"Picker end date. Bound to sub widgets.\"\"\"\n\n    def __init__(\n        self,\n        start: Date | None = None,\n        end: Date | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        *,\n        date_range: DateDelta | None = None,\n        disabled: bool = False,\n        tooltip: str | None = None,\n    ) -&gt; None:\n        super().__init__(name, id, classes, disabled=disabled, tooltip=tooltip)\n        self.set_reactive(DateRangePicker.start_date, start)\n        self.set_reactive(DateRangePicker.end_date, end)\n        self._date_range = date_range\n\n    def compose(self) -&gt; ComposeResult:\n        with Horizontal(id=\"input-control\"):\n            yield DateInput(id=\"start-date-input\").data_bind(\n                date=DateRangePicker.start_date,\n            )\n\n            yield TargetButton(\n                id=\"target-default-start\",\n                tooltip=\"Set the start date to today.\",\n            )\n            yield LockButton(\n                is_locked=self._date_range is not None,\n                id=\"lock-button\",\n                tooltip=\"Lock the range inbetween the dates.\",\n                disabled=self._date_range is not None,\n            )\n\n            yield DateInput(id=\"stop-date-input\").data_bind(\n                date=DateRangePicker.end_date,\n            )\n            yield TargetButton(\n                id=\"target-default-end\",\n                tooltip=\"Set the end date to today or the start date.\",\n            )\n            yield self._compose_expand_button()\n\n        yield DateRangeOverlay().data_bind(\n            show=DateRangePicker.expanded,\n            start=DateRangePicker.start_date,\n            stop=DateRangePicker.end_date,\n        )\n\n    def _watch_start_date(self, date: Date | None) -&gt; None:\n        if date and self._date_range:\n            with self.prevent(self.Changed):\n                self.end_date = date + self._date_range\n\n        self.query_one(\"#target-default-start\").disabled = (\n            date == Date.today_in_system_tz()\n        )\n        self.post_message(self.Changed(self, date, self.end_date))\n\n    def _watch_end_date(self, date: Date | None) -&gt; None:\n        if date and self._date_range:\n            with self.prevent(self.Changed):\n                self.start_date = date - self._date_range\n\n        self.query_one(\"#target-default-end\").disabled = (\n            date == Date.today_in_system_tz()\n        )\n        self.post_message(self.Changed(self, self.start_date, date))\n\n    @on(DateSelect.StartChanged)\n    @on(DateSelect.EndChanged)\n    def _dialog_date_changed(\n        self,\n        message: DateSelect.StartChanged | DateSelect.EndChanged,\n    ) -&gt; None:\n        \"\"\"Handles changes in dates including, keeping dates the same span.\"\"\"\n        message.stop()\n        if isinstance(message, DateSelect.StartChanged):\n            self.start_date = message.date\n        else:\n            self.end_date = message.date\n\n    @on(DateInput.Updated, \"#start-date-input\")\n    @on(DateInput.Updated, \"#stop-date-input\")\n    def _date_input_change(self, message: DateInput.Updated) -&gt; None:\n        message.stop()\n        with message.control.prevent(DateInput.Updated):\n            if message.control.id == \"start-date-input\":\n                self.start_date = message.date\n            else:\n                self.end_date = message.date\n\n    @on(Button.Pressed, \"#target-default-start\")\n    def _action_target_default_start(\n        self,\n        message: Button.Pressed | None = None,\n    ) -&gt; None:\n        if message:\n            message.stop()\n        new_date = Date.today_in_system_tz()\n        if not self.end_date or new_date &lt;= self.end_date:\n            self.start_date = new_date\n        else:\n            self.start_date = self.end_date\n\n    @on(Button.Pressed, \"#target-default-end\")\n    def _action_target_default_end(\n        self,\n        message: Button.Pressed | None = None,\n    ) -&gt; None:\n        if message:\n            message.stop()\n        new_date = Date.today_in_system_tz()\n        if not self.start_date or (new_date) &gt;= self.start_date:\n            self.end_date = new_date\n        else:\n            self.end_date = self.start_date\n\n    @on(Button.Pressed, \"#lock-button\")\n    def _lock_delta(self, message: Button.Pressed) -&gt; None:\n        message.stop()\n\n        if (\n            self.end_date\n            and self.start_date\n            and cast(\"LockButton\", message.control).locked\n        ):\n            self._date_range = self.end_date - self.start_date\n        else:\n            self._date_range = None\n            cast(\"LockButton\", message.control).locked = False\n\n    def action_clear(self) -&gt; None:\n        \"\"\"Clear the start and end dates.\"\"\"\n        self.start_date = None\n        self.end_date = None\n\n    def disable_start(self, *, disable: bool = True) -&gt; Self:\n        \"\"\"Utility method to disable start input widgets.\"\"\"\n        self.start_input.disabled = disable\n        self.overlay.query_one(\n            \"#start-date-select\", DateSelect\n        ).disabled = disable\n        self.query_one(\"#target-default-start\", Button).disabled = disable\n        return self\n\n    def disable_end(self, *, disable: bool = True) -&gt; Self:\n        \"\"\"Utility method to disable end input widgets.\"\"\"\n        self.end_input.disabled = disable\n        self.overlay.query_one(\n            \"#end-date-select\", EndDateSelect\n        ).disabled = disable\n        self.query_one(\"#target-default-end\", Button).disabled = disable\n        return self\n\n    @cached_property\n    def start_input(self) -&gt; DateInput:\n        return self.query_exactly_one(\"#start-date-input\", DateInput)\n\n    @cached_property\n    def end_input(self) -&gt; DateInput:\n        return self.query_exactly_one(\"#stop-date-input\", DateInput)\n\n    @cached_property\n    def lock_button(self) -&gt; LockButton:\n        return self.query_exactly_one(LockButton)\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>bstractPicker {\n        layers: base dialog;\n        layout: vertical;\n        height: 3;\n        width: auto;\n\n        &amp;.mini {\n            max-height: 1;\n            &amp; &gt; #input-control {\n                border: none;\n                height: 1;\n                padding: 0;\n\n                &amp;:blur {\n                    padding: 0;\n                }\n                &amp;:focus-within {\n                    padding: 0;\n                    border: none;\n                }\n                Button, AbstractInput {\n                    border: none;\n                    padding: 0;\n                    height: 1;\n\n                    &amp;:focus {\n                        color: $accent;\n                        text-style: none;\n                    }\n                    &amp;:disabled {\n                        opacity: 50%;\n                        text-style: italic;\n                    }\n                }\n            }\n        }\n\n        &amp; &gt; #input-control {\n            background: $surface;\n            width: auto;\n\n            &amp;:blur {\n                padding: 1;\n            }\n            &amp;:focus-within {\n                border: tall $primary;\n                padding: 0;\n            }\n\n            Button, AbstractInput {\n                border: none;\n                padding: 0;\n                height: 1;\n\n                &amp;:focus {\n                    color: $accent;\n                    text-style: none;\n                }\n            }\n            &amp; &gt; TargetButton {\n                min-width: 1;\n                max-width: 3;\n            }\n\n            &amp; &gt; AbstractInput {\n                padding: 0 2;\n                &amp;.-invalid {\n                    color: $error;\n                    text-style: italic;\n                }\n                &amp;:focus {\n                    tint: $primary 2%;\n                }\n            }\n        }\n        &amp; &gt; BaseOverlay {\n            border: round $secondary;\n            overlay: screen !important;\n            constrain: inside;\n            position: absolute;\n            height: auto;\n            width: auto;\n            background: $surface;\n            box-sizing: content-box;\n            opacity: 0;\n\n            &amp;:focus,\n            &amp;:focus-within {\n                border: round $primary;\n            }\n\n            &amp; &gt; BaseOverlayWidget {\n                width: 40;\n                height: auto;\n            }\n        }\n    }\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+shift+d\",\n        \"clear\",\n        \"Clear Dates\",\n        tooltip=\"Clear both the start and end date.\",\n    ),\n    Binding(\n        \"ctrl+t\",\n        \"target_default_start\",\n        \"Start To Today\",\n        tooltip=\"Set the start date to todays date.\",\n    ),\n    Binding(\n        \"alt+ctrl+t\",\n        \"target_default_end\",\n        \"End To Today\",\n        tooltip=\"Set the end date to today or the start date.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>DateTimeRangePicker</code>.</p> Key(s) Description ctrl+shift+d Clear end and start datetime. ctrl+t Set the start date to todays date. alt+ctrl+t Set the end date to today or the start date."},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker.start_date","title":"start_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_date = var[Date | None](None, init=False)\n</code></pre> <p>Picker start date. Bound to sub widgets.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker.end_date","title":"end_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_date = var[Date | None](None, init=False)\n</code></pre> <p>Picker end date. Bound to sub widgets.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker.Changed","title":"Changed","text":"<p>               Bases: <code>BaseMessage['DateRangePicker']</code></p> <p>Message sent when the date range has changed.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>class Changed(BaseMessage[\"DateRangePicker\"]):\n    \"\"\"Message sent when the date range has changed.\"\"\"\n\n    def __init__(\n        self,\n        widget: DateRangePicker,\n        start: Date | None,\n        end: Date | None,\n    ) -&gt; None:\n        super().__init__(widget)\n        self.start = start\n        self.end = end\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker.action_clear","title":"action_clear","text":"<pre><code>action_clear() -&gt; None\n</code></pre> <p>Clear the start and end dates.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>def action_clear(self) -&gt; None:\n    \"\"\"Clear the start and end dates.\"\"\"\n    self.start_date = None\n    self.end_date = None\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker.disable_start","title":"disable_start","text":"<pre><code>disable_start(*, disable: bool = True) -&gt; Self\n</code></pre> <p>Utility method to disable start input widgets.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>def disable_start(self, *, disable: bool = True) -&gt; Self:\n    \"\"\"Utility method to disable start input widgets.\"\"\"\n    self.start_input.disabled = disable\n    self.overlay.query_one(\n        \"#start-date-select\", DateSelect\n    ).disabled = disable\n    self.query_one(\"#target-default-start\", Button).disabled = disable\n    return self\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateRangePicker.disable_end","title":"disable_end","text":"<pre><code>disable_end(*, disable: bool = True) -&gt; Self\n</code></pre> <p>Utility method to disable end input widgets.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>def disable_end(self, *, disable: bool = True) -&gt; Self:\n    \"\"\"Utility method to disable end input widgets.\"\"\"\n    self.end_input.disabled = disable\n    self.overlay.query_one(\n        \"#end-date-select\", EndDateSelect\n    ).disabled = disable\n    self.query_one(\"#target-default-end\", Button).disabled = disable\n    return self\n</code></pre>"},{"location":"reference/pickers/#datetimerangepicker","title":"DateTimeRangePicker","text":"<p> DateTimeRangePickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a2025-06-0708:45:30\u25ce\ud83d\udd132025-06-0722:45:30\u25ce\u25b2\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0\u27e9\u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0\u2502 \u2502\u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u27e9\u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u2502 \u2502\u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u27e9\u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u2502 \u2502\u27e9\u2502 \u2502\u2190June\u00a02025\u25ce\u2192\u27e9\u2190June\u00a02025\u25ce\u2192\u2502 \u2502\u27e9\u2502 \u2502MonTueWedThuFriSatSun\u27e9MonTueWedThuFriSatSun\u2502 \u2502\u27e9\u2502 \u2502\u00a0\u00a01\u27e9\u00a0\u00a01\u2502 \u2502\u27e9\u2502 \u2502\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u27e9\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u2502 \u2502\u27e9\u2502 \u2502\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u27e9\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u2502 \u2502\u27e9\u2502 \u2502\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u27e9\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u2502 \u2502\u27e9\u2502 \u2502\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029\u27e9\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029\u2502 \u2502\u27e9\u2502 \u2502\u00a030\u27e9\u00a030\u2502 \u2502\u27e9\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker","title":"textual_timepiece.pickers.DateTimeRangePicker","text":"<p>               Bases: <code>AbstractPicker[DateTimeRangeOverlay]</code></p> <p>Datetime range picker with two datetime inputs.</p> PARAMETER DESCRIPTION <code>start</code> <p>Initial start datetime for the picker.</p> <p> TYPE: <code>PlainDateTime | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>Initial end datetime for the picker.</p> <p> TYPE: <code>PlainDateTime | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>DOM identifier for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>CSS classes for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>time_range</code> <p>Time range to restrict the datetimes to. If provided the picker lock will be permanently on for the widgets lifetime or re-enabled programmatically.</p> <p> TYPE: <code>TimeDelta | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether to disable the widget</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tooltip</code> <p>Tooltip to show on hover.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <p>Examples:</p> <pre><code>    def compose(self) -&gt; ComposeResult:\n        now = SystemDateTime.now().to_plain()\n        yield DateTimeRangePicker(now, time_range=TimeDelta(hours=5))\n</code></pre> <pre><code>    def compose(self) -&gt; ComposeResult:\n        yield DateTimeRangePicker(SystemDateTime.now().to_plain())\n\n    def action_stop(self) -&gt; None:\n        pick = self.query_one(DateTimeRangePicker)\n        pick.end_dt = SystemDateTime.now().to_plain()\n</code></pre> CLASS DESCRIPTION <code>Changed</code> <p>Message sent when the datetime range has changed.</p> METHOD DESCRIPTION <code>adjust_start_date</code> <p>Set or clear the current start date depending on the input.</p> <code>adjust_end_date</code> <p>Set or clear the current end date depending on the input.</p> <code>action_clear</code> <p>Clear the start and end datetimes.</p> <code>disable_start</code> <p>Utility method to disable start input widgets.</p> <code>disable_end</code> <p>Utility method to disable end input widgets.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for <code>DateTimeRangePicker</code>.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>start_dt</code> <p>Picker start datetime. Bound to all the parent widgets.</p> <p> </p> <code>end_dt</code> <p>Picker end datetime. Bound to all the parent widgets.</p> <p> </p> <code>start_date</code> <p>Start date dynamically computed depending on start datetime.</p> <p> </p> <code>end_date</code> <p>End date dynamically computed depending on the end datetime.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>class DateTimeRangePicker(AbstractPicker[DateTimeRangeOverlay]):\n    \"\"\"Datetime range picker with two datetime inputs.\n\n    Params:\n        start: Initial start datetime for the picker.\n        end: Initial end datetime for the picker.\n        name: Name for the widget.\n        id: DOM identifier for the widget.\n        classes: CSS classes for the widget\n        time_range: Time range to restrict the datetimes to. If provided the\n            picker lock will be permanently on for the widgets lifetime or\n            re-enabled programmatically.\n        disabled: Whether to disable the widget\n        tooltip: Tooltip to show on hover.\n\n    Examples:\n        ```python\n            def compose(self) -&gt; ComposeResult:\n                now = SystemDateTime.now().to_plain()\n                yield DateTimeRangePicker(now, time_range=TimeDelta(hours=5))\n        ```\n\n        ```python\n            def compose(self) -&gt; ComposeResult:\n                yield DateTimeRangePicker(SystemDateTime.now().to_plain())\n\n            def action_stop(self) -&gt; None:\n                pick = self.query_one(DateTimeRangePicker)\n                pick.end_dt = SystemDateTime.now().to_plain()\n        ```\n    \"\"\"\n\n    class Changed(BaseMessage[\"DateTimeRangePicker\"]):\n        \"\"\"Message sent when the datetime range has changed.\"\"\"\n\n        def __init__(\n            self,\n            widget: DateTimeRangePicker,\n            start: PlainDateTime | None,\n            end: PlainDateTime | None,\n        ) -&gt; None:\n            super().__init__(widget)\n            self.start = start\n            self.end = end\n\n    BINDING_GROUP_TITLE = \"Datetime Range Picker\"\n\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\n            \"ctrl+shift+d\",\n            \"clear\",\n            \"Clear\",\n            tooltip=\"Clear end and start datetime.\",\n        ),\n        Binding(\n            \"ctrl+t\",\n            \"target_default_start\",\n            \"Start To Today\",\n            tooltip=\"Set the start datetime to now.\",\n        ),\n        Binding(\n            \"alt+ctrl+t\",\n            \"target_default_end\",\n            \"End To Today\",\n            tooltip=\"Set the end datetime to now or the start datetime.\",\n        ),\n    ]\n    \"\"\"All bindings for `DateTimeRangePicker`.\n\n    | Key(s) | Description |\n    | :- | :- |\n    | ctrl+shift+d | Clear end and start datetime. |\n    | ctrl+t | Set the start datetime to now. |\n    | alt+ctrl+t | Set the end datetime to now or the start datetime. |\n    \"\"\"\n\n    start_dt = var[PlainDateTime | None](None, init=False)\n    \"\"\"Picker start datetime. Bound to all the parent widgets.\"\"\"\n    end_dt = var[PlainDateTime | None](None, init=False)\n    \"\"\"Picker end datetime. Bound to all the parent widgets.\"\"\"\n\n    start_date = var[Date | None](None, init=False)\n    \"\"\"Start date dynamically computed depending on start datetime.\"\"\"\n    end_date = var[Date | None](None, init=False)\n    \"\"\"End date dynamically computed depending on the end datetime.\"\"\"\n\n    def __init__(\n        self,\n        start: PlainDateTime | None = None,\n        end: PlainDateTime | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        *,\n        time_range: TimeDelta | None = None,\n        disabled: bool = False,\n        tooltip: str | None = None,\n    ) -&gt; None:\n        super().__init__(\n            name=name,\n            id=id,\n            classes=classes,\n            disabled=disabled,\n            tooltip=tooltip,\n        )\n        self.set_reactive(DateTimeRangePicker.start_dt, start)\n        self.set_reactive(DateTimeRangePicker.end_dt, end)\n\n        self._time_range = time_range\n\n    def compose(self) -&gt; ComposeResult:\n        with Horizontal(id=\"input-control\"):\n            yield DateTimeInput(id=\"start-dt-input\").data_bind(\n                datetime=DateTimeRangePicker.start_dt,\n            )\n\n            yield TargetButton(\n                id=\"target-default-start\",\n                tooltip=\"Set the start time to now.\",\n            )\n            yield LockButton(\n                is_locked=self._time_range is not None,\n                id=\"lock-button\",\n                tooltip=\"Lock the time range.\",\n                disabled=self._time_range is not None,\n            )\n\n            yield DateTimeInput(id=\"end-dt-input\").data_bind(\n                datetime=DateTimeRangePicker.end_dt,\n            )\n            yield TargetButton(\n                id=\"target-default-end\",\n                tooltip=\"Set the end time to now or the start time.\",\n            )\n            yield self._compose_expand_button()\n\n        yield DateTimeRangeOverlay().data_bind(\n            show=DateTimeDurationPicker.expanded,\n            start=DateTimeDurationPicker.start_date,\n            stop=DateTimeDurationPicker.end_date,\n        )\n\n    def _compute_start_date(self) -&gt; Date | None:\n        if self.start_dt is None:\n            return None\n        return self.start_dt.date()\n\n    def _compute_end_date(self) -&gt; Date | None:\n        if self.end_dt is None:\n            return None\n\n        return self.end_dt.date()\n\n    def _watch_start_dt(self, new: PlainDateTime | None) -&gt; None:\n        if new and self._time_range:\n            with self.prevent(self.Changed):\n                self.end_dt = new.add(\n                    seconds=self._time_range.in_seconds(),\n                    ignore_dst=True,\n                )\n        self.post_message(self.Changed(self, new, self.end_dt))\n\n    def _watch_end_dt(self, new: PlainDateTime | None) -&gt; None:\n        if new and self._time_range:\n            with self.prevent(self.Changed):\n                self.start_dt = new.subtract(\n                    seconds=self._time_range.in_seconds(),\n                    ignore_dst=True,\n                )\n        self.post_message(self.Changed(self, self.start_dt, new))\n\n    @on(Button.Pressed, \"#lock-button\")\n    def _lock_delta(self, message: Button.Pressed) -&gt; None:\n        message.stop()\n\n        if (\n            cast(\"LockButton\", message.control).locked\n            and self.end_dt\n            and self.start_dt\n        ):\n            self._time_range = self.end_dt.difference(\n                self.start_dt, ignore_dst=True\n            )\n        else:\n            self._time_range = None\n            cast(\"LockButton\", message.control).locked = False\n\n    @on(DateSelect.StartChanged)\n    @on(DateSelect.EndChanged)\n    def _dialog_date_changed(self, message: DateSelect.StartChanged) -&gt; None:\n        message.stop()\n        if isinstance(message, DateSelect.StartChanged):\n            self.adjust_start_date(message.date)\n        else:\n            self.adjust_end_date(message.date)\n\n    def adjust_start_date(self, date: Date | None) -&gt; None:\n        \"\"\"Set or clear the current start date depending on the input.\"\"\"\n        if self.start_dt and date:\n            self.start_dt = self.start_dt.replace_date(date)\n        elif date:\n            self.start_dt = date.at(Time())\n        else:\n            self.start_dt = date\n\n    def adjust_end_date(self, date: Date | None) -&gt; None:\n        \"\"\"Set or clear the current end date depending on the input.\"\"\"\n        if self.end_dt and date:\n            self.end_dt = self.end_dt.replace_date(date)\n        elif date:\n            self.end_dt = date.at(Time())\n        else:\n            self.end_dt = date\n\n    def action_clear(self) -&gt; None:\n        \"\"\"Clear the start and end datetimes.\"\"\"\n        self.start_dt = None\n        self.end_dt = None\n\n    @on(DurationSelect.Rounded)\n    def _round_duration(self, message: DurationSelect.Rounded) -&gt; None:\n        message.stop()\n        if message.widget.id == \"start-time-select\":\n            if self.start_dt is None:\n                return\n            time = round_time(self.start_dt.time(), message.value)\n            self.start_dt = self.start_dt.replace_time(time)\n\n        elif self.end_dt:\n            time = round_time(self.end_dt.time(), message.value)\n            self.end_dt = self.end_dt.replace_time(time)\n\n    @on(DurationSelect.Adjusted)\n    def _adjust_duration(self, message: DurationSelect.Adjusted) -&gt; None:\n        message.stop()\n        if message.widget.id == \"start-time-select\":\n            if self.start_dt is None:\n                return\n            self.start_dt = self.start_dt.add(message.delta, ignore_dst=True)\n        elif self.end_dt:\n            self.end_dt = self.end_dt.add(message.delta, ignore_dst=True)\n        elif self.start_dt:\n            self.end_dt = self.start_dt.add(message.delta, ignore_dst=True)\n\n    @on(DateTimeInput.Updated, \"#start-dt-input\")\n    def _start_dt_input_changed(\n        self,\n        message: DateTimeInput.Updated,\n    ) -&gt; None:\n        message.stop()\n        with message.control.prevent(DateTimeInput.Updated):\n            self.start_dt = message.datetime\n\n    @on(DateTimeInput.Updated, \"#end-dt-input\")\n    def _end_dt_input_changed(self, message: DateTimeInput.Updated) -&gt; None:\n        message.stop()\n        with message.control.prevent(DateTimeInput.Updated):\n            self.end_dt = message.datetime\n\n    def disable_start(self, *, disable: bool = True) -&gt; Self:\n        \"\"\"Utility method to disable start input widgets.\"\"\"\n        self.start_input.disabled = disable\n        self.overlay.query_one(\"#start-column\", Vertical).disabled = disable\n        self.query_one(\"#target-default-start\", Button).disabled = disable\n        return self\n\n    def disable_end(self, *, disable: bool = True) -&gt; Self:\n        \"\"\"Utility method to disable end input widgets.\"\"\"\n        self.end_input.disabled = disable\n        self.overlay.query_one(\"#end-column\", Vertical).disabled = disable\n        self.query_one(\"#target-default-end\", Button).disabled = disable\n        return self\n\n    @on(Button.Pressed, \"#target-default-start\")\n    def _action_target_default_start(\n        self,\n        message: Button.Pressed | None = None,\n    ) -&gt; None:\n        if message:\n            message.stop()\n        self.start_dt = SystemDateTime.now().to_plain()\n\n    @on(Button.Pressed, \"#target-default-end\")\n    def _action_target_default_end(\n        self,\n        message: Button.Pressed | None = None,\n    ) -&gt; None:\n        if message:\n            message.stop()\n        now = SystemDateTime.now().to_plain()\n        if not self.start_dt or now &gt;= self.start_dt:\n            self.end_dt = now\n        else:\n            self.end_dt = self.start_dt\n\n    @cached_property\n    def start_input(self) -&gt; DateTimeInput:\n        return self.query_exactly_one(\"#start-dt-input\", DateTimeInput)\n\n    @cached_property\n    def end_input(self) -&gt; DateTimeInput:\n        return self.query_exactly_one(\"#end-dt-input\", DateTimeInput)\n\n    @cached_property\n    def lock_button(self) -&gt; LockButton:\n        return self.query_exactly_one(LockButton)\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>bstractPicker {\n        layers: base dialog;\n        layout: vertical;\n        height: 3;\n        width: auto;\n\n        &amp;.mini {\n            max-height: 1;\n            &amp; &gt; #input-control {\n                border: none;\n                height: 1;\n                padding: 0;\n\n                &amp;:blur {\n                    padding: 0;\n                }\n                &amp;:focus-within {\n                    padding: 0;\n                    border: none;\n                }\n                Button, AbstractInput {\n                    border: none;\n                    padding: 0;\n                    height: 1;\n\n                    &amp;:focus {\n                        color: $accent;\n                        text-style: none;\n                    }\n                    &amp;:disabled {\n                        opacity: 50%;\n                        text-style: italic;\n                    }\n                }\n            }\n        }\n\n        &amp; &gt; #input-control {\n            background: $surface;\n            width: auto;\n\n            &amp;:blur {\n                padding: 1;\n            }\n            &amp;:focus-within {\n                border: tall $primary;\n                padding: 0;\n            }\n\n            Button, AbstractInput {\n                border: none;\n                padding: 0;\n                height: 1;\n\n                &amp;:focus {\n                    color: $accent;\n                    text-style: none;\n                }\n            }\n            &amp; &gt; TargetButton {\n                min-width: 1;\n                max-width: 3;\n            }\n\n            &amp; &gt; AbstractInput {\n                padding: 0 2;\n                &amp;.-invalid {\n                    color: $error;\n                    text-style: italic;\n                }\n                &amp;:focus {\n                    tint: $primary 2%;\n                }\n            }\n        }\n        &amp; &gt; BaseOverlay {\n            border: round $secondary;\n            overlay: screen !important;\n            constrain: inside;\n            position: absolute;\n            height: auto;\n            width: auto;\n            background: $surface;\n            box-sizing: content-box;\n            opacity: 0;\n\n            &amp;:focus,\n            &amp;:focus-within {\n                border: round $primary;\n            }\n\n            &amp; &gt; BaseOverlayWidget {\n                width: 40;\n                height: auto;\n            }\n        }\n    }\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+shift+d\",\n        \"clear\",\n        \"Clear\",\n        tooltip=\"Clear end and start datetime.\",\n    ),\n    Binding(\n        \"ctrl+t\",\n        \"target_default_start\",\n        \"Start To Today\",\n        tooltip=\"Set the start datetime to now.\",\n    ),\n    Binding(\n        \"alt+ctrl+t\",\n        \"target_default_end\",\n        \"End To Today\",\n        tooltip=\"Set the end datetime to now or the start datetime.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>DateTimeRangePicker</code>.</p> Key(s) Description ctrl+shift+d Clear end and start datetime. ctrl+t Set the start datetime to now. alt+ctrl+t Set the end datetime to now or the start datetime."},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.start_dt","title":"start_dt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_dt = var[PlainDateTime | None](None, init=False)\n</code></pre> <p>Picker start datetime. Bound to all the parent widgets.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.end_dt","title":"end_dt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_dt = var[PlainDateTime | None](None, init=False)\n</code></pre> <p>Picker end datetime. Bound to all the parent widgets.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.start_date","title":"start_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_date = var[Date | None](None, init=False)\n</code></pre> <p>Start date dynamically computed depending on start datetime.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.end_date","title":"end_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_date = var[Date | None](None, init=False)\n</code></pre> <p>End date dynamically computed depending on the end datetime.</p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.Changed","title":"Changed","text":"<p>               Bases: <code>BaseMessage['DateTimeRangePicker']</code></p> <p>Message sent when the datetime range has changed.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>class Changed(BaseMessage[\"DateTimeRangePicker\"]):\n    \"\"\"Message sent when the datetime range has changed.\"\"\"\n\n    def __init__(\n        self,\n        widget: DateTimeRangePicker,\n        start: PlainDateTime | None,\n        end: PlainDateTime | None,\n    ) -&gt; None:\n        super().__init__(widget)\n        self.start = start\n        self.end = end\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.adjust_start_date","title":"adjust_start_date","text":"<pre><code>adjust_start_date(date: Date | None) -&gt; None\n</code></pre> <p>Set or clear the current start date depending on the input.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>def adjust_start_date(self, date: Date | None) -&gt; None:\n    \"\"\"Set or clear the current start date depending on the input.\"\"\"\n    if self.start_dt and date:\n        self.start_dt = self.start_dt.replace_date(date)\n    elif date:\n        self.start_dt = date.at(Time())\n    else:\n        self.start_dt = date\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.adjust_end_date","title":"adjust_end_date","text":"<pre><code>adjust_end_date(date: Date | None) -&gt; None\n</code></pre> <p>Set or clear the current end date depending on the input.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>def adjust_end_date(self, date: Date | None) -&gt; None:\n    \"\"\"Set or clear the current end date depending on the input.\"\"\"\n    if self.end_dt and date:\n        self.end_dt = self.end_dt.replace_date(date)\n    elif date:\n        self.end_dt = date.at(Time())\n    else:\n        self.end_dt = date\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.action_clear","title":"action_clear","text":"<pre><code>action_clear() -&gt; None\n</code></pre> <p>Clear the start and end datetimes.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>def action_clear(self) -&gt; None:\n    \"\"\"Clear the start and end datetimes.\"\"\"\n    self.start_dt = None\n    self.end_dt = None\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.disable_start","title":"disable_start","text":"<pre><code>disable_start(*, disable: bool = True) -&gt; Self\n</code></pre> <p>Utility method to disable start input widgets.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>def disable_start(self, *, disable: bool = True) -&gt; Self:\n    \"\"\"Utility method to disable start input widgets.\"\"\"\n    self.start_input.disabled = disable\n    self.overlay.query_one(\"#start-column\", Vertical).disabled = disable\n    self.query_one(\"#target-default-start\", Button).disabled = disable\n    return self\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeRangePicker.disable_end","title":"disable_end","text":"<pre><code>disable_end(*, disable: bool = True) -&gt; Self\n</code></pre> <p>Utility method to disable end input widgets.</p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>def disable_end(self, *, disable: bool = True) -&gt; Self:\n    \"\"\"Utility method to disable end input widgets.\"\"\"\n    self.end_input.disabled = disable\n    self.overlay.query_one(\"#end-column\", Vertical).disabled = disable\n    self.query_one(\"#target-default-end\", Button).disabled = disable\n    return self\n</code></pre>"},{"location":"reference/pickers/#datetimedurationpicker","title":"DateTimeDurationPicker","text":"<p> DateTimeDurationPickerApp \u258a\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u2594\u258e \u258a2025-02-1012:13:00\u25ce29:00:00\ud83d\udd132025-02-1117:13:00\u25ce\u25b2\u258e \u258a\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u258e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0\u27e9\u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0\u2502 \u2502\u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u27e9\u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u2502 \u2502\u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u27e9\u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u2502 \u2502\u27e9\u2502 \u2502\u2190February\u00a02025\u25ce\u2192\u27e9\u2190February\u00a02025\u25ce\u2192\u2502 \u2502\u27e9\u2502 \u2502MonTueWedThuFriSatSun\u27e9MonTueWedThuFriSatSun\u2502 \u2502\u27e9\u2502 \u2502\u00a0\u00a01\u00a0\u00a02\u27e9\u00a0\u00a01\u00a0\u00a02\u2502 \u2502\u27e9\u2502 \u2502\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u00a0\u00a09\u27e9\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u00a0\u00a09\u2502 \u2502\u27e9\u2502 \u2502\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u00a016\u27e9\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u00a016\u2502 \u2502\u27e9\u2502 \u2502\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u00a023\u27e9\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u00a023\u2502 \u2502\u27e9\u2502 \u2502\u00a024\u00a025\u00a026\u00a027\u00a028\u27e9\u00a024\u00a025\u00a026\u00a027\u00a028\u2502 \u2502\u27e9\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeDurationPicker","title":"textual_timepiece.pickers.DateTimeDurationPicker","text":"<p>               Bases: <code>DateTimeRangePicker</code></p> <p>Datetime range with a duration input in the middle.</p> <p>Duration display up to 99:99:99. Use the DateTimeRangePicker picker if a longer duration is required.</p> PARAMETER DESCRIPTION <code>start</code> <p>Initial start datetime for the picker.</p> <p> TYPE: <code>PlainDateTime | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>Initial end datetime for the picker.</p> <p> TYPE: <code>PlainDateTime | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>DOM identifier for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>CSS classes for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>time_range</code> <p>Time range to restrict the datetimes to. If provided the picker lock will be permanently on for the widgets lifetime or re-enabled programmatically.</p> <p> TYPE: <code>TimeDelta | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether to disable the widget</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tooltip</code> <p>Tooltip to show on hover.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for <code>DateTimeRangePicker</code>.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>duration</code> <p>Duration between start and end datetimes. Computed dynamically.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_timerange_picker.py</code> <pre><code>class DateTimeDurationPicker(DateTimeRangePicker):\n    \"\"\"Datetime range with a duration input in the middle.\n\n    Duration display up to 99:99:99. Use the DateTimeRangePicker picker if a\n    longer duration is required.\n\n    Params:\n        start: Initial start datetime for the picker.\n        end: Initial end datetime for the picker.\n        name: Name for the widget.\n        id: DOM identifier for the widget.\n        classes: CSS classes for the widget\n        time_range: Time range to restrict the datetimes to. If provided the\n            picker lock will be permanently on for the widgets lifetime or\n            re-enabled programmatically.\n        disabled: Whether to disable the widget\n        tooltip: Tooltip to show on hover.\n    \"\"\"\n\n    duration = var[TimeDelta | None](None, init=False)\n    \"\"\"Duration between start and end datetimes. Computed dynamically.\"\"\"\n\n    async def _on_mount(self) -&gt; None:  # type: ignore[override] # NOTE: Need to mount extra widget\n        \"\"\"Overrides the compose method in order to a duration input.\"\"\"\n        await self.query_exactly_one(\"#input-control\", Horizontal).mount(\n            DurationInput(self.duration, id=\"duration-input\").data_bind(\n                DateTimeDurationPicker.duration\n            ),\n            after=1,\n        )\n\n    def _compute_duration(self) -&gt; TimeDelta:\n        if self.start_dt is None or self.end_dt is None:\n            return TimeDelta()\n        return self.end_dt.difference(self.start_dt, ignore_dst=True)\n\n    @on(DurationInput.Updated)\n    def _new_duration(self, message: DurationInput.Updated) -&gt; None:\n        message.stop()\n        with message.control.prevent(DurationInput.Updated):\n            if message.duration is None:\n                self.end_dt = None\n            elif self.start_dt:\n                self.end_dt = self.start_dt.add(\n                    seconds=message.duration.in_seconds(),\n                    ignore_dst=True,\n                )\n            elif self.end_dt:\n                self.start_dt = self.end_dt.subtract(\n                    seconds=message.duration.in_seconds(),\n                    ignore_dst=True,\n                )\n\n    @on(Button.Pressed, \"#lock-button\")\n    def _lock_duration(self, message: Button.Pressed) -&gt; None:\n        message.stop()\n        if self.start_date:\n            self.duration_input.disabled = cast(\n                \"LockButton\", message.button\n            ).locked\n\n    @cached_property\n    def duration_input(self) -&gt; DurationInput:\n        return self.query_exactly_one(DurationInput)\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeDurationPicker.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>bstractPicker {\n        layers: base dialog;\n        layout: vertical;\n        height: 3;\n        width: auto;\n\n        &amp;.mini {\n            max-height: 1;\n            &amp; &gt; #input-control {\n                border: none;\n                height: 1;\n                padding: 0;\n\n                &amp;:blur {\n                    padding: 0;\n                }\n                &amp;:focus-within {\n                    padding: 0;\n                    border: none;\n                }\n                Button, AbstractInput {\n                    border: none;\n                    padding: 0;\n                    height: 1;\n\n                    &amp;:focus {\n                        color: $accent;\n                        text-style: none;\n                    }\n                    &amp;:disabled {\n                        opacity: 50%;\n                        text-style: italic;\n                    }\n                }\n            }\n        }\n\n        &amp; &gt; #input-control {\n            background: $surface;\n            width: auto;\n\n            &amp;:blur {\n                padding: 1;\n            }\n            &amp;:focus-within {\n                border: tall $primary;\n                padding: 0;\n            }\n\n            Button, AbstractInput {\n                border: none;\n                padding: 0;\n                height: 1;\n\n                &amp;:focus {\n                    color: $accent;\n                    text-style: none;\n                }\n            }\n            &amp; &gt; TargetButton {\n                min-width: 1;\n                max-width: 3;\n            }\n\n            &amp; &gt; AbstractInput {\n                padding: 0 2;\n                &amp;.-invalid {\n                    color: $error;\n                    text-style: italic;\n                }\n                &amp;:focus {\n                    tint: $primary 2%;\n                }\n            }\n        }\n        &amp; &gt; BaseOverlay {\n            border: round $secondary;\n            overlay: screen !important;\n            constrain: inside;\n            position: absolute;\n            height: auto;\n            width: auto;\n            background: $surface;\n            box-sizing: content-box;\n            opacity: 0;\n\n            &amp;:focus,\n            &amp;:focus-within {\n                border: round $primary;\n            }\n\n            &amp; &gt; BaseOverlayWidget {\n                width: 40;\n                height: auto;\n            }\n        }\n    }\n</code></pre>"},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeDurationPicker.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+shift+d\",\n        \"clear\",\n        \"Clear\",\n        tooltip=\"Clear end and start datetime.\",\n    ),\n    Binding(\n        \"ctrl+t\",\n        \"target_default_start\",\n        \"Start To Today\",\n        tooltip=\"Set the start datetime to now.\",\n    ),\n    Binding(\n        \"alt+ctrl+t\",\n        \"target_default_end\",\n        \"End To Today\",\n        tooltip=\"Set the end datetime to now or the start datetime.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>DateTimeRangePicker</code>.</p> Key(s) Description ctrl+shift+d Clear end and start datetime. ctrl+t Set the start datetime to now. alt+ctrl+t Set the end datetime to now or the start datetime."},{"location":"reference/pickers/#textual_timepiece.pickers.DateTimeDurationPicker.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration = var[TimeDelta | None](None, init=False)\n</code></pre> <p>Duration between start and end datetimes. Computed dynamically.</p>"},{"location":"reference/selectors/","title":"Selectors","text":""},{"location":"reference/selectors/#dateselect","title":"DateSelect","text":"<p> DateSelectApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\u2502 \u2502\u2190June\u00a02025\u25ce\u2192\u2502 \u2502\u2502 \u2502MonTueWedThuFriSatSun\u2502 \u2502\u2502 \u2502\u00a0\u00a01\u2502 \u2502\u2502 \u2502\u00a0\u00a02\u00a0\u00a03\u00a0\u00a04\u00a0\u00a05\u00a0\u00a06\u00a0\u00a07\u00a0\u00a08\u2502 \u2502\u2502 \u2502\u00a0\u00a09\u00a010\u00a011\u00a012\u00a013\u00a014\u00a015\u2502 \u2502\u2502 \u2502\u00a016\u00a017\u00a018\u00a019\u00a020\u00a021\u00a022\u2502 \u2502\u2502 \u2502\u00a023\u00a024\u00a025\u00a026\u00a027\u00a028\u00a029\u2502 \u2502\u2502 \u2502\u00a030\u2502 \u2502\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect","title":"textual_timepiece.pickers.DateSelect","text":"<p>               Bases: <code>BaseOverlayWidget</code></p> <p>Date selection widget for selecting dates and date-ranges visually.</p> <p>Supports mouse and keyboard navigation with arrow keys.</p> INFO <p>Control+Click/Enter will go back in scope with the top header.</p> PARAMETER DESCRIPTION <code>start</code> <p>Initial start date for the widget.</p> <p> TYPE: <code>Date | None</code> DEFAULT: <code>None</code> </p> <code>end</code> <p>Initial end date for the widget.</p> <p> TYPE: <code>Date | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>Name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>Unique dom id for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>Any CSS classes that should be added to the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>is_range</code> <p>Whether the selection is a range. Automatically true if an 'end_date' or 'date_range' parameter is supplied.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>disabled</code> <p>Whether to disable the widget.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>select_on_focus</code> <p>Whether to place a keyboard cursor on widget focus.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>date_range</code> <p>Whether to restrict the dates to a certain range. Will automatically convert to absolute values.</p> <p> TYPE: <code>DateDelta | None</code> DEFAULT: <code>None</code> </p> CLASS DESCRIPTION <code>Changed</code> <p>Base message for when dates are changed.</p> <code>StartChanged</code> <p>Message sent when the start date changed.</p> <code>EndChanged</code> <p>Message sent when the end date changed.</p> METHOD DESCRIPTION <code>action_move_cursor</code> <p>Move cursor to the next spot depending on direction.</p> <code>action_select_cursor</code> <p>Triggers the functionality for what is below the keyboard cursor.</p> <code>is_day_in_range</code> <p>Checks if a given date is within selected the date range(inclusive).</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p>Default CSS for the <code>DateSelect</code> widget.</p> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for DateSelect</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>COMPONENT_CLASSES</code> <p>All component classes for DateSelect.</p> <p> TYPE: <code>set[str]</code> </p> <code>date</code> <p>Start date. Bound to base dialog if using with a prebuilt picker.</p> <p> </p> <code>date_range</code> <p>Constant date range in between the start and end dates.</p> <p> </p> <code>end_date</code> <p>End date for date ranges.</p> <p> </p> <code>scope</code> <p>Scope of the current date picker view.</p> <p> </p> <code>loc</code> <p>Current location of the date picker for navigation.</p> <p> </p> <code>data</code> <p>Data for displaying date info.</p> <p> </p> <code>header</code> <p>Navigation date header is computed dynamically.</p> <p> </p> <code>cursor_offset</code> <p>Mouse cursor position for mouse navigation.</p> <p> </p> <code>cursor</code> <p>Keyboard cursor position.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>class DateSelect(BaseOverlayWidget):\n    \"\"\"Date selection widget for selecting dates and date-ranges visually.\n\n    Supports mouse and keyboard navigation with arrow keys.\n\n    INFO:\n        Control+Click/Enter will go back in scope with the top header.\n\n    Params:\n        start: Initial start date for the widget.\n        end: Initial end date for the widget.\n        name: Name of the widget.\n        id: Unique dom id for the widget\n        classes: Any CSS classes that should be added to the widget.\n        is_range: Whether the selection is a range. Automatically true if an\n            'end_date' or 'date_range' parameter is supplied.\n        disabled: Whether to disable the widget.\n        select_on_focus: Whether to place a keyboard cursor on widget focus.\n        date_range: Whether to restrict the dates to a certain range.\n            Will automatically convert to absolute values.\n    \"\"\"\n\n    class Changed(BaseMessage[\"DateSelect\"]):\n        \"\"\"Base message for when dates are changed.\"\"\"\n\n        def __init__(self, widget: DateSelect, date: Date | None) -&gt; None:\n            super().__init__(widget)\n            self.date = date\n\n        @property\n        def value(self) -&gt; Date | None:\n            \"\"\"Alias for `date` attribute.\"\"\"\n            return self.date\n\n    class StartChanged(Changed):\n        \"\"\"Message sent when the start date changed.\"\"\"\n\n    class EndChanged(Changed):\n        \"\"\"Message sent when the end date changed.\"\"\"\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    DateSelect {\n        background: $surface;\n        width: auto;\n        border: round $secondary;\n\n        .dateselect--primary-date {\n            color: $primary;\n        }\n\n        .dateselect--secondary-date {\n            color: $secondary;\n        }\n\n        .dateselect--range-date {\n            background: $panel-darken-3;\n        }\n\n        .dateselect--hovered-date {\n            color: $accent;\n            text-style: bold;\n        }\n\n        .dateselect--cursor-date {\n            color: $accent;\n            text-style: reverse bold;\n        }\n\n        .dateselect--start-date {\n            color: $accent-lighten-3;\n            text-style: italic;\n        }\n\n        .dateselect--end-date {\n            color: $accent-lighten-3;\n            text-style: italic;\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for the `DateSelect` widget.\"\"\"\n\n    BINDING_GROUP_TITLE = \"Date Select\"\n\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\n            \"up\",\n            \"move_cursor('up')\",\n            tooltip=\"Move the cursor up.\",\n        ),\n        Binding(\n            \"right\",\n            \"move_cursor('right')\",\n            tooltip=\"Move cursor to the right.\",\n        ),\n        Binding(\n            \"down\",\n            \"move_cursor('down')\",\n            tooltip=\"Move the cursor down.\",\n        ),\n        Binding(\n            \"left\",\n            \"move_cursor('left')\",\n            tooltip=\"Move the cursor to the left.\",\n        ),\n        Binding(\n            \"enter\",\n            \"select_cursor\",\n            tooltip=\"Navigate or select to the hovered part.\",\n        ),\n        Binding(\n            \"ctrl+enter\",\n            \"select_cursor(True)\",\n            tooltip=\"Reverse Navigate or select to the hovered part.\",\n        ),\n    ]\n    \"\"\"All bindings for DateSelect\n\n    | Key(s) | Description |\n    | :- | :- |\n    | up | Move the cursor up. |\n    | right | Move cursor to the right. |\n    | down | Move the cursor down. |\n    | left | Move the cursor to the left. |\n    | enter | Navigate or select to the hovered part. |\n    | ctrl+enter | Reverse Navigate or select to the hovered part. |\n    \"\"\"\n\n    COMPONENT_CLASSES: ClassVar[set[str]] = {\n        \"dateselect--start-date\",\n        \"dateselect--end-date\",\n        \"dateselect--cursor-date\",\n        \"dateselect--hovered-date\",  # NOTE: Only affects the foreground\n        \"dateselect--secondary-date\",\n        \"dateselect--primary-date\",\n        \"dateselect--range-date\",  # NOTE: Only affects the background.\n    }\n    \"\"\"All component classes for DateSelect.\n\n    | Class | Description |\n    | :- | :- |\n    | `dateselect--cursor-date` | Color of label under the keyboard cursor. |\n    | `dateselect--end-date` | Color of the selected end date if enabled. |\n    | `dateselect--hovered-date` | Color of the mouse hovered date. |\n    | `dateselect--primary-date` | Standard color of unselected dates. |\n    | `dateselect--range-date` | Color of any dates if both end and start date\\\n            are selected |\n    | `dateselect--secondary-date` | Color of weekdays labels in month view. |\n    | `dateselect--start-date` | Color of selected start date. |\n    \"\"\"\n\n    date = reactive[Date | None](None, init=False)\n    \"\"\"Start date. Bound to base dialog if using with a prebuilt picker.\"\"\"\n\n    date_range = var[DateDelta | None](None, init=False)\n    \"\"\"Constant date range in between the start and end dates.\"\"\"\n\n    end_date = reactive[Date | None](None, init=False)\n    \"\"\"End date for date ranges.\n\n    Bound to base dialog if using with a prebuilt picker.\n    \"\"\"\n\n    scope = var[DateScope](DateScope.MONTH)\n    \"\"\"Scope of the current date picker view.\"\"\"\n\n    loc = reactive[Date](Date.today_in_system_tz, init=False)\n    \"\"\"Current location of the date picker for navigation.\"\"\"\n\n    data = reactive[DisplayData](list, init=False, layout=True)\n    \"\"\"Data for displaying date info.\n\n    Layout required as the size might differ between months.\n    \"\"\"\n\n    header = reactive[str](\"\", init=False)\n    \"\"\"Navigation date header is computed dynamically.\"\"\"\n\n    cursor_offset = reactive[Offset | None](None, init=False)\n    \"\"\"Mouse cursor position for mouse navigation.\"\"\"\n\n    cursor = reactive[DateCursor | None](None, init=False)\n    \"\"\"Keyboard cursor position.\"\"\"\n\n    def __init__(\n        self,\n        start: Date | None = None,\n        end: Date | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        *,\n        is_range: bool = False,\n        disabled: bool = False,\n        select_on_focus: bool = True,\n        date_range: DateDelta | None = None,\n    ) -&gt; None:\n        super().__init__(name=name, id=id, classes=classes, disabled=disabled)\n        self._is_range = is_range or bool(end) or bool(date_range)\n\n        self._select_on_focus = select_on_focus\n\n        self.set_reactive(DateSelect.date, start)\n        self.set_reactive(DateSelect.end_date, end)\n        self.set_reactive(DateSelect.date_range, date_range)\n\n    def _compute_header(self) -&gt; str:\n        if self.scope == DateScope.YEAR:\n            return str(self.loc.year)\n\n        if self.scope == DateScope.DECADE:\n            start = math.floor(self.loc.year / 10) * 10\n            return f\"{start} &lt;-&gt; {start + 9}\"\n\n        if self.scope == DateScope.CENTURY:\n            start = math.floor(self.loc.year / 100) * 100\n            return f\"{start} &lt;-&gt; {start + 99}\"\n\n        return f\"{month_name[self.loc.month]} {self.loc.year}\"\n\n    def _validate_date_range(\n        self,\n        date_range: DateDelta | None,\n    ) -&gt; DateDelta | None:\n        if date_range is None:\n            return None\n        return abs(date_range)\n\n    def _watch_date_range(self, new: DateDelta | None) -&gt; None:\n        if new is None:\n            return\n        self._is_range = True\n        if self.date:\n            self.end_date = self.date.add(new)\n        elif self.end_date:\n            self.date = self.end_date.subtract(new)\n\n    def _watch_scope(self, scope: DateScope) -&gt; None:\n        self.data = get_scope(scope, self.loc)\n        if self.cursor:\n            self._find_move()\n\n    def _watch_date(self, date: Date | None) -&gt; None:\n        self.scope = DateScope.MONTH\n        if date:\n            if self.date_range:\n                self.end_date = date.add(self.date_range)\n\n            self.loc = date\n\n    def _watch_loc(self, loc: Date) -&gt; None:\n        self.data = get_scope(self.scope, loc)\n\n        if self.cursor:\n            self.cursor = self.cursor.confine(self.data)\n\n    async def _on_mouse_move(self, event: MouseMove) -&gt; None:\n        self.cursor_offset = event.offset\n\n    def _on_leave(self, event: Leave) -&gt; None:\n        self.cursor_offset = None\n\n    def _on_blur(self, event: Blur) -&gt; None:\n        self.cursor = None\n\n    def _on_focus(self, event: Focus) -&gt; None:\n        if self._select_on_focus:\n            self.cursor = DateCursor()\n\n    def _on_date_select_start_changed(\n        self,\n        message: DateSelect.StartChanged,\n    ) -&gt; None:\n        self.date = message.date\n        if self.date_range and message.date:\n            self.end_date = message.date.add(self.date_range)\n\n    def _on_date_select_end_changed(\n        self,\n        message: DateSelect.EndChanged,\n    ) -&gt; None:\n        self.end_date = message.date\n        if self.date_range and message.date:\n            self.date = message.date.subtract(self.date_range)\n\n    async def _on_click(self, event: Click) -&gt; None:\n        target = self.get_line_offset(event.offset)\n        self._navigate_picker(target, ctrl=event.ctrl)\n\n    def action_move_cursor(self, direction: Directions) -&gt; None:\n        \"\"\"Move cursor to the next spot depending on direction.\"\"\"\n        if self.cursor is None:\n            self.log.debug(\"Cursor does not exist. Placing default location.\")\n            self.cursor = DateCursor()\n        elif direction == \"up\":\n            self._find_move(y=-1)\n        elif direction == \"right\":\n            self._find_move(x=1)\n        elif direction == \"down\":\n            self._find_move(y=1)\n        elif direction == \"left\":\n            self._find_move(x=-1)\n\n    def _find_move(self, *, y: int = 0, x: int = 0) -&gt; None:\n        cursor = cast(\"DateCursor\", self.cursor)\n        if (new_y := cursor.y + y) == 0:\n            new_x = cursor.x + x\n            if cursor.y != 0:\n                # NOTE: Making sure different row lengths align.\n                new_x = math.ceil(((cursor.x) / len(self.data[0])) * 3)\n\n            self.cursor = cursor.replace(y=new_y, x=new_x).confine(self.data)\n\n        elif y and 0 &lt;= new_y &lt;= len(self.data):\n            new_x = cursor.x\n            if cursor.y == 0:\n                # NOTE: Making sure different row lengths align.\n                new_x = math.ceil(((cursor.x) / 3) * len(self.data[0]))\n\n            self.cursor = cursor.replace(y=new_y, x=new_x).confine(self.data)\n\n        elif x and 0 &lt;= (new_x := cursor.x + x) &lt; len(self.data[cursor.y - 1]):\n            self.cursor = cursor.replace(x=new_x).confine(self.data)\n\n    def _set_date(self, target: str | int, *, ctrl: bool) -&gt; None:\n        try:\n            value = int(target)\n            date = min(Date.MAX, max(Date.MIN, self.loc.replace(day=value)))\n        except ValueError:\n            return\n        if ctrl:\n            self.post_message(self.EndChanged(self, date))\n        else:\n            self.post_message(self.StartChanged(self, date))\n\n    def _set_month(self, target: str) -&gt; None:\n        try:\n            month_no = list(month_name).index(target)\n        except IndexError:\n            return\n        else:\n            self.set_reactive(\n                DateSelect.loc,\n                Date(self.loc.year, month_no, self.loc.day),\n            )\n            self.scope = DateScope.MONTH\n\n    def _set_years(self, target: str | int) -&gt; None:\n        if self.scope == DateScope.CENTURY and isinstance(target, str):\n            target = target.split(\"-\")[0]\n        try:\n            value = max(1, min(int(target), 9999))\n        except ValueError:\n            return\n        else:\n            self.set_reactive(DateSelect.loc, self.loc.replace(year=value))\n            self.scope = DateScope(self.scope.value - 1)\n\n    def _set_target(self, target: str | int, *, ctrl: bool = False) -&gt; None:\n        if self.scope == DateScope.MONTH:\n            self._set_date(target, ctrl=ctrl)\n        elif self.scope == DateScope.YEAR:\n            self._set_month(cast(\"str\", target))\n        else:\n            self._set_years(target)\n\n    def check_action(\n        self, action: str, parameters: tuple[object, ...]\n    ) -&gt; bool | None:\n        if action == \"select_cursor\":\n            return self.cursor is not None\n\n        return True\n\n    def action_select_cursor(self, ctrl: bool = False) -&gt; None:\n        \"\"\"Triggers the functionality for what is below the keyboard cursor.\"\"\"\n        cursor = cast(\"DateCursor\", self.cursor)\n        if cursor.y == 0:\n            nav = (\n                LEFT_ARROW,\n                self.header,\n                TARGET_ICON,\n                RIGHT_ARROW,\n            )\n            self._navigate_picker(nav[cursor.x], ctrl=ctrl)\n        else:\n            self._navigate_picker(self.data[cursor.y - 1][cursor.x], ctrl=ctrl)\n\n    def _navigate_picker(self, target: str | int, *, ctrl: bool) -&gt; None:\n        if target == LEFT_ARROW:\n            self._crement_scope(-1)\n        elif target == TARGET_ICON:\n            self._set_current_scope()\n        elif target == RIGHT_ARROW:\n            self._crement_scope(1)\n        elif target == self.header:\n            if ctrl:\n                self.scope = DateScope(max(self.scope.value - 1, 1))\n            else:\n                self.scope = DateScope(min(self.scope.value + 1, 4))\n        elif target or isinstance(target, int):\n            self._set_target(target, ctrl=ctrl and self._is_range)\n\n    def _set_current_scope(self) -&gt; None:\n        self.scope = DateScope.MONTH\n        self.loc = self.date or self.end_date or Date.today_in_system_tz()\n\n    def _crement_scope(self, value: int) -&gt; None:\n        with suppress(ValueError):  # NOTE: Preventing out of range values.\n            if self.scope == DateScope.MONTH:\n                self.loc = self.loc.add(months=value)\n            elif self.scope == DateScope.YEAR:\n                self.loc = self.loc.add(years=value)\n            elif self.scope == DateScope.DECADE:\n                self.loc = self.loc.add(years=10 * value)\n            else:\n                self.loc = self.loc.add(years=100 * value)\n\n    def _filter_style(\n        self,\n        y: int,\n        x: range,\n        date: Date | None = None,\n        log_idx: DateCursor | None = None,\n    ) -&gt; Style:\n        \"\"\"Filters a rich style based on location data.\n\n        Args:\n            y: Current row being rendered.\n            x: Range of indexes to target.\n            date: If a date is being filtered.\n            log_idx: Logical index for rendering the keyboard cursor.\n\n        Returns:\n            Combined style with all the properties that matched.\n        \"\"\"\n        styles = [self.get_component_rich_style(\"dateselect--primary-date\")]\n\n        if date:\n            if date == self.date:\n                styles.append(\n                    self.get_component_rich_style(\"dateselect--start-date\")\n                )\n            elif date == self.end_date:\n                styles.append(\n                    self.get_component_rich_style(\"dateselect--end-date\")\n                )\n\n            if self.is_day_in_range(date):\n                styles.append(\n                    self.get_component_rich_style(\n                        \"dateselect--range-date\"\n                    ).background_style\n                )\n\n        if (\n            self.cursor_offset\n            and self.cursor_offset.y == y\n            and self.cursor_offset.x in x\n        ):\n            style = self.get_component_rich_style(\"dateselect--hovered-date\")\n            styles.append(style.from_color(style.color))\n\n        if self.cursor and self.cursor == log_idx:\n            styles.append(\n                self.get_component_rich_style(\"dateselect--cursor-date\")\n            )\n\n        return Style.combine(styles)\n\n    def is_day_in_range(self, day: Date) -&gt; bool:\n        \"\"\"Checks if a given date is within selected the date range(inclusive).\n\n        Args:\n            day: Date to check against.\n\n        Returns:\n            True if in the range else false.\n        \"\"\"\n        return bool(\n            self._is_range\n            and self.date\n            and self.end_date\n            and self.date &lt;= day &lt;= self.end_date\n        )\n\n    def _render_header(self, y: int) -&gt; list[Segment]:\n        header_len = len(self.header)\n        rem = self.size.width - (header_len + 10)\n        blank, blank_extra = divmod(rem, 2)\n        header_start = 5 + blank + blank_extra\n        header_end = header_start + header_len\n        right_nav_start = header_end + (blank - blank_extra) + len(TARGET_ICON)\n\n        y += self._top_border_offset()\n        return [\n            Segment(\"   \", self.rich_style),\n            Segment(\n                LEFT_ARROW,\n                self._filter_style(\n                    y,\n                    range(4, 5),\n                    log_idx=DateCursor(0, 0),\n                ),\n            ),\n            Segment(\" \" * (blank), self.rich_style),\n            Segment(\n                self.header,\n                style=self._filter_style(\n                    y,\n                    range(header_start, header_end),\n                    log_idx=DateCursor(0, 1),\n                ),\n            ),\n            Segment(\"   \", self.rich_style),\n            Segment(\n                TARGET_ICON,\n                style=self._filter_style(\n                    y,\n                    range(header_end + 1, header_end + 3),\n                    log_idx=DateCursor(0, 2),\n                ),\n            ),\n            Segment(\" \" * (blank - (3 - blank_extra)), self.rich_style),\n            Segment(\n                RIGHT_ARROW,\n                style=self._filter_style(\n                    y,\n                    range(right_nav_start, right_nav_start + 2),\n                    log_idx=DateCursor(0, 3),\n                ),\n            ),\n        ]\n\n    def _render_weekdays(self) -&gt; list[Segment]:\n        day_style = self.get_component_rich_style(\"dateselect--secondary-date\")\n        empty = Segment(\"  \", style=self.rich_style)\n        segs = [Segment(\" \", style=self.rich_style)]\n        for i in range(7):\n            segs.append(empty)\n            segs.append(Segment(day_abbr[i], day_style))\n        return segs\n\n    def _render_month(self, y: int) -&gt; list[Segment]:\n        border_offset = self._top_border_offset()\n        y += border_offset\n        if y == (3 + border_offset):\n            return self._render_weekdays()\n\n        month = (y - (4 + border_offset)) // 2\n        # NOTE: Removing nav header + weekdays\n\n        date = None\n        segments = [Segment(\" \", style=self.rich_style)]\n        subtotal = int(self.styles.border_left[0] != \"\")\n        for i in range(7):\n            segments.append(\n                Segment(\n                    \"  \",\n                    self._filter_style(\n                        y,\n                        range(subtotal, subtotal + 3),\n                        date=date,\n                    ),\n                )\n            )\n            subtotal += 2\n            if not (day := self.data[month][i]):\n                segments.append(\n                    Segment(\n                        \"   \",\n                        style=self._filter_style(\n                            y,\n                            range(subtotal, subtotal + 4),\n                            date=date,\n                            log_idx=DateCursor(month + 1, i),\n                        ),\n                    )\n                )\n                date = None\n            else:\n                date = self.loc.replace(day=cast(\"int\", day))\n                segments.append(\n                    Segment(\n                        str(day).rjust(3),\n                        style=self._filter_style(\n                            y,\n                            range(subtotal, subtotal + 4),\n                            date=date,\n                            log_idx=DateCursor(month + 1, i),\n                        ),\n                    )\n                )\n            subtotal += 3\n\n        return segments\n\n    def _render_year(self, y: int) -&gt; list[Segment]:\n        if (row := (y - 2) // 2) &gt; 3:\n            return []\n\n        y += self._top_border_offset()\n\n        values = self.data[row]\n        value_max_width = self.size.width // len(values)\n\n        segs = list[Segment]()\n        for i, value in enumerate(values):\n            if self.scope == DateScope.CENTURY:\n                value = f\"{value}-{cast('int', value) + 9}\"\n            else:\n                value = str(value)\n            n = len(value)\n            start = (i * value_max_width) + (abs(value_max_width - n) // 2)\n            end = start + n + 1\n\n            value = value.center(value_max_width)\n            segs.append(\n                Segment(\n                    value,\n                    self._filter_style(\n                        y,\n                        range(start, end),\n                        log_idx=DateCursor(row + 1, i),\n                    ),\n                )\n            )\n\n        return segs\n\n    def render_line(self, y: int) -&gt; Strip:\n        if (y % 2 == 0) or (len(self.data) + 2) * 2 &lt; y or not self.data:\n            return Strip.blank(self.size.width)\n\n        if y == 1:\n            line = self._render_header(y)\n        elif self.scope == DateScope.MONTH:\n            line = self._render_month(y)\n        else:\n            line = self._render_year(y)\n\n        return Strip(line)\n\n    def get_content_height(\n        self,\n        container: Size,\n        viewport: Size,\n        width: int,\n    ) -&gt; int:\n        total = 3 + len(self.data) * 2\n\n        if self.scope == DateScope.MONTH:\n            return total + 2\n\n        return total\n\n    def get_content_width(self, container: Size, viewport: Size) -&gt; int:\n        return 38\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>DateSelect {\n    background: $surface;\n    width: auto;\n    border: round $secondary;\n\n    .dateselect--primary-date {\n        color: $primary;\n    }\n\n    .dateselect--secondary-date {\n        color: $secondary;\n    }\n\n    .dateselect--range-date {\n        background: $panel-darken-3;\n    }\n\n    .dateselect--hovered-date {\n        color: $accent;\n        text-style: bold;\n    }\n\n    .dateselect--cursor-date {\n        color: $accent;\n        text-style: reverse bold;\n    }\n\n    .dateselect--start-date {\n        color: $accent-lighten-3;\n        text-style: italic;\n    }\n\n    .dateselect--end-date {\n        color: $accent-lighten-3;\n        text-style: italic;\n    }\n}\n</code></pre> <p>Default CSS for the <code>DateSelect</code> widget.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\"up\", \"move_cursor('up')\", tooltip=\"Move the cursor up.\"),\n    Binding(\n        \"right\", \"move_cursor('right')\", tooltip=\"Move cursor to the right.\"\n    ),\n    Binding(\"down\", \"move_cursor('down')\", tooltip=\"Move the cursor down.\"),\n    Binding(\n        \"left\", \"move_cursor('left')\", tooltip=\"Move the cursor to the left.\"\n    ),\n    Binding(\n        \"enter\",\n        \"select_cursor\",\n        tooltip=\"Navigate or select to the hovered part.\",\n    ),\n    Binding(\n        \"ctrl+enter\",\n        \"select_cursor(True)\",\n        tooltip=\"Reverse Navigate or select to the hovered part.\",\n    ),\n]\n</code></pre> <p>All bindings for DateSelect</p> Key(s) Description up Move the cursor up. right Move cursor to the right. down Move the cursor down. left Move the cursor to the left. enter Navigate or select to the hovered part. ctrl+enter Reverse Navigate or select to the hovered part."},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.COMPONENT_CLASSES","title":"COMPONENT_CLASSES  <code>class-attribute</code>","text":"<pre><code>COMPONENT_CLASSES: set[str] = {\n    \"dateselect--start-date\",\n    \"dateselect--end-date\",\n    \"dateselect--cursor-date\",\n    \"dateselect--hovered-date\",\n    \"dateselect--secondary-date\",\n    \"dateselect--primary-date\",\n    \"dateselect--range-date\",\n}\n</code></pre> <p>All component classes for DateSelect.</p> Class Description <code>dateselect--cursor-date</code> Color of label under the keyboard cursor. <code>dateselect--end-date</code> Color of the selected end date if enabled. <code>dateselect--hovered-date</code> Color of the mouse hovered date. <code>dateselect--primary-date</code> Standard color of unselected dates. <code>dateselect--range-date</code> Color of any dates if both end and start date            are selected <code>dateselect--secondary-date</code> Color of weekdays labels in month view. <code>dateselect--start-date</code> Color of selected start date."},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.date","title":"date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>date = reactive[Date | None](None, init=False)\n</code></pre> <p>Start date. Bound to base dialog if using with a prebuilt picker.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.date_range","title":"date_range  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>date_range = var[DateDelta | None](None, init=False)\n</code></pre> <p>Constant date range in between the start and end dates.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.end_date","title":"end_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_date = reactive[Date | None](None, init=False)\n</code></pre> <p>End date for date ranges.</p> <p>Bound to base dialog if using with a prebuilt picker.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.scope","title":"scope  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scope = var[DateScope](MONTH)\n</code></pre> <p>Scope of the current date picker view.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.loc","title":"loc  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>loc = reactive[Date](today_in_system_tz, init=False)\n</code></pre> <p>Current location of the date picker for navigation.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.data","title":"data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>data = reactive[DisplayData](list, init=False, layout=True)\n</code></pre> <p>Data for displaying date info.</p> <p>Layout required as the size might differ between months.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.header","title":"header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>header = reactive[str]('', init=False)\n</code></pre> <p>Navigation date header is computed dynamically.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.cursor_offset","title":"cursor_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cursor_offset = reactive[Offset | None](None, init=False)\n</code></pre> <p>Mouse cursor position for mouse navigation.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.cursor","title":"cursor  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cursor = reactive[DateCursor | None](None, init=False)\n</code></pre> <p>Keyboard cursor position.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.Changed","title":"Changed","text":"<p>               Bases: <code>BaseMessage['DateSelect']</code></p> <p>Base message for when dates are changed.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Alias for <code>date</code> attribute.</p> <p> TYPE: <code>Date | None</code> </p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>class Changed(BaseMessage[\"DateSelect\"]):\n    \"\"\"Base message for when dates are changed.\"\"\"\n\n    def __init__(self, widget: DateSelect, date: Date | None) -&gt; None:\n        super().__init__(widget)\n        self.date = date\n\n    @property\n    def value(self) -&gt; Date | None:\n        \"\"\"Alias for `date` attribute.\"\"\"\n        return self.date\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.Changed.value","title":"value  <code>property</code>","text":"<pre><code>value: Date | None\n</code></pre> <p>Alias for <code>date</code> attribute.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.StartChanged","title":"StartChanged","text":"<p>               Bases: <code>Changed</code></p> <p>Message sent when the start date changed.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>class StartChanged(Changed):\n    \"\"\"Message sent when the start date changed.\"\"\"\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.EndChanged","title":"EndChanged","text":"<p>               Bases: <code>Changed</code></p> <p>Message sent when the end date changed.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>class EndChanged(Changed):\n    \"\"\"Message sent when the end date changed.\"\"\"\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.action_move_cursor","title":"action_move_cursor","text":"<pre><code>action_move_cursor(direction: Directions) -&gt; None\n</code></pre> <p>Move cursor to the next spot depending on direction.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>def action_move_cursor(self, direction: Directions) -&gt; None:\n    \"\"\"Move cursor to the next spot depending on direction.\"\"\"\n    if self.cursor is None:\n        self.log.debug(\"Cursor does not exist. Placing default location.\")\n        self.cursor = DateCursor()\n    elif direction == \"up\":\n        self._find_move(y=-1)\n    elif direction == \"right\":\n        self._find_move(x=1)\n    elif direction == \"down\":\n        self._find_move(y=1)\n    elif direction == \"left\":\n        self._find_move(x=-1)\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.action_select_cursor","title":"action_select_cursor","text":"<pre><code>action_select_cursor(ctrl: bool = False) -&gt; None\n</code></pre> <p>Triggers the functionality for what is below the keyboard cursor.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>def action_select_cursor(self, ctrl: bool = False) -&gt; None:\n    \"\"\"Triggers the functionality for what is below the keyboard cursor.\"\"\"\n    cursor = cast(\"DateCursor\", self.cursor)\n    if cursor.y == 0:\n        nav = (\n            LEFT_ARROW,\n            self.header,\n            TARGET_ICON,\n            RIGHT_ARROW,\n        )\n        self._navigate_picker(nav[cursor.x], ctrl=ctrl)\n    else:\n        self._navigate_picker(self.data[cursor.y - 1][cursor.x], ctrl=ctrl)\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DateSelect.is_day_in_range","title":"is_day_in_range","text":"<pre><code>is_day_in_range(day: Date) -&gt; bool\n</code></pre> <p>Checks if a given date is within selected the date range(inclusive).</p> PARAMETER DESCRIPTION <code>day</code> <p>Date to check against.</p> <p> TYPE: <code>Date</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if in the range else false.</p> Source code in <code>src/textual_timepiece/pickers/_date_picker.py</code> <pre><code>def is_day_in_range(self, day: Date) -&gt; bool:\n    \"\"\"Checks if a given date is within selected the date range(inclusive).\n\n    Args:\n        day: Date to check against.\n\n    Returns:\n        True if in the range else false.\n    \"\"\"\n    return bool(\n        self._is_range\n        and self.date\n        and self.end_date\n        and self.date &lt;= day &lt;= self.end_date\n    )\n</code></pre>"},{"location":"reference/selectors/#timeselect","title":"TimeSelect","text":"<p> TimeSelectApp \u00a000:00\u00a0\u00a000:30\u00a0\u00a001:00\u00a0\u00a001:30\u00a0 \u00a002:00\u00a0\u00a002:30\u00a0\u00a003:00\u00a0\u00a003:30\u00a0 \u00a004:00\u00a0\u00a004:30\u00a0\u00a005:00\u00a0\u00a005:30\u00a0 \u00a006:00\u00a0\u00a006:30\u00a0\u00a007:00\u00a0\u00a007:30\u00a0 \u00a008:00\u00a0\u00a008:30\u00a0\u00a009:00\u00a0\u00a009:30\u00a0 \u00a010:00\u00a0\u00a010:30\u00a0\u00a011:00\u00a0\u00a011:30\u00a0 \u00a012:00\u00a0\u00a012:30\u00a0\u00a013:00\u00a0\u00a013:30\u00a0 \u00a014:00\u00a0\u00a014:30\u00a0\u00a015:00\u00a0\u00a015:30\u00a0 \u00a016:00\u00a0\u00a016:30\u00a0\u00a017:00\u00a0\u00a017:30\u00a0 \u00a018:00\u00a0\u00a018:30\u00a0\u00a019:00\u00a0\u00a019:30\u00a0 \u00a020:00\u00a0\u00a020:30\u00a0\u00a021:00\u00a0\u00a021:30\u00a0 \u00a022:00\u00a0\u00a022:30\u00a0\u00a023:00\u00a0\u00a023:30\u00a0 </p>"},{"location":"reference/selectors/#textual_timepiece.pickers.TimeSelect","title":"textual_timepiece.pickers.TimeSelect","text":"<p>               Bases: <code>BaseOverlayWidget</code></p> <p>Time selection interface.</p> PARAMETER DESCRIPTION <code>name</code> <p>Name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>Unique dom id for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>Any CSS classes that should be added to the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether to disable the widget.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> CLASS DESCRIPTION <code>Selected</code> <p>Message sent when a value is picked out of the time grid.</p> METHOD DESCRIPTION <code>action_focus_neighbor</code> <p>Focus a nearby member. It will mirror back if going past an edge.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p>Default CSS for the <code>TimeSelect</code> widget.</p> <p> TYPE: <code>str</code> </p> <code>BINDINGS</code> <p>All bindings for TimeSelect</p> <p> TYPE: <code>list[BindingType]</code> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class TimeSelect(BaseOverlayWidget):\n    \"\"\"Time selection interface.\n\n    Params:\n        name: Name of the widget.\n        id: Unique dom id for the widget\n        classes: Any CSS classes that should be added to the widget.\n        disabled: Whether to disable the widget.\n    \"\"\"\n\n    class Selected(BaseMessage[\"TimeSelect\"]):\n        \"\"\"Message sent when a value is picked out of the time grid.\"\"\"\n\n        def __init__(self, widget: TimeSelect, target: Time) -&gt; None:\n            super().__init__(widget)\n            self.target = target\n\n        @property\n        def value(self) -&gt; Time:\n            \"\"\"Alias for `target` attribute.\"\"\"\n            return self.target\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    TimeSelect {\n        layout: grid !important;\n        grid-size: 4;\n        grid-gutter: 0;\n        grid-rows: 1;\n        &amp; &gt; Button {\n            border: none;\n            min-width: 5;\n            width: 100%;\n            text-style: italic;\n            &amp;.dual-hour {\n                background: $panel;\n            }\n            &amp;:focus {\n                text-style: bold;\n                color: $primary;\n            }\n            &amp;:hover {\n                border: none;\n            }\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for the `TimeSelect` widget.\"\"\"\n\n    BINDINGS: ClassVar[list[BindingType]] = [\n        Binding(\n            \"up\",\n            \"focus_neighbor('up')\",\n            \"Go Up\",\n            tooltip=\"Focus the neighbor above.\",\n            show=False,\n        ),\n        Binding(\n            \"right\",\n            \"focus_neighbor('right')\",\n            \"Go Right\",\n            tooltip=\"Focus the neighbor to the right.\",\n            show=False,\n        ),\n        Binding(\n            \"down\",\n            \"focus_neighbor('down')\",\n            \"Go Down\",\n            tooltip=\"Focus the neighbor below.\",\n            show=False,\n        ),\n        Binding(\n            \"left\",\n            \"focus_neighbor('left')\",\n            \"Go Left\",\n            tooltip=\"Focus the neighbor to the left.\",\n            show=False,\n        ),\n    ]\n    \"\"\"All bindings for TimeSelect\n\n    | Key(s) | Description |\n    | :- | :- |\n    | up | Focus the neighbor above. |\n    | right | Focus the neighbor to the right. |\n    | down | Focus the neighbor below. |\n    | left | Focus the neighbor to the left. |\n    \"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        start = Time()\n        interval = minutes(30)\n        for time in range(48):\n            yield Button(\n                start.format_common_iso().removesuffix(\":00\"),\n                id=f\"time-{time}\",\n                classes=\"time icon\",\n            ).set_class(bool(time % 2), \"dual-hour\", update=False)\n            start = add_time(start, interval)\n\n    def _on_button_pressed(self, message: Button.Pressed) -&gt; None:\n        message.stop()\n        time = Time.parse_common_iso(f\"{message.button.label}:00\")\n        self.post_message(self.Selected(self, time))\n\n    def action_focus_neighbor(self, direction: Directions) -&gt; None:\n        \"\"\"Focus a nearby member. It will mirror back if going past an edge.\"\"\"\n        if not self.has_focus_within:\n            widget = self.query_one(\"#time-0\", Button)\n        else:\n            # FIX: Subclass a button with a required id.\n            focused_id = int(\n                cast(\"str\", cast(\"Button\", self.app.focused).id).split(\"-\")[-1]\n            )\n\n            row, col = divmod(focused_id, 4)\n            if direction == \"up\":\n                id = focused_id - 4 if row - 1 &gt;= 0 else 43 + (col + 1)\n\n            elif direction == \"right\":\n                id = focused_id + 1 if col + 1 &lt;= 3 else focused_id - col\n\n            elif direction == \"down\":\n                id = focused_id + 4 if row + 1 &lt; 12 else col\n\n            else:\n                id = focused_id - 1 if col - 1 &gt;= 0 else focused_id + (3 - col)\n\n            widget = self.query_one(f\"#time-{id}\", Button)\n\n        self.app.set_focus(widget)\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.TimeSelect.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>TimeSelect {\n    layout: grid !important;\n    grid-size: 4;\n    grid-gutter: 0;\n    grid-rows: 1;\n    &amp; &gt; Button {\n        border: none;\n        min-width: 5;\n        width: 100%;\n        text-style: italic;\n        &amp;.dual-hour {\n            background: $panel;\n        }\n        &amp;:focus {\n            text-style: bold;\n            color: $primary;\n        }\n        &amp;:hover {\n            border: none;\n        }\n    }\n}\n</code></pre> <p>Default CSS for the <code>TimeSelect</code> widget.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.TimeSelect.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"up\",\n        \"focus_neighbor('up')\",\n        \"Go Up\",\n        tooltip=\"Focus the neighbor above.\",\n        show=False,\n    ),\n    Binding(\n        \"right\",\n        \"focus_neighbor('right')\",\n        \"Go Right\",\n        tooltip=\"Focus the neighbor to the right.\",\n        show=False,\n    ),\n    Binding(\n        \"down\",\n        \"focus_neighbor('down')\",\n        \"Go Down\",\n        tooltip=\"Focus the neighbor below.\",\n        show=False,\n    ),\n    Binding(\n        \"left\",\n        \"focus_neighbor('left')\",\n        \"Go Left\",\n        tooltip=\"Focus the neighbor to the left.\",\n        show=False,\n    ),\n]\n</code></pre> <p>All bindings for TimeSelect</p> Key(s) Description up Focus the neighbor above. right Focus the neighbor to the right. down Focus the neighbor below. left Focus the neighbor to the left."},{"location":"reference/selectors/#textual_timepiece.pickers.TimeSelect.Selected","title":"Selected","text":"<p>               Bases: <code>BaseMessage['TimeSelect']</code></p> <p>Message sent when a value is picked out of the time grid.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Alias for <code>target</code> attribute.</p> <p> TYPE: <code>Time</code> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class Selected(BaseMessage[\"TimeSelect\"]):\n    \"\"\"Message sent when a value is picked out of the time grid.\"\"\"\n\n    def __init__(self, widget: TimeSelect, target: Time) -&gt; None:\n        super().__init__(widget)\n        self.target = target\n\n    @property\n    def value(self) -&gt; Time:\n        \"\"\"Alias for `target` attribute.\"\"\"\n        return self.target\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.TimeSelect.Selected.value","title":"value  <code>property</code>","text":"<pre><code>value: Time\n</code></pre> <p>Alias for <code>target</code> attribute.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.TimeSelect.action_focus_neighbor","title":"action_focus_neighbor","text":"<pre><code>action_focus_neighbor(direction: Directions) -&gt; None\n</code></pre> <p>Focus a nearby member. It will mirror back if going past an edge.</p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>def action_focus_neighbor(self, direction: Directions) -&gt; None:\n    \"\"\"Focus a nearby member. It will mirror back if going past an edge.\"\"\"\n    if not self.has_focus_within:\n        widget = self.query_one(\"#time-0\", Button)\n    else:\n        # FIX: Subclass a button with a required id.\n        focused_id = int(\n            cast(\"str\", cast(\"Button\", self.app.focused).id).split(\"-\")[-1]\n        )\n\n        row, col = divmod(focused_id, 4)\n        if direction == \"up\":\n            id = focused_id - 4 if row - 1 &gt;= 0 else 43 + (col + 1)\n\n        elif direction == \"right\":\n            id = focused_id + 1 if col + 1 &lt;= 3 else focused_id - col\n\n        elif direction == \"down\":\n            id = focused_id + 4 if row + 1 &lt; 12 else col\n\n        else:\n            id = focused_id - 1 if col - 1 &gt;= 0 else focused_id + (3 - col)\n\n        widget = self.query_one(f\"#time-{id}\", Button)\n\n    self.app.set_focus(widget)\n</code></pre>"},{"location":"reference/selectors/#durationselect","title":"DurationSelect","text":"<p> DurationSelectApp \u00a0Hours\u00a0\u00a0Minutes\u00a0\u00a0Seconds\u00a0 \u00a0+1\u00a0\u00a0+4\u00a0\u00a0+15\u00a0\u00a0+30\u00a0\u00a0+15\u00a0\u00a0+30\u00a0 \u00a0-1\u00a0\u00a0-4\u00a0\u00a0-15\u00a0\u00a0-30\u00a0\u00a0-15\u00a0\u00a0-30\u00a0 </p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DurationSelect","title":"textual_timepiece.pickers.DurationSelect","text":"<p>               Bases: <code>BaseOverlayWidget</code></p> <p>Duration picker with various buttons in order to set time.</p> PARAMETER DESCRIPTION <code>name</code> <p>Name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>Unique dom id for the widget</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>Any CSS classes that should be added to the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether to disable the widget.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> CLASS DESCRIPTION <code>Adjusted</code> <p>Message sent when duration is added or subtracted.</p> <code>Rounded</code> <p>Notification message to round a duration based on parameters.</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_CSS</code> <p>Default CSS for the <code>DurationSelect</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class DurationSelect(BaseOverlayWidget):\n    \"\"\"Duration picker with various buttons in order to set time.\n\n    Params:\n        name: Name of the widget.\n        id: Unique dom id for the widget\n        classes: Any CSS classes that should be added to the widget.\n        disabled: Whether to disable the widget.\n    \"\"\"\n\n    class Adjusted(BaseMessage[\"DurationSelect\"]):\n        \"\"\"Message sent when duration is added or subtracted.\"\"\"\n\n        def __init__(self, widget: DurationSelect, delta: TimeDelta) -&gt; None:\n            super().__init__(widget)\n            self.delta = delta\n\n    class Rounded(BaseMessage[\"DurationSelect\"]):\n        \"\"\"Notification message to round a duration based on parameters.\"\"\"\n\n        def __init__(\n            self,\n            widget: DurationSelect,\n            value: int,\n            scope: Literal[\"hours\", \"minutes\", \"seconds\"],\n        ) -&gt; None:\n            super().__init__(widget)\n\n            self.value = value\n            \"\"\"Value used as a rounding factor.\"\"\"\n\n            self.scope = scope\n            \"\"\"Which subunit to round the duration to.\"\"\"\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    DurationSelect {\n        height: 3;\n        layout: horizontal;\n        width: 38;\n\n        Grid {\n            height: 3;\n            grid-size: 2 3;\n            grid-gutter: 0;\n            grid-rows: 1;\n\n            &amp; &gt; Button:first-of-type {\n                column-span: 2;\n                text-style: bold;\n                background-tint: $background 50%;\n            }\n\n            &amp; &gt; Button {\n                border: none;\n                min-width: 5;\n                width: 100%;\n                text-style: italic;\n                &amp;:hover {\n                    border: none;\n                }\n            }\n\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for the `DurationSelect` widget.\"\"\"\n\n    GRID_TEMPLATE: ClassVar[dict[str, tuple[str, ...]]] = {\n        \"hour-grid\": (\"Hours\", \"+1\", \"+4\", \"-1\", \"-4\"),\n        \"minute-grid\": (\"Minutes\", \"+15\", \"+30\", \"-15\", \"-30\"),\n        \"second-grid\": (\"Seconds\", \"+15\", \"+30\", \"-15\", \"-30\"),\n    }\n\n    def compose(self) -&gt; ComposeResult:\n        for grid, buttons in DurationSelect.GRID_TEMPLATE.items():\n            with Grid(id=grid):\n                for button in buttons:\n                    yield Button(button, classes=grid)\n\n    def _on_button_pressed(self, message: Button.Pressed) -&gt; None:\n        message.stop()\n        label = str(message.button.label)\n        try:\n            value = int(label[1:])\n            if label.startswith(\"-\"):\n                value *= -1\n        except ValueError:\n            value = None\n\n        if message.button.has_class(\"hour-grid\"):\n            if value:\n                self.post_message(self.Adjusted(self, TimeDelta(hours=value)))\n            else:\n                self.post_message(self.Rounded(self, 21600, \"hours\"))\n\n        elif message.button.has_class(\"minute-grid\"):\n            if value:\n                self.post_message(\n                    self.Adjusted(self, TimeDelta(minutes=value))\n                )\n            else:\n                self.post_message(self.Rounded(self, 3600, \"minutes\"))\n        elif message.button.has_class(\"second-grid\"):\n            if value:\n                self.post_message(\n                    self.Adjusted(self, TimeDelta(seconds=value))\n                )\n            else:\n                self.post_message(self.Rounded(self, 60, \"seconds\"))\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DurationSelect.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>DurationSelect {\n    height: 3;\n    layout: horizontal;\n    width: 38;\n\n    Grid {\n        height: 3;\n        grid-size: 2 3;\n        grid-gutter: 0;\n        grid-rows: 1;\n\n        &amp; &gt; Button:first-of-type {\n            column-span: 2;\n            text-style: bold;\n            background-tint: $background 50%;\n        }\n\n        &amp; &gt; Button {\n            border: none;\n            min-width: 5;\n            width: 100%;\n            text-style: italic;\n            &amp;:hover {\n                border: none;\n            }\n        }\n\n    }\n}\n</code></pre> <p>Default CSS for the <code>DurationSelect</code> widget.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DurationSelect.Adjusted","title":"Adjusted","text":"<p>               Bases: <code>BaseMessage['DurationSelect']</code></p> <p>Message sent when duration is added or subtracted.</p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class Adjusted(BaseMessage[\"DurationSelect\"]):\n    \"\"\"Message sent when duration is added or subtracted.\"\"\"\n\n    def __init__(self, widget: DurationSelect, delta: TimeDelta) -&gt; None:\n        super().__init__(widget)\n        self.delta = delta\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DurationSelect.Rounded","title":"Rounded","text":"<p>               Bases: <code>BaseMessage['DurationSelect']</code></p> <p>Notification message to round a duration based on parameters.</p> ATTRIBUTE DESCRIPTION <code>value</code> <p>Value used as a rounding factor.</p> <p> </p> <code>scope</code> <p>Which subunit to round the duration to.</p> <p> </p> Source code in <code>src/textual_timepiece/pickers/_time_picker.py</code> <pre><code>class Rounded(BaseMessage[\"DurationSelect\"]):\n    \"\"\"Notification message to round a duration based on parameters.\"\"\"\n\n    def __init__(\n        self,\n        widget: DurationSelect,\n        value: int,\n        scope: Literal[\"hours\", \"minutes\", \"seconds\"],\n    ) -&gt; None:\n        super().__init__(widget)\n\n        self.value = value\n        \"\"\"Value used as a rounding factor.\"\"\"\n\n        self.scope = scope\n        \"\"\"Which subunit to round the duration to.\"\"\"\n</code></pre>"},{"location":"reference/selectors/#textual_timepiece.pickers.DurationSelect.Rounded.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre> <p>Value used as a rounding factor.</p>"},{"location":"reference/selectors/#textual_timepiece.pickers.DurationSelect.Rounded.scope","title":"scope  <code>instance-attribute</code>","text":"<pre><code>scope = scope\n</code></pre> <p>Which subunit to round the duration to.</p>"},{"location":"reference/timeline/","title":"Timeline","text":""},{"location":"reference/timeline/#textual_timepiece.timeline","title":"textual_timepiece.timeline","text":"<p>Widgets for displaying &amp; interacting with data on a timeline scale.</p> CLASS DESCRIPTION <code>VerticalTimeline</code> <p>Timeline that displays entries in a vertical view.</p> <code>VerticalEntry</code> <p>Vertical entry for a vertical timeline layout.</p> <code>VerticalTimelineNavigation</code> <p>Vertical widget containing a vertical timeline and header.</p> <code>VerticalRuler</code> <p>Vertical ruler for marking vertical timelines.</p> <code>RuledVerticalTimeline</code> <p>Ruled vertical timeline with markers.</p> <code>HorizontalTimeline</code> <p>Timeline that displays entries in a horizontal view.</p> <code>HorizontalEntry</code> <p>Horizontal entry for a horizontal timeline layout.</p> <code>HorizontalTimelineNavigation</code> <p>Horizontal widget containing a horizontal timeline and header.</p> <code>HorizontalRuler</code> <p>Horizontal ruler for marking horizontal timelines.</p> <code>RuledHorizontalTimeline</code> <p>Ruled horizontal timeline with markers.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline","title":"VerticalTimeline","text":"<p>               Bases: <code>AbstractTimeline[VerticalEntryType]</code></p> <p>Timeline that displays entries in a vertical view.</p> PARAMETER DESCRIPTION <code>*children</code> <p>Entries to intially add to the widget.</p> <p> TYPE: <code>EntryType</code> DEFAULT: <code>()</code> </p> <code>duration</code> <p>Size of the widget.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tile</code> <p>Whether to tile the timeline or not. Set to <code>False</code> if a single column of entries is preferred.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> CLASS DESCRIPTION <code>Updated</code> <p>Base class for all timeline messages.</p> <code>Created</code> <p>Sent when a new entry is created.</p> <code>Deleted</code> <p>Sent when an entry is deleted.</p> <code>Selected</code> <p>Sent when a new entry selected.</p> METHOD DESCRIPTION <code>action_delete_entry</code> <p>Remove the selected or provided entry from the timeline.</p> <code>action_adjust_tail</code> <p>Adjust the tail of the selected timeline entry.</p> <code>action_adjust_head</code> <p>Adjust the head of the selected timeline entry.</p> <code>refresh_line</code> <p>Refresh a single line.</p> ATTRIBUTE DESCRIPTION <code>BINDINGS</code> <p>All bindings for <code>AbstractTimeline</code> widget.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>COMPONENT_CLASSES</code> <p>All component classes for the <code>AbstractTimeline</code> widget.</p> <p> TYPE: <code>set[str]</code> </p> <code>length</code> <p>Actual size of the widget with the direction size of the widget.</p> <p> </p> <code>markers</code> <p>Custom markers to place on the timeline.</p> <p> </p> <code>tile</code> <p>Is calendar tiling enabled?</p> <p> TYPE: <code>bool</code> </p> <code>selected</code> <p>Currently highlighted entry. None if there is nothing selected.</p> <p> TYPE: <code>EntryType | None</code> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>VerticalTimeline</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class VerticalTimeline(AbstractTimeline[VerticalEntryType]):\n    \"\"\"Timeline that displays entries in a vertical view.\n\n    Params:\n        *children: Entries to intially add to the widget.\n        duration: Size of the widget.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n        tile: Whether to tile the timeline or not. Set to `False` if a single\n            column of entries is preferred.\n    \"\"\"\n\n    Entry = VerticalEntry  # type: ignore[assignment] # FIX: Need to research to how to correctly accomplish this.\n    Layout = VerticalTimelineLayout\n    DURATION = \"height\"\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    VerticalTimeline {\n        height: auto !important;\n        border-left: wide $secondary;\n        border-right: wide $secondary;\n        &amp;:hover {\n            border-left: thick $secondary;\n            border-right: thick $secondary;\n        }\n        &amp;:focus {\n            border-left: outer $primary;\n            border-right: outer $primary;\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for `VerticalTimeline` widget.\"\"\"\n\n    class Created(\n        AbstractTimeline.Created[VerticalEntryT, VerticalTimelineType]\n    ):\n        \"\"\"Sent when a new entry is created.\"\"\"\n\n    class Deleted(\n        AbstractTimeline.Deleted[VerticalEntryT, VerticalTimelineType]\n    ):\n        \"\"\"Sent when an entry is deleted.\"\"\"\n\n    class Selected(\n        AbstractTimeline.Selected[VerticalEntryT, VerticalTimelineType]\n    ):\n        \"\"\"Sent when a new entry selected.\"\"\"\n\n    def _watch_markers(\n        self,\n        old: AbstractTimeline.Markers,\n        new: AbstractTimeline.Markers,\n    ) -&gt; None:\n        for line in old.keys() ^ new.keys():\n            self.refresh_line(line)\n\n    def refresh_line(self, y: int) -&gt; None:\n        \"\"\"Refresh a single line.\n\n        Args:\n            y: Coordinate of line.\n        \"\"\"\n        self.refresh(\n            Region(\n                0,\n                y - self.scroll_offset.y,\n                max(self.virtual_size.width, self.size.width),\n                1,\n            )\n        )\n\n    def render_lines(self, crop: Region) -&gt; list[Strip]:\n        self._basic_strip = Strip(\n            [\n                Segment(\n                    \"\u2500\" * self.size.width,\n                    style=self.get_component_rich_style(\"timeline--normal\"),\n                )\n            ]\n        )\n        return super().render_lines(crop)\n\n    def render_line(self, y: int) -&gt; Strip:\n        if marker := self.markers.get(y):\n            style, label = marker\n\n            return Strip(\n                [Segment(label.center(self.size.width, \"\u2500\"), style=style)]\n            )\n\n        return self._basic_strip\n\n    def _calc_entry_size(self, end: Offset) -&gt; tuple[int, int]:\n        start = cast(\"Offset\", self._start)\n        return start.y if start.y &lt; end.y else end.y, abs(end.y - start.y)\n\n    def pre_layout(self, layout: VerticalTimelineLayout) -&gt; None:  # type: ignore[override]\n        # Sorting with the public sort method will cause infinite layout calls.\n        self._nodes._sort(  # TODO: This needs a public solution.\n            key=lambda w: (w.offset.y, cast(\"Scalar\", w.styles.height).value),\n        )\n\n    def get_content_height(\n        self,\n        container: Size,\n        viewport: Size,\n        width: int,\n    ) -&gt; int:\n        return self.length\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+down,ctrl+right\",\n        \"adjust_tail\",\n        tooltip=\"Move entry to the backward.\",\n    ),\n    Binding(\n        \"ctrl+up,ctrl+left\",\n        \"adjust_head\",\n        tooltip=\"Move entry to the forward.\",\n    ),\n    Binding(\n        \"alt+shift+down,alt+shift+left\",\n        \"adjust_tail(True, True)\",\n        tooltip=\"Resize the tail end of the entry.\",\n    ),\n    Binding(\n        \"alt+shift+up,alt+shift+right\",\n        \"adjust_head(True, True)\",\n        tooltip=\"Resize the end of the entry forward.\",\n    ),\n    Binding(\n        \"shift+up,shift+left\",\n        \"adjust_head(False, True)\",\n        tooltip=\"Resize the start of the entry backward.\",\n    ),\n    Binding(\n        \"shift+down,shift+right\",\n        \"adjust_tail(False, True)\",\n        tooltip=\"Move the head of the entry forward.\",\n    ),\n    Binding(\n        \"ctrl+d,delete,backspace\",\n        \"delete_entry\",\n        \"Delete Entry\",\n        tooltip=\"Delete the selected entry.\",\n    ),\n    Binding(\n        \"escape\",\n        \"clear_active\",\n        \"Clear\",\n        priority=True,\n        show=False,\n        tooltip=\"Cancel creating an entry or deselect entries.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>AbstractTimeline</code> widget.</p> Key(s) Description ctrl+down,ctrl+right Move entry to the backward. ctrl+up,ctrl+left Move entry to the forward. alt+shift+down,alt+shift+left Resize the tail end of the entry. alt+shift+up,alt+shift+right Resize the end of the entry forward. shift+up,shift+left Resize the start of the entry backward. shift+down,shift+right Move the head of the entry forward. ctrl+d,delete,backspace Delete the selected entry. escape Cancel creating an entry or deselect entries."},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.COMPONENT_CLASSES","title":"COMPONENT_CLASSES  <code>class-attribute</code>","text":"<pre><code>COMPONENT_CLASSES: set[str] = {'timeline--normal'}\n</code></pre> <p>All component classes for the <code>AbstractTimeline</code> widget.</p> Class Description <code>timeline--normal</code> Target all lines without set markers."},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = Reactive[int](96, init=False, layout=True)\n</code></pre> <p>Actual size of the widget with the direction size of the widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.markers","title":"markers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>markers = Reactive[Markers](\n    MappingProxyType({}), init=False, compute=False, repaint=False\n)\n</code></pre> <p>Custom markers to place on the timeline.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.tile","title":"tile  <code>property</code> <code>writable</code>","text":"<pre><code>tile: bool\n</code></pre> <p>Is calendar tiling enabled?</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.selected","title":"selected  <code>property</code>","text":"<pre><code>selected: EntryType | None\n</code></pre> <p>Currently highlighted entry. None if there is nothing selected.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>VerticalTimeline {\n    height: auto !important;\n    border-left: wide $secondary;\n    border-right: wide $secondary;\n    &amp;:hover {\n        border-left: thick $secondary;\n        border-right: thick $secondary;\n    }\n    &amp;:focus {\n        border-left: outer $primary;\n        border-right: outer $primary;\n    }\n}\n</code></pre> <p>Default CSS for <code>VerticalTimeline</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Updated","title":"Updated","text":"<p>               Bases: <code>BaseMessage[TimelineType]</code>, <code>Generic[EntryT, TimelineType]</code></p> <p>Base class for all timeline messages.</p> ATTRIBUTE DESCRIPTION <code>entry</code> <p>Entry that was updated.</p> <p> </p> <code>timeline</code> <p>Alias for <code>widget</code> attribute.</p> <p> TYPE: <code>TimelineType</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class Updated(BaseMessage[TimelineType], Generic[EntryT, TimelineType]):\n    \"\"\"Base class for all timeline messages.\"\"\"\n\n    def __init__(self, widget: TimelineType, entry: EntryT) -&gt; None:\n        super().__init__(widget)\n\n        self.entry = entry\n        \"\"\"Entry that was updated.\"\"\"\n\n    @property\n    def timeline(self) -&gt; TimelineType:\n        \"\"\"Alias for `widget` attribute.\"\"\"\n        return self.widget\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Updated.entry","title":"entry  <code>instance-attribute</code>","text":"<pre><code>entry = entry\n</code></pre> <p>Entry that was updated.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Updated.timeline","title":"timeline  <code>property</code>","text":"<pre><code>timeline: TimelineType\n</code></pre> <p>Alias for <code>widget</code> attribute.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Created","title":"Created","text":"<p>               Bases: <code>Created[VerticalEntryT, VerticalTimelineType]</code></p> <p>Sent when a new entry is created.</p> ATTRIBUTE DESCRIPTION <code>entry</code> <p>Entry that was updated.</p> <p> </p> <code>timeline</code> <p>Alias for <code>widget</code> attribute.</p> <p> TYPE: <code>TimelineType</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class Created(\n    AbstractTimeline.Created[VerticalEntryT, VerticalTimelineType]\n):\n    \"\"\"Sent when a new entry is created.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Created.entry","title":"entry  <code>instance-attribute</code>","text":"<pre><code>entry = entry\n</code></pre> <p>Entry that was updated.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Created.timeline","title":"timeline  <code>property</code>","text":"<pre><code>timeline: TimelineType\n</code></pre> <p>Alias for <code>widget</code> attribute.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Deleted","title":"Deleted","text":"<p>               Bases: <code>Deleted[VerticalEntryT, VerticalTimelineType]</code></p> <p>Sent when an entry is deleted.</p> ATTRIBUTE DESCRIPTION <code>entry</code> <p>Entry that was updated.</p> <p> </p> <code>timeline</code> <p>Alias for <code>widget</code> attribute.</p> <p> TYPE: <code>TimelineType</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class Deleted(\n    AbstractTimeline.Deleted[VerticalEntryT, VerticalTimelineType]\n):\n    \"\"\"Sent when an entry is deleted.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Deleted.entry","title":"entry  <code>instance-attribute</code>","text":"<pre><code>entry = entry\n</code></pre> <p>Entry that was updated.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Deleted.timeline","title":"timeline  <code>property</code>","text":"<pre><code>timeline: TimelineType\n</code></pre> <p>Alias for <code>widget</code> attribute.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Selected","title":"Selected","text":"<p>               Bases: <code>Selected[VerticalEntryT, VerticalTimelineType]</code></p> <p>Sent when a new entry selected.</p> ATTRIBUTE DESCRIPTION <code>entry</code> <p>Entry that was updated.</p> <p> </p> <code>timeline</code> <p>Alias for <code>widget</code> attribute.</p> <p> TYPE: <code>TimelineType</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class Selected(\n    AbstractTimeline.Selected[VerticalEntryT, VerticalTimelineType]\n):\n    \"\"\"Sent when a new entry selected.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Selected.entry","title":"entry  <code>instance-attribute</code>","text":"<pre><code>entry = entry\n</code></pre> <p>Entry that was updated.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.Selected.timeline","title":"timeline  <code>property</code>","text":"<pre><code>timeline: TimelineType\n</code></pre> <p>Alias for <code>widget</code> attribute.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.action_delete_entry","title":"action_delete_entry","text":"<pre><code>action_delete_entry(id: str | None = None) -&gt; None\n</code></pre> <p>Remove the selected or provided entry from the timeline.</p> PARAMETER DESCRIPTION <code>id</code> <p>If removing an un-highlighted widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>def action_delete_entry(self, id: str | None = None) -&gt; None:\n    \"\"\"Remove the selected or provided entry from the timeline.\n\n    Args:\n        id: If removing an un-highlighted widget.\n    \"\"\"\n    if id:\n        try:\n            entry = self.query_one(f\"#{id}\", self.Entry)\n        except NoMatches:\n            return\n    elif self.selected:\n        entry = self.selected\n    else:\n        return\n\n    entry.remove()\n    self.post_message(self.Deleted(self, entry))\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.action_adjust_tail","title":"action_adjust_tail","text":"<pre><code>action_adjust_tail(tail: bool = False, resize: bool = False) -&gt; None\n</code></pre> <p>Adjust the tail of the selected timeline entry.</p> PARAMETER DESCRIPTION <code>tail</code> <p>Increase the size if resizing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>resize</code> <p>Resize the entry instead of moving.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>def action_adjust_tail(\n    self,\n    tail: bool = False,\n    resize: bool = False,\n) -&gt; None:\n    \"\"\"Adjust the tail of the selected timeline entry.\n\n    Args:\n        tail: Increase the size if resizing.\n        resize: Resize the entry instead of moving.\n    \"\"\"\n    if resize:\n        cast(\"EntryType\", self.selected).resize(1, tail=tail)\n    else:\n        cast(\"EntryType\", self.selected).move(1)\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.action_adjust_head","title":"action_adjust_head","text":"<pre><code>action_adjust_head(tail: bool = False, resize: bool = False) -&gt; None\n</code></pre> <p>Adjust the head of the selected timeline entry.</p> PARAMETER DESCRIPTION <code>tail</code> <p>Increase the size if resizing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>resize</code> <p>Resize the entry instead of moving.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>def action_adjust_head(\n    self,\n    tail: bool = False,\n    resize: bool = False,\n) -&gt; None:\n    \"\"\"Adjust the head of the selected timeline entry.\n\n    Args:\n        tail: Increase the size if resizing.\n        resize: Resize the entry instead of moving.\n    \"\"\"\n    if resize:\n        cast(\"EntryType\", self.selected).resize(-1, tail=not tail)\n    else:\n        cast(\"EntryType\", self.selected).move(-1)\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimeline.refresh_line","title":"refresh_line","text":"<pre><code>refresh_line(y: int) -&gt; None\n</code></pre> <p>Refresh a single line.</p> PARAMETER DESCRIPTION <code>y</code> <p>Coordinate of line.</p> <p> TYPE: <code>int</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>def refresh_line(self, y: int) -&gt; None:\n    \"\"\"Refresh a single line.\n\n    Args:\n        y: Coordinate of line.\n    \"\"\"\n    self.refresh(\n        Region(\n            0,\n            y - self.scroll_offset.y,\n            max(self.virtual_size.width, self.size.width),\n            1,\n        )\n    )\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry","title":"VerticalEntry","text":"<p>               Bases: <code>AbstractEntry</code></p> <p>Vertical entry for a vertical timeline layout.</p> PARAMETER DESCRIPTION <code>id</code> <p>ID of the Widget.</p> <p> TYPE: <code>str</code> </p> <code>content</code> <p>A Rich renderable, or string containing console markup.</p> <p> TYPE: <code>RenderableType | SupportsVisual</code> DEFAULT: <code>''</code> </p> <code>offset</code> <p>Initial offset to use for the entry.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>size</code> <p>Initial size to use for the entry.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>markup</code> <p>True if markup should be parsed and rendered.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>name</code> <p>Name of widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>Space separated list of class names.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the static is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> CLASS DESCRIPTION <code>Updated</code> <p>Base message for all entries.</p> <code>Resized</code> <p>Entry was resized by the user.</p> <code>Moved</code> <p>Entry was moved by the user.</p> METHOD DESCRIPTION <code>mime</code> <p>Instatiate a mime entry. For previewing resizing visually.</p> <code>resize</code> <p>Public method for resizing the widget.</p> <code>is_moving</code> <p>Is the widget moving or resizing?</p> ATTRIBUTE DESCRIPTION <code>clicked</code> <p>Initial point where the entry was clicked when moving or resizing.</p> <p> </p> <code>dimension</code> <p>Alias for the size of the entry depending on orientation.</p> <p> TYPE: <code>int</code> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>VerticalEntry</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>class VerticalEntry(AbstractEntry):\n    \"\"\"Vertical entry for a vertical timeline layout.\n\n    Params:\n        id: ID of the Widget.\n        content: A Rich renderable, or string containing console markup.\n        offset: Initial offset to use for the entry.\n        size: Initial size to use for the entry.\n        markup: True if markup should be parsed and rendered.\n        name: Name of widget.\n        classes: Space separated list of class names.\n        disabled: Whether the static is disabled or not.\n    \"\"\"\n\n    class Resized(AbstractEntry.Resized[\"VerticalEntry\"]):\n        \"\"\"Entry was resized by the user.\"\"\"\n\n    class Moved(AbstractEntry.Moved[\"VerticalEntry\"]):\n        \"\"\"Entry was moved by the user.\"\"\"\n\n    parent: VerticalTimeline\n    DIMENSION = \"height\"\n    EDGE_MARGIN: ClassVar[int] = 1\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    VerticalEntry {\n        width: 100%;\n        min-height: 2;\n        height: 2;\n        border-top: double $panel-lighten-2;\n        border-bottom: double $panel-lighten-2;\n        &amp;:hover.size_start {\n            border: none;\n            border-top: double $secondary;\n            border-bottom: double $panel-lighten-2;\n        }\n        &amp;:hover.size_end {\n            border: none;\n            border-bottom: double $secondary;\n            border-top: double $panel-lighten-2;\n        }\n        &amp;:focus.size_start {\n            border: none;\n            border-top: thick $primary;\n            border-bottom: double $primary;\n        }\n        &amp;:focus.size_end {\n            border: none;\n            border-bottom: thick $primary;\n            border-top: double $primary;\n        }\n        &amp;:focus {\n            border: double $primary;\n        }\n        &amp;.-mime {\n            hatch: horizontal white 5%;\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for `VerticalEntry` widget.\"\"\"\n\n    def sel_delta(self, event: MouseEvent) -&gt; int:\n        return event.delta_y\n\n    def is_tail(self, offset: Offset) -&gt; bool:\n        return 0 &lt;= offset.y &lt;= self.EDGE_MARGIN\n\n    def is_head(self, offset: Offset) -&gt; bool:\n        height = cast(\"Scalar\", self.styles.height).value\n        return height - self.EDGE_MARGIN &lt;= offset.y &lt;= height\n\n    def is_start(self, offset: Offset) -&gt; bool:\n        return offset.y &lt; cast(\"Scalar\", self.styles.height).value / 2\n\n    def move(self, delta: int) -&gt; None:\n        offset = Offset(0, delta)\n        self.offset = self.offset + offset\n        self.post_message(self.Moved(self, delta))\n\n    def merge(self, other: VerticalEntry) -&gt; AwaitRemove:\n        y1, y2 = self.offset.y, other.offset.y\n        start = y1 if y1 &lt;= y2 else y2\n        self.offset = Offset(0, start)\n        e1, e2 = self.end, other.end\n        self.styles.height = abs(start - (e1 if e1 &gt;= e2 else e2))\n        return other.remove()\n\n    def _resize_helper(self, delta: int, *, tail: bool) -&gt; int:\n        if tail:\n            delta *= -1\n\n        new_height = cast(\"Scalar\", self.styles.height).value + delta\n\n        if tail and new_height != cast(\"Scalar\", self.styles.height).value:\n            self.offset += Offset(0, -delta)\n\n        self.styles.height = new_height\n        return delta\n\n    def set_dims(\n        self,\n        offset: int | None = None,\n        size: int | None = None,\n    ) -&gt; None:\n        if offset:\n            self.offset = Offset(0, offset)\n        if size:\n            self.styles.height = size\n\n    @property\n    def start(self) -&gt; int:\n        return self.offset.y\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.clicked","title":"clicked  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clicked = var[Offset | None](None, init=False)\n</code></pre> <p>Initial point where the entry was clicked when moving or resizing.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.dimension","title":"dimension  <code>property</code> <code>writable</code>","text":"<pre><code>dimension: int\n</code></pre> <p>Alias for the size of the entry depending on orientation.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>VerticalEntry {\n    width: 100%;\n    min-height: 2;\n    height: 2;\n    border-top: double $panel-lighten-2;\n    border-bottom: double $panel-lighten-2;\n    &amp;:hover.size_start {\n        border: none;\n        border-top: double $secondary;\n        border-bottom: double $panel-lighten-2;\n    }\n    &amp;:hover.size_end {\n        border: none;\n        border-bottom: double $secondary;\n        border-top: double $panel-lighten-2;\n    }\n    &amp;:focus.size_start {\n        border: none;\n        border-top: thick $primary;\n        border-bottom: double $primary;\n    }\n    &amp;:focus.size_end {\n        border: none;\n        border-bottom: thick $primary;\n        border-top: double $primary;\n    }\n    &amp;:focus {\n        border: double $primary;\n    }\n    &amp;.-mime {\n        hatch: horizontal white 5%;\n    }\n}\n</code></pre> <p>Default CSS for <code>VerticalEntry</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.Updated","title":"Updated","text":"<p>               Bases: <code>BaseMessage[T]</code></p> <p>Base message for all entries.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>class Updated(BaseMessage[T]):\n    \"\"\"Base message for all entries.\"\"\"\n\n    @property\n    def entry(self) -&gt; T:\n        return self.widget\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.Resized","title":"Resized","text":"<p>               Bases: <code>Resized['VerticalEntry']</code></p> <p>Entry was resized by the user.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>class Resized(AbstractEntry.Resized[\"VerticalEntry\"]):\n    \"\"\"Entry was resized by the user.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.Moved","title":"Moved","text":"<p>               Bases: <code>Moved['VerticalEntry']</code></p> <p>Entry was moved by the user.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>class Moved(AbstractEntry.Moved[\"VerticalEntry\"]):\n    \"\"\"Entry was moved by the user.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.mime","title":"mime  <code>classmethod</code>","text":"<pre><code>mime(\n    offset: int | None = None,\n    size: int | None = None,\n    *,\n    name: str | None = None,\n    markup: bool = True,\n    disabled: bool = False,\n) -&gt; Self\n</code></pre> <p>Instatiate a mime entry. For previewing resizing visually.</p> PARAMETER DESCRIPTION <code>offset</code> <p>Initial offset to use for the entry.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>size</code> <p>Initial size to use for the entry.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>markup</code> <p>True if markup should be parsed and rendered.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>name</code> <p>Name of widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the static is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Self</code> <p>Constructed timeline entry.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>@classmethod\ndef mime(\n    cls,\n    offset: int | None = None,\n    size: int | None = None,\n    *,\n    name: str | None = None,\n    markup: bool = True,\n    disabled: bool = False,\n) -&gt; Self:\n    \"\"\"Instatiate a mime entry. For previewing resizing visually.\n\n    Args:\n        offset: Initial offset to use for the entry.\n        size: Initial size to use for the entry.\n        markup: True if markup should be parsed and rendered.\n        name: Name of widget.\n        disabled: Whether the static is disabled or not.\n\n    Returns:\n        Constructed timeline entry.\n    \"\"\"\n    return cls(\n        id=f\"id-{uuid4()}\",\n        content=\"\",\n        offset=offset,\n        size=size,\n        markup=markup,\n        name=name,\n        classes=\"-mime\",\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.resize","title":"resize","text":"<pre><code>resize(delta: int, *, tail: bool) -&gt; None\n</code></pre> <p>Public method for resizing the widget.</p> PARAMETER DESCRIPTION <code>delta</code> <p>total amount to be moved.</p> <p> TYPE: <code>int</code> </p> <code>tail</code> <p>Whether to adjust the end or the start of the widget.</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>def resize(self, delta: int, *, tail: bool) -&gt; None:\n    \"\"\"Public method for resizing the widget.\n\n    Args:\n        delta: total amount to be moved.\n        tail: Whether to adjust the end or the start of the widget.\n    \"\"\"\n    delta = self._resize_helper(delta, tail=tail)\n    self.post_message(self.Resized(self, self.size, delta))\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalEntry.is_moving","title":"is_moving","text":"<pre><code>is_moving(offset: Offset) -&gt; bool\n</code></pre> <p>Is the widget moving or resizing?</p> PARAMETER DESCRIPTION <code>offset</code> <p>Mouse offset to check against.</p> <p> TYPE: <code>Offset</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the widget is moving else False.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>def is_moving(self, offset: Offset) -&gt; bool:\n    \"\"\"Is the widget moving or resizing?\n\n    Args:\n        offset: Mouse offset to check against.\n\n    Returns:\n        True if the widget is moving else False.\n    \"\"\"\n    return not (self.is_tail(offset) or self.is_head(offset))\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimelineNavigation","title":"VerticalTimelineNavigation","text":"<p>               Bases: <code>TimelineNavigation[VerticalTimeline[VerticalEntryType]]</code></p> <p>Vertical widget containing a vertical timeline and header.</p> PARAMETER DESCRIPTION <code>header</code> <p>Header to use at the start of the timeline.</p> <p> TYPE: <code>Widget | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> ATTRIBUTE DESCRIPTION <code>length</code> <p>Actual length of the actual timeline navigation.</p> <p> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>VerticalTimelineNavigation</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class VerticalTimelineNavigation(\n    TimelineNavigation[VerticalTimeline[VerticalEntryType]]\n):\n    \"\"\"Vertical widget containing a vertical timeline and header.\n\n    Params:\n        header: Header to use at the start of the timeline.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n    \"\"\"\n\n    Timeline = VerticalTimeline[VerticalEntryT]\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    VerticalTimelineNavigation {\n        layout: vertical !important;\n        height: auto !important;\n    }\n    \"\"\"\n    \"\"\"Default CSS for `VerticalTimelineNavigation` widget.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimelineNavigation.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = var[int](96, init=False)\n</code></pre> <p>Actual length of the actual timeline navigation.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalTimelineNavigation.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>VerticalTimelineNavigation {\n    layout: vertical !important;\n    height: auto !important;\n}\n</code></pre> <p>Default CSS for <code>VerticalTimelineNavigation</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalRuler","title":"VerticalRuler","text":"<p>               Bases: <code>AbstractRuler</code></p> <p>Vertical ruler for marking vertical timelines.</p> PARAMETER DESCRIPTION <code>duration</code> <p>Total length of the ruler.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>marker_factory</code> <p>Callable for creating the markers.</p> <p> TYPE: <code>MarkerFactory | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> ATTRIBUTE DESCRIPTION <code>duration</code> <p>Total time actual time the ruler spans in seconds.</p> <p> </p> <code>length</code> <p>Actual length of the widget.</p> <p> </p> <code>subdivisions</code> <p>Amount of subdivisions to use when calculating markers.</p> <p> </p> <code>time_chunk</code> <p>Time chunk for each subdivision that the ruler creates.</p> <p> </p> <code>marker_len</code> <p>The marker length of the each time_chunk.</p> <p> </p> <code>DEFAULT_CSS</code> <p>Default CSS for the <code>VerticalRuler</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class VerticalRuler(AbstractRuler):\n    \"\"\"Vertical ruler for marking vertical timelines.\n\n    Params:\n        duration: Total length of the ruler.\n        marker_factory: Callable for creating the markers.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n    \"\"\"\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    VerticalRuler {\n        border-left: wide $secondary;\n        border-right: wide $secondary;\n        height: auto !important;\n        width: 8;\n    }\n    \"\"\"\n    \"\"\"Default CSS for the `VerticalRuler` widget.\"\"\"\n\n    def render_line(self, y: int) -&gt; Strip:\n        marker_pos, rem = divmod(y, self.marker_len)\n        if y and not rem:\n            return Strip(\n                [\n                    Segment(\n                        self._factory(marker_pos * self.time_chunk).center(\n                            self.size.width\n                        ),\n                        style=self.get_component_rich_style(\n                            \"abstractruler--label\"\n                        ),\n                    )\n                ]\n            )\n\n        return Strip(\n            [\n                Segment(\n                    f\" {'\u2500' * (self.size.width - 2)} \",\n                    style=self.get_component_rich_style(\n                        \"abstractruler--empty\"\n                    ),\n                )\n            ]\n        )\n\n    def get_content_height(\n        self,\n        container: Size,\n        viewport: Size,\n        width: int,\n    ) -&gt; int:\n        return self.length\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalRuler.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration = var[int](86400, init=False)\n</code></pre> <p>Total time actual time the ruler spans in seconds.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalRuler.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = reactive[int](96, layout=True, init=False)\n</code></pre> <p>Actual length of the widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalRuler.subdivisions","title":"subdivisions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>subdivisions = reactive[int](24, init=False)\n</code></pre> <p>Amount of subdivisions to use when calculating markers.</p> <p>Generator gets called this amount of times.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalRuler.time_chunk","title":"time_chunk  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>time_chunk = Reactive[int](3600, init=False, compute=False)\n</code></pre> <p>Time chunk for each subdivision that the ruler creates.</p> <p>Computed automatically when other reactives change.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalRuler.marker_len","title":"marker_len  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>marker_len = Reactive[int](4, init=False, compute=False)\n</code></pre> <p>The marker length of the each time_chunk.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.VerticalRuler.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>VerticalRuler {\n    border-left: wide $secondary;\n    border-right: wide $secondary;\n    height: auto !important;\n    width: 8;\n}\n</code></pre> <p>Default CSS for the <code>VerticalRuler</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledVerticalTimeline","title":"RuledVerticalTimeline","text":"<p>               Bases: <code>AbstractRuledTimeline[VerticalTimelineNavigation, VerticalRuler]</code></p> <p>Ruled vertical timeline with markers.</p> <p>Note</p> <p>If providing headers with the <code>header_factory</code> parameter make sure to compensate with top padding for the ruler to keep alignment in place.</p> PARAMETER DESCRIPTION <code>total</code> <p>Total amount of timelines to draw.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>marker_factory</code> <p>Factory function for creating markers on the ruler. Defaults to generating markers in the HH:mm format.</p> <p> TYPE: <code>MarkerFactory | None</code> DEFAULT: <code>None</code> </p> <code>header_factory</code> <p>Factory function for creating headers.</p> <p> TYPE: <code>Callable[[int], Widget] | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>can_maximize</code> <p>Whether the widget can be maximized or not.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>total</code> <p>Total amount of timelines to compose. Minimum 1.</p> <p> </p> <code>duration</code> <p>Total time included in widget in seconds.</p> <p> </p> <code>length</code> <p>Actual length of the timelines.</p> <p> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>RuledVerticalTimeline</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_timeline_manager.py</code> <pre><code>class RuledVerticalTimeline(\n    AbstractRuledTimeline[VerticalTimelineNavigation, VerticalRuler]\n):\n    \"\"\"Ruled vertical timeline with markers.\n\n    !!! note\n        If providing headers with the `header_factory` parameter make\n        sure to compensate with top padding for the ruler to keep alignment\n        in place.\n\n    Params:\n        total: Total amount of timelines to draw.\n        marker_factory: Factory function for creating markers on the ruler.\n            Defaults to generating markers in the *HH:mm* format.\n        header_factory: Factory function for creating headers.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n        can_maximize: Whether the widget can be maximized or not.\n    \"\"\"\n\n    Timeline = VerticalTimelineNavigation[VerticalEntryType]\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    RuledVerticalTimeline {\n        layout: horizontal;\n        width: 1fr;\n        &amp; &gt; VerticalTimelineNavigation {\n            width: 1fr;\n            &amp; &gt; VerticalTimeline {\n                width: 1fr;\n            }\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for `RuledVerticalTimeline` widget.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        yield VerticalRuler(marker_factory=self._marker_factory).data_bind(\n            RuledVerticalTimeline.length\n        )\n        yield from super().compose()\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledVerticalTimeline.total","title":"total  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>total = var[int](1, init=False)\n</code></pre> <p>Total amount of timelines to compose. Minimum 1.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledVerticalTimeline.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration = var[int](86400, init=False)\n</code></pre> <p>Total time included in widget in seconds.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledVerticalTimeline.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = reactive[int](96, init=False, layout=True)\n</code></pre> <p>Actual length of the timelines.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledVerticalTimeline.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>RuledVerticalTimeline {\n    layout: horizontal;\n    width: 1fr;\n    &amp; &gt; VerticalTimelineNavigation {\n        width: 1fr;\n        &amp; &gt; VerticalTimeline {\n            width: 1fr;\n        }\n    }\n}\n</code></pre> <p>Default CSS for <code>RuledVerticalTimeline</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline","title":"HorizontalTimeline","text":"<p>               Bases: <code>AbstractTimeline[HorizontalEntryType]</code></p> <p>Timeline that displays entries in a horizontal view.</p> PARAMETER DESCRIPTION <code>*children</code> <p>Entries to intially add to the widget.</p> <p> TYPE: <code>EntryType</code> DEFAULT: <code>()</code> </p> <code>duration</code> <p>Size of the widget.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tile</code> <p>Whether to tile the timeline or not. Set to <code>False</code> if a single row of entries is preferred.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> CLASS DESCRIPTION <code>Updated</code> <p>Base class for all timeline messages.</p> <code>Created</code> <p>Sent when a new entry is created.</p> <code>Deleted</code> <p>Sent when an entry is deleted.</p> <code>Selected</code> <p>Sent when a new entry selected.</p> METHOD DESCRIPTION <code>action_delete_entry</code> <p>Remove the selected or provided entry from the timeline.</p> <code>action_adjust_tail</code> <p>Adjust the tail of the selected timeline entry.</p> <code>action_adjust_head</code> <p>Adjust the head of the selected timeline entry.</p> ATTRIBUTE DESCRIPTION <code>BINDINGS</code> <p>All bindings for <code>AbstractTimeline</code> widget.</p> <p> TYPE: <code>list[BindingType]</code> </p> <code>COMPONENT_CLASSES</code> <p>All component classes for the <code>AbstractTimeline</code> widget.</p> <p> TYPE: <code>set[str]</code> </p> <code>length</code> <p>Actual size of the widget with the direction size of the widget.</p> <p> </p> <code>markers</code> <p>Custom markers to place on the timeline.</p> <p> </p> <code>tile</code> <p>Is calendar tiling enabled?</p> <p> TYPE: <code>bool</code> </p> <code>selected</code> <p>Currently highlighted entry. None if there is nothing selected.</p> <p> TYPE: <code>EntryType | None</code> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>HorizontalTimeline</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class HorizontalTimeline(AbstractTimeline[HorizontalEntryType]):\n    \"\"\"Timeline that displays entries in a horizontal view.\n\n    Params:\n        *children: Entries to intially add to the widget.\n        duration: Size of the widget.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n        tile: Whether to tile the timeline or not. Set to `False` if a single\n            row of entries is preferred.\n    \"\"\"\n\n    Entry = HorizontalEntry  # type: ignore[assignment] # FIX: Need to research to how to correctly accomplish this.\n    Layout = HorizontalTimelineLayout\n    DURATION: ClassVar[str] = \"width\"\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    HorizontalTimeline {\n        width: auto !important;\n        height: 28;\n        border-top: tall $secondary;\n        border-bottom: tall $secondary;\n        &amp;:hover {\n            border-top: thick $secondary;\n            border-bottom: thick $secondary;\n        }\n        &amp;:focus {\n            border-top: outer $primary;\n            border-bottom: outer $primary;\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for `HorizontalTimeline` widget.\"\"\"\n\n    class Created(\n        AbstractTimeline.Created[HorizontalEntryT, HorizontalTimelineType]\n    ):\n        \"\"\"Sent when a new entry is created.\"\"\"\n\n    class Deleted(\n        AbstractTimeline.Deleted[HorizontalEntryT, HorizontalTimelineType]\n    ):\n        \"\"\"Sent when an entry is deleted.\"\"\"\n\n    class Selected(\n        AbstractTimeline.Selected[HorizontalEntryT, HorizontalTimelineType]\n    ):\n        \"\"\"Sent when a new entry selected.\"\"\"\n\n    def _create_strip(self) -&gt; Strip:\n        \"\"\"Prerenders the strip for reuse on each line.\"\"\"\n        defaults = (self.get_component_rich_style(\"timeline--normal\"), \"\")\n\n        segs = list[Segment]()\n        add_seg = segs.append\n        prev_style = None\n        current_strip = \"\"\n        for x in range(self.size.width):\n            style, _ = self.markers.get(x, defaults)\n            if prev_style and style != prev_style:\n                add_seg(Segment(current_strip, prev_style))\n                current_strip = \"\"\n\n            prev_style = style\n            current_strip += \"\u2502\"\n\n        add_seg(Segment(current_strip, prev_style))\n\n        return Strip(segs, self.size.width).simplify()\n\n    def render_lines(self, crop: Region) -&gt; list[Strip]:\n        self._cached_strip = self._create_strip()\n        return super().render_lines(crop)\n\n    def render_line(self, y: int) -&gt; Strip:\n        return self._cached_strip\n\n    def _watch_markers(\n        self,\n        old: AbstractTimeline.Markers,\n        new: AbstractTimeline.Markers,\n    ) -&gt; None:\n        if old.keys() ^ new.keys():\n            self.refresh()\n\n    def _calc_entry_size(self, end: Offset) -&gt; tuple[int, int]:\n        start = cast(\"Offset\", self._start)\n        return start.x if start.x &lt; end.x else end.x, abs(end.x - start.x)\n\n    def pre_layout(self, layout: HorizontalTimelineLayout) -&gt; None:  # type: ignore[override]\n        # Sorting with the public sort method will cause infinite layout calls.\n        self._nodes._sort(  # TODO: This needs a public solution .\n            key=lambda w: (w.offset.x, cast(\"Scalar\", w.styles.width).value),\n        )\n\n    def get_content_width(self, container: Size, viewport: Size) -&gt; int:\n        return self.length\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.BINDINGS","title":"BINDINGS  <code>class-attribute</code>","text":"<pre><code>BINDINGS: list[BindingType] = [\n    Binding(\n        \"ctrl+down,ctrl+right\",\n        \"adjust_tail\",\n        tooltip=\"Move entry to the backward.\",\n    ),\n    Binding(\n        \"ctrl+up,ctrl+left\",\n        \"adjust_head\",\n        tooltip=\"Move entry to the forward.\",\n    ),\n    Binding(\n        \"alt+shift+down,alt+shift+left\",\n        \"adjust_tail(True, True)\",\n        tooltip=\"Resize the tail end of the entry.\",\n    ),\n    Binding(\n        \"alt+shift+up,alt+shift+right\",\n        \"adjust_head(True, True)\",\n        tooltip=\"Resize the end of the entry forward.\",\n    ),\n    Binding(\n        \"shift+up,shift+left\",\n        \"adjust_head(False, True)\",\n        tooltip=\"Resize the start of the entry backward.\",\n    ),\n    Binding(\n        \"shift+down,shift+right\",\n        \"adjust_tail(False, True)\",\n        tooltip=\"Move the head of the entry forward.\",\n    ),\n    Binding(\n        \"ctrl+d,delete,backspace\",\n        \"delete_entry\",\n        \"Delete Entry\",\n        tooltip=\"Delete the selected entry.\",\n    ),\n    Binding(\n        \"escape\",\n        \"clear_active\",\n        \"Clear\",\n        priority=True,\n        show=False,\n        tooltip=\"Cancel creating an entry or deselect entries.\",\n    ),\n]\n</code></pre> <p>All bindings for <code>AbstractTimeline</code> widget.</p> Key(s) Description ctrl+down,ctrl+right Move entry to the backward. ctrl+up,ctrl+left Move entry to the forward. alt+shift+down,alt+shift+left Resize the tail end of the entry. alt+shift+up,alt+shift+right Resize the end of the entry forward. shift+up,shift+left Resize the start of the entry backward. shift+down,shift+right Move the head of the entry forward. ctrl+d,delete,backspace Delete the selected entry. escape Cancel creating an entry or deselect entries."},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.COMPONENT_CLASSES","title":"COMPONENT_CLASSES  <code>class-attribute</code>","text":"<pre><code>COMPONENT_CLASSES: set[str] = {'timeline--normal'}\n</code></pre> <p>All component classes for the <code>AbstractTimeline</code> widget.</p> Class Description <code>timeline--normal</code> Target all lines without set markers."},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = Reactive[int](96, init=False, layout=True)\n</code></pre> <p>Actual size of the widget with the direction size of the widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.markers","title":"markers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>markers = Reactive[Markers](\n    MappingProxyType({}), init=False, compute=False, repaint=False\n)\n</code></pre> <p>Custom markers to place on the timeline.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.tile","title":"tile  <code>property</code> <code>writable</code>","text":"<pre><code>tile: bool\n</code></pre> <p>Is calendar tiling enabled?</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.selected","title":"selected  <code>property</code>","text":"<pre><code>selected: EntryType | None\n</code></pre> <p>Currently highlighted entry. None if there is nothing selected.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>HorizontalTimeline {\n    width: auto !important;\n    height: 28;\n    border-top: tall $secondary;\n    border-bottom: tall $secondary;\n    &amp;:hover {\n        border-top: thick $secondary;\n        border-bottom: thick $secondary;\n    }\n    &amp;:focus {\n        border-top: outer $primary;\n        border-bottom: outer $primary;\n    }\n}\n</code></pre> <p>Default CSS for <code>HorizontalTimeline</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Updated","title":"Updated","text":"<p>               Bases: <code>BaseMessage[TimelineType]</code>, <code>Generic[EntryT, TimelineType]</code></p> <p>Base class for all timeline messages.</p> ATTRIBUTE DESCRIPTION <code>entry</code> <p>Entry that was updated.</p> <p> </p> <code>timeline</code> <p>Alias for <code>widget</code> attribute.</p> <p> TYPE: <code>TimelineType</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class Updated(BaseMessage[TimelineType], Generic[EntryT, TimelineType]):\n    \"\"\"Base class for all timeline messages.\"\"\"\n\n    def __init__(self, widget: TimelineType, entry: EntryT) -&gt; None:\n        super().__init__(widget)\n\n        self.entry = entry\n        \"\"\"Entry that was updated.\"\"\"\n\n    @property\n    def timeline(self) -&gt; TimelineType:\n        \"\"\"Alias for `widget` attribute.\"\"\"\n        return self.widget\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Updated.entry","title":"entry  <code>instance-attribute</code>","text":"<pre><code>entry = entry\n</code></pre> <p>Entry that was updated.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Updated.timeline","title":"timeline  <code>property</code>","text":"<pre><code>timeline: TimelineType\n</code></pre> <p>Alias for <code>widget</code> attribute.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Created","title":"Created","text":"<p>               Bases: <code>Created[HorizontalEntryT, HorizontalTimelineType]</code></p> <p>Sent when a new entry is created.</p> ATTRIBUTE DESCRIPTION <code>entry</code> <p>Entry that was updated.</p> <p> </p> <code>timeline</code> <p>Alias for <code>widget</code> attribute.</p> <p> TYPE: <code>TimelineType</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class Created(\n    AbstractTimeline.Created[HorizontalEntryT, HorizontalTimelineType]\n):\n    \"\"\"Sent when a new entry is created.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Created.entry","title":"entry  <code>instance-attribute</code>","text":"<pre><code>entry = entry\n</code></pre> <p>Entry that was updated.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Created.timeline","title":"timeline  <code>property</code>","text":"<pre><code>timeline: TimelineType\n</code></pre> <p>Alias for <code>widget</code> attribute.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Deleted","title":"Deleted","text":"<p>               Bases: <code>Deleted[HorizontalEntryT, HorizontalTimelineType]</code></p> <p>Sent when an entry is deleted.</p> ATTRIBUTE DESCRIPTION <code>entry</code> <p>Entry that was updated.</p> <p> </p> <code>timeline</code> <p>Alias for <code>widget</code> attribute.</p> <p> TYPE: <code>TimelineType</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class Deleted(\n    AbstractTimeline.Deleted[HorizontalEntryT, HorizontalTimelineType]\n):\n    \"\"\"Sent when an entry is deleted.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Deleted.entry","title":"entry  <code>instance-attribute</code>","text":"<pre><code>entry = entry\n</code></pre> <p>Entry that was updated.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Deleted.timeline","title":"timeline  <code>property</code>","text":"<pre><code>timeline: TimelineType\n</code></pre> <p>Alias for <code>widget</code> attribute.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Selected","title":"Selected","text":"<p>               Bases: <code>Selected[HorizontalEntryT, HorizontalTimelineType]</code></p> <p>Sent when a new entry selected.</p> ATTRIBUTE DESCRIPTION <code>entry</code> <p>Entry that was updated.</p> <p> </p> <code>timeline</code> <p>Alias for <code>widget</code> attribute.</p> <p> TYPE: <code>TimelineType</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class Selected(\n    AbstractTimeline.Selected[HorizontalEntryT, HorizontalTimelineType]\n):\n    \"\"\"Sent when a new entry selected.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Selected.entry","title":"entry  <code>instance-attribute</code>","text":"<pre><code>entry = entry\n</code></pre> <p>Entry that was updated.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.Selected.timeline","title":"timeline  <code>property</code>","text":"<pre><code>timeline: TimelineType\n</code></pre> <p>Alias for <code>widget</code> attribute.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.action_delete_entry","title":"action_delete_entry","text":"<pre><code>action_delete_entry(id: str | None = None) -&gt; None\n</code></pre> <p>Remove the selected or provided entry from the timeline.</p> PARAMETER DESCRIPTION <code>id</code> <p>If removing an un-highlighted widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>def action_delete_entry(self, id: str | None = None) -&gt; None:\n    \"\"\"Remove the selected or provided entry from the timeline.\n\n    Args:\n        id: If removing an un-highlighted widget.\n    \"\"\"\n    if id:\n        try:\n            entry = self.query_one(f\"#{id}\", self.Entry)\n        except NoMatches:\n            return\n    elif self.selected:\n        entry = self.selected\n    else:\n        return\n\n    entry.remove()\n    self.post_message(self.Deleted(self, entry))\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.action_adjust_tail","title":"action_adjust_tail","text":"<pre><code>action_adjust_tail(tail: bool = False, resize: bool = False) -&gt; None\n</code></pre> <p>Adjust the tail of the selected timeline entry.</p> PARAMETER DESCRIPTION <code>tail</code> <p>Increase the size if resizing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>resize</code> <p>Resize the entry instead of moving.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>def action_adjust_tail(\n    self,\n    tail: bool = False,\n    resize: bool = False,\n) -&gt; None:\n    \"\"\"Adjust the tail of the selected timeline entry.\n\n    Args:\n        tail: Increase the size if resizing.\n        resize: Resize the entry instead of moving.\n    \"\"\"\n    if resize:\n        cast(\"EntryType\", self.selected).resize(1, tail=tail)\n    else:\n        cast(\"EntryType\", self.selected).move(1)\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimeline.action_adjust_head","title":"action_adjust_head","text":"<pre><code>action_adjust_head(tail: bool = False, resize: bool = False) -&gt; None\n</code></pre> <p>Adjust the head of the selected timeline entry.</p> PARAMETER DESCRIPTION <code>tail</code> <p>Increase the size if resizing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>resize</code> <p>Resize the entry instead of moving.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>def action_adjust_head(\n    self,\n    tail: bool = False,\n    resize: bool = False,\n) -&gt; None:\n    \"\"\"Adjust the head of the selected timeline entry.\n\n    Args:\n        tail: Increase the size if resizing.\n        resize: Resize the entry instead of moving.\n    \"\"\"\n    if resize:\n        cast(\"EntryType\", self.selected).resize(-1, tail=not tail)\n    else:\n        cast(\"EntryType\", self.selected).move(-1)\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry","title":"HorizontalEntry","text":"<p>               Bases: <code>AbstractEntry</code></p> <p>Horizontal entry for a horizontal timeline layout.</p> PARAMETER DESCRIPTION <code>id</code> <p>ID of the Widget.</p> <p> TYPE: <code>str</code> </p> <code>content</code> <p>A Rich renderable, or string containing console markup.</p> <p> TYPE: <code>RenderableType | SupportsVisual</code> DEFAULT: <code>''</code> </p> <code>offset</code> <p>Initial offset to use for the entry.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>size</code> <p>Initial size to use for the entry.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>markup</code> <p>True if markup should be parsed and rendered.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>name</code> <p>Name of widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>Space separated list of class names.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the static is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> CLASS DESCRIPTION <code>Updated</code> <p>Base message for all entries.</p> <code>Resized</code> <p>Entry was resized by the user.</p> <code>Moved</code> <p>Entry was moved by the user.</p> METHOD DESCRIPTION <code>mime</code> <p>Instatiate a mime entry. For previewing resizing visually.</p> <code>resize</code> <p>Public method for resizing the widget.</p> <code>is_moving</code> <p>Is the widget moving or resizing?</p> ATTRIBUTE DESCRIPTION <code>clicked</code> <p>Initial point where the entry was clicked when moving or resizing.</p> <p> </p> <code>dimension</code> <p>Alias for the size of the entry depending on orientation.</p> <p> TYPE: <code>int</code> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>HorizontalEntry</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>class HorizontalEntry(AbstractEntry):\n    \"\"\"Horizontal entry for a horizontal timeline layout.\n\n    Params:\n        id: ID of the Widget.\n        content: A Rich renderable, or string containing console markup.\n        offset: Initial offset to use for the entry.\n        size: Initial size to use for the entry.\n        markup: True if markup should be parsed and rendered.\n        name: Name of widget.\n        classes: Space separated list of class names.\n        disabled: Whether the static is disabled or not.\n    \"\"\"\n\n    class Resized(AbstractEntry.Resized[\"HorizontalEntry\"]):\n        \"\"\"Entry was resized by the user.\"\"\"\n\n    class Moved(AbstractEntry.Moved[\"HorizontalEntry\"]):\n        \"\"\"Entry was moved by the user.\"\"\"\n\n    DIMENSION = \"width\"\n    EDGE_MARGIN: ClassVar[int] = 2\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    HorizontalEntry {\n        min-width: 2;\n        width: 4;\n        height: 100%;\n        border-left: double $panel-lighten-2;\n        border-right: double $panel-lighten-2;\n        &amp;:hover.size_start {\n            border: none;\n            border-left: double $secondary;\n            border-right: double $panel-lighten-2;\n        }\n        &amp;:hover.size_end {\n            border: none;\n            border-right: double $secondary;\n            border-left: double $panel-lighten-2;\n        }\n        &amp;:focus.size_start {\n            border: none;\n            border-left: thick $primary;\n            border-right: double $primary;\n        }\n        &amp;:focus.size_end {\n            border: none;\n            border-left: double $primary;\n            border-right: thick $primary;\n        }\n        &amp;:focus {\n            border: double $primary;\n        }\n        &amp;.-mime {\n            hatch: vertical white 5%;\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for `HorizontalEntry` widget.\"\"\"\n\n    def sel_delta(self, event: MouseEvent) -&gt; int:\n        return event.delta_x\n\n    def is_tail(self, offset: Offset) -&gt; bool:\n        return 0 &lt;= offset.x &lt;= self.EDGE_MARGIN\n\n    def is_head(self, offset: Offset) -&gt; bool:\n        width = cast(\"Scalar\", self.styles.width).value\n        return width - self.EDGE_MARGIN &lt;= offset.x &lt;= width\n\n    def is_start(self, offset: Offset) -&gt; bool:\n        return offset.x &lt; cast(\"Scalar\", self.styles.width).value / 2\n\n    def move(self, delta: int) -&gt; None:\n        offset = Offset(delta, 0)\n        self.offset = self.offset + offset\n        self.post_message(self.Moved(self, delta))\n\n    def merge(self, other: AbstractEntry) -&gt; AwaitRemove:\n        x1, x2 = self.offset.x, other.offset.x\n        start = x1 if x1 &lt;= x2 else x2\n        self.offset = Offset(start, 0)\n        e1, e2 = self.end, other.end\n        self.styles.width = abs(start - (e1 if e1 &gt;= e2 else e2))\n        return other.remove()\n\n    def _resize_helper(self, delta: int, *, tail: bool) -&gt; int:\n        if tail:\n            delta *= -1\n\n        new_width = cast(\"Scalar\", self.styles.width).value + delta\n\n        if tail and new_width != cast(\"Scalar\", self.styles.width).value:\n            self.offset += Offset(-delta, 0)\n\n        self.styles.width = new_width\n        return delta\n\n    def set_dims(\n        self, offset: int | None = None, size: int | None = None\n    ) -&gt; None:\n        if offset:\n            self.offset = Offset(offset, 0)\n        if size:\n            self.styles.width = size\n\n    @property\n    def start(self) -&gt; int:\n        return self.offset.x\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.clicked","title":"clicked  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>clicked = var[Offset | None](None, init=False)\n</code></pre> <p>Initial point where the entry was clicked when moving or resizing.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.dimension","title":"dimension  <code>property</code> <code>writable</code>","text":"<pre><code>dimension: int\n</code></pre> <p>Alias for the size of the entry depending on orientation.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>HorizontalEntry {\n    min-width: 2;\n    width: 4;\n    height: 100%;\n    border-left: double $panel-lighten-2;\n    border-right: double $panel-lighten-2;\n    &amp;:hover.size_start {\n        border: none;\n        border-left: double $secondary;\n        border-right: double $panel-lighten-2;\n    }\n    &amp;:hover.size_end {\n        border: none;\n        border-right: double $secondary;\n        border-left: double $panel-lighten-2;\n    }\n    &amp;:focus.size_start {\n        border: none;\n        border-left: thick $primary;\n        border-right: double $primary;\n    }\n    &amp;:focus.size_end {\n        border: none;\n        border-left: double $primary;\n        border-right: thick $primary;\n    }\n    &amp;:focus {\n        border: double $primary;\n    }\n    &amp;.-mime {\n        hatch: vertical white 5%;\n    }\n}\n</code></pre> <p>Default CSS for <code>HorizontalEntry</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.Updated","title":"Updated","text":"<p>               Bases: <code>BaseMessage[T]</code></p> <p>Base message for all entries.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>class Updated(BaseMessage[T]):\n    \"\"\"Base message for all entries.\"\"\"\n\n    @property\n    def entry(self) -&gt; T:\n        return self.widget\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.Resized","title":"Resized","text":"<p>               Bases: <code>Resized['HorizontalEntry']</code></p> <p>Entry was resized by the user.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>class Resized(AbstractEntry.Resized[\"HorizontalEntry\"]):\n    \"\"\"Entry was resized by the user.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.Moved","title":"Moved","text":"<p>               Bases: <code>Moved['HorizontalEntry']</code></p> <p>Entry was moved by the user.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>class Moved(AbstractEntry.Moved[\"HorizontalEntry\"]):\n    \"\"\"Entry was moved by the user.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.mime","title":"mime  <code>classmethod</code>","text":"<pre><code>mime(\n    offset: int | None = None,\n    size: int | None = None,\n    *,\n    name: str | None = None,\n    markup: bool = True,\n    disabled: bool = False,\n) -&gt; Self\n</code></pre> <p>Instatiate a mime entry. For previewing resizing visually.</p> PARAMETER DESCRIPTION <code>offset</code> <p>Initial offset to use for the entry.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>size</code> <p>Initial size to use for the entry.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>markup</code> <p>True if markup should be parsed and rendered.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>name</code> <p>Name of widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the static is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Self</code> <p>Constructed timeline entry.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>@classmethod\ndef mime(\n    cls,\n    offset: int | None = None,\n    size: int | None = None,\n    *,\n    name: str | None = None,\n    markup: bool = True,\n    disabled: bool = False,\n) -&gt; Self:\n    \"\"\"Instatiate a mime entry. For previewing resizing visually.\n\n    Args:\n        offset: Initial offset to use for the entry.\n        size: Initial size to use for the entry.\n        markup: True if markup should be parsed and rendered.\n        name: Name of widget.\n        disabled: Whether the static is disabled or not.\n\n    Returns:\n        Constructed timeline entry.\n    \"\"\"\n    return cls(\n        id=f\"id-{uuid4()}\",\n        content=\"\",\n        offset=offset,\n        size=size,\n        markup=markup,\n        name=name,\n        classes=\"-mime\",\n        disabled=disabled,\n    )\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.resize","title":"resize","text":"<pre><code>resize(delta: int, *, tail: bool) -&gt; None\n</code></pre> <p>Public method for resizing the widget.</p> PARAMETER DESCRIPTION <code>delta</code> <p>total amount to be moved.</p> <p> TYPE: <code>int</code> </p> <code>tail</code> <p>Whether to adjust the end or the start of the widget.</p> <p> TYPE: <code>bool</code> </p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>def resize(self, delta: int, *, tail: bool) -&gt; None:\n    \"\"\"Public method for resizing the widget.\n\n    Args:\n        delta: total amount to be moved.\n        tail: Whether to adjust the end or the start of the widget.\n    \"\"\"\n    delta = self._resize_helper(delta, tail=tail)\n    self.post_message(self.Resized(self, self.size, delta))\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalEntry.is_moving","title":"is_moving","text":"<pre><code>is_moving(offset: Offset) -&gt; bool\n</code></pre> <p>Is the widget moving or resizing?</p> PARAMETER DESCRIPTION <code>offset</code> <p>Mouse offset to check against.</p> <p> TYPE: <code>Offset</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the widget is moving else False.</p> Source code in <code>src/textual_timepiece/timeline/_timeline_entry.py</code> <pre><code>def is_moving(self, offset: Offset) -&gt; bool:\n    \"\"\"Is the widget moving or resizing?\n\n    Args:\n        offset: Mouse offset to check against.\n\n    Returns:\n        True if the widget is moving else False.\n    \"\"\"\n    return not (self.is_tail(offset) or self.is_head(offset))\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimelineNavigation","title":"HorizontalTimelineNavigation","text":"<p>               Bases: <code>TimelineNavigation[HorizontalTimeline[HorizontalEntryType]]</code></p> <p>Horizontal widget containing a horizontal timeline and header.</p> PARAMETER DESCRIPTION <code>header</code> <p>Header to use at the start of the timeline.</p> <p> TYPE: <code>Widget | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> ATTRIBUTE DESCRIPTION <code>length</code> <p>Actual length of the actual timeline navigation.</p> <p> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>HorizontalTimelineNavigation</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class HorizontalTimelineNavigation(\n    TimelineNavigation[HorizontalTimeline[HorizontalEntryType]]\n):\n    \"\"\"Horizontal widget containing a horizontal timeline and header.\n\n    Params:\n        header: Header to use at the start of the timeline.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n    \"\"\"\n\n    Timeline = HorizontalTimeline[HorizontalEntryT]\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    HorizontalTimelineNavigation {\n        layout: horizontal !important;\n        width: auto !important;\n    }\n    \"\"\"\n    \"\"\"Default CSS for `HorizontalTimelineNavigation` widget.\"\"\"\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimelineNavigation.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = var[int](96, init=False)\n</code></pre> <p>Actual length of the actual timeline navigation.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalTimelineNavigation.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>HorizontalTimelineNavigation {\n    layout: horizontal !important;\n    width: auto !important;\n}\n</code></pre> <p>Default CSS for <code>HorizontalTimelineNavigation</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalRuler","title":"HorizontalRuler","text":"<p>               Bases: <code>AbstractRuler</code></p> <p>Horizontal ruler for marking horizontal timelines.</p> PARAMETER DESCRIPTION <code>duration</code> <p>Total length of the ruler.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>marker_factory</code> <p>Callable for creating the markers.</p> <p> TYPE: <code>MarkerFactory | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> ATTRIBUTE DESCRIPTION <code>duration</code> <p>Total time actual time the ruler spans in seconds.</p> <p> </p> <code>length</code> <p>Actual length of the widget.</p> <p> </p> <code>subdivisions</code> <p>Amount of subdivisions to use when calculating markers.</p> <p> </p> <code>time_chunk</code> <p>Time chunk for each subdivision that the ruler creates.</p> <p> </p> <code>marker_len</code> <p>The marker length of the each time_chunk.</p> <p> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>HorizontalRuler</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_base_timeline.py</code> <pre><code>class HorizontalRuler(AbstractRuler):\n    \"\"\"Horizontal ruler for marking horizontal timelines.\n\n    Params:\n        duration: Total length of the ruler.\n        marker_factory: Callable for creating the markers.\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n    \"\"\"\n\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    HorizontalRuler {\n        border-top: tall $secondary;\n        border-bottom: tall $secondary;\n        width: auto !important;\n        height: 3;\n        hatch: vertical white 5%;\n    }\n    \"\"\"\n    \"\"\"Default CSS for `HorizontalRuler` widget.\"\"\"\n\n    def render_line(self, y: int) -&gt; Strip:\n        if y != (self.size.height // 2):\n            return Strip.blank(self.size.width)\n\n        style = self.get_component_rich_style(\"abstractruler--label\")\n        return Strip(\n            [\n                Segment(self._factory(t).rjust(self.marker_len), style)\n                for t in range(self.time_chunk, self.duration, self.time_chunk)\n            ]\n        ).simplify()\n\n    def get_content_width(self, container: Size, viewport: Size) -&gt; int:\n        return self.length\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalRuler.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration = var[int](86400, init=False)\n</code></pre> <p>Total time actual time the ruler spans in seconds.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalRuler.length","title":"length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>length = reactive[int](96, layout=True, init=False)\n</code></pre> <p>Actual length of the widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalRuler.subdivisions","title":"subdivisions  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>subdivisions = reactive[int](24, init=False)\n</code></pre> <p>Amount of subdivisions to use when calculating markers.</p> <p>Generator gets called this amount of times.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalRuler.time_chunk","title":"time_chunk  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>time_chunk = Reactive[int](3600, init=False, compute=False)\n</code></pre> <p>Time chunk for each subdivision that the ruler creates.</p> <p>Computed automatically when other reactives change.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalRuler.marker_len","title":"marker_len  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>marker_len = Reactive[int](4, init=False, compute=False)\n</code></pre> <p>The marker length of the each time_chunk.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.HorizontalRuler.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>HorizontalRuler {\n    border-top: tall $secondary;\n    border-bottom: tall $secondary;\n    width: auto !important;\n    height: 3;\n    hatch: vertical white 5%;\n}\n</code></pre> <p>Default CSS for <code>HorizontalRuler</code> widget.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledHorizontalTimeline","title":"RuledHorizontalTimeline","text":"<p>               Bases: <code>AbstractRuledTimeline[HorizontalTimelineNavigation, HorizontalRuler]</code></p> <p>Ruled horizontal timeline with markers.</p> <p>Note</p> <p>If providing headers with the <code>header_factory</code> parameter make sure to compensate with left padding for the ruler to keep alignment in place.</p> PARAMETER DESCRIPTION <code>total</code> <p>Total amount of timelines to draw.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>marker_factory</code> <p>Factory function for creating markers on the ruler. Defaults to generating markers in the HH:mm format.</p> <p> TYPE: <code>MarkerFactory | None</code> DEFAULT: <code>None</code> </p> <code>header_factory</code> <p>Factory function for creating headers.</p> <p> TYPE: <code>Callable[[int], Widget] | None</code> DEFAULT: <code>None</code> </p> <code>name</code> <p>The name of the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>id</code> <p>The ID of the widget in the DOM.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>classes</code> <p>The CSS classes for the widget.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>disabled</code> <p>Whether the widget is disabled or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>can_maximize</code> <p>Whether the widget can be maximized or not.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> ATTRIBUTE DESCRIPTION <code>total</code> <p>Total amount of timelines to compose. Minimum 1.</p> <p> </p> <code>duration</code> <p>Total time included in widget in seconds.</p> <p> </p> <code>DEFAULT_CSS</code> <p>Default CSS for <code>RuledHorizontalTimeline</code> widget.</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/textual_timepiece/timeline/_timeline_manager.py</code> <pre><code>class RuledHorizontalTimeline(\n    AbstractRuledTimeline[HorizontalTimelineNavigation, HorizontalRuler]\n):\n    \"\"\"Ruled horizontal timeline with markers.\n\n    !!! note\n        If providing headers with the `header_factory` parameter make\n        sure to compensate with left padding for the ruler to keep alignment\n        in place.\n\n    Params:\n        total: Total amount of timelines to draw.\n        marker_factory: Factory function for creating markers on the ruler.\n            Defaults to generating markers in the *HH:mm* format.\n        header_factory: Factory function for creating headers.\n\n        name: The name of the widget.\n        id: The ID of the widget in the DOM.\n        classes: The CSS classes for the widget.\n        disabled: Whether the widget is disabled or not.\n        can_maximize: Whether the widget can be maximized or not.\n    \"\"\"\n\n    Timeline = HorizontalTimelineNavigation[HorizontalEntryType]\n    DEFAULT_CSS: ClassVar[str] = \"\"\"\\\n    RuledHorizontalTimeline {\n        height: 1fr;\n        &amp; &gt; HorizontalTimelineNavigation {\n            height: 1fr;\n            &amp; &gt; HorizontalTimeline {\n                height: 1fr;\n            }\n        }\n    }\n    \"\"\"\n    \"\"\"Default CSS for `RuledHorizontalTimeline` widget.\"\"\"\n\n    def __init__(\n        self,\n        total: int | None = None,\n        marker_factory: AbstractRuler.MarkerFactory | None = None,\n        header_factory: Callable[[int], Widget] | None = None,\n        name: str | None = None,\n        id: str | None = None,\n        classes: str | None = None,\n        *,\n        disabled: bool = False,\n        can_maximize: bool | None = None,\n    ) -&gt; None:\n        super().__init__(\n            total,\n            marker_factory,\n            header_factory,\n            name,\n            id,\n            classes,\n            disabled=disabled,\n            can_maximize=can_maximize,\n        )\n        self.length = 192\n\n    def compose(self) -&gt; ComposeResult:\n        yield HorizontalRuler(marker_factory=self._marker_factory).data_bind(\n            RuledHorizontalTimeline.length\n        )\n        yield from super().compose()\n</code></pre>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledHorizontalTimeline.total","title":"total  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>total = var[int](1, init=False)\n</code></pre> <p>Total amount of timelines to compose. Minimum 1.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledHorizontalTimeline.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration = var[int](86400, init=False)\n</code></pre> <p>Total time included in widget in seconds.</p>"},{"location":"reference/timeline/#textual_timepiece.timeline.RuledHorizontalTimeline.DEFAULT_CSS","title":"DEFAULT_CSS  <code>class-attribute</code>","text":"<pre><code>RuledHorizontalTimeline {\n    height: 1fr;\n    &amp; &gt; HorizontalTimelineNavigation {\n        height: 1fr;\n        &amp; &gt; HorizontalTimeline {\n            height: 1fr;\n        }\n    }\n}\n</code></pre> <p>Default CSS for <code>RuledHorizontalTimeline</code> widget.</p>"}]}